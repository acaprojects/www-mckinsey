{"version":3,"sources":["webpack:///src/app/shell/reports/report-display/report-display.component.ts","webpack:///src/app/shell/reports/report-display/report-display.component.html","webpack:///src/app/shell/reports/report-table/report-table.component.ts","webpack:///src/app/shell/reports/report-table/report-table.component.html","webpack:///src/app/shell/reports/reports.component.ts","webpack:///src/app/shell/reports/reports.component.html","webpack:///src/app/shell/reports/reports.module.ts"],"names":["ReportDisplayComponent","_service","start_date","startOf","valueOf","end_date","endOf","Organisation","initialised","pipe","_","subscribe","locations","building","changes","report","report_data","loading","Reports","show","id","date","format","Math","floor","zone_ids","map","i","join","then","type","err","notifyError","message","downloadCSV","name","split","toLowerCase","buildings","generateReport","downloadReport","selector","templateUrl","styleUrls","ReportTableComponent","list","fields","length","Object","keys","filter","details","hide_fields","indexOf","ReportsComponent","_route","_router","reports","short_name","description","icon","src","content","subscription","paramMap","params","has","active_report","get","navigate","find","ROUTES","path","component","redirectTo","ReportsModule","forChild","declarations","imports"],"mappings":"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","file":"shell-reports-reports-module-es5.js","sourcesContent":["import { Component, OnInit, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { first } from 'rxjs/operators';\n\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { Building } from 'src/app/services/data/organisation/building.class';\nimport { ReportDetails } from '../reports.component';\nimport { Report } from 'src/app/services/data/reports/report.class';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'a-report-display',\n    templateUrl: './report-display.component.html',\n    styleUrls: ['./report-display.component.scss'],\n})\nexport class ReportDisplayComponent implements OnInit, OnChanges {\n    /** Details about the report being requested */\n    @Input() public report: ReportDetails;\n    /** Start date for the generated report */\n    public start_date: number = dayjs().startOf('d').valueOf();\n    /** End date for the generated report */\n    public end_date: number = dayjs().endOf('d').valueOf();\n    /** List of report data entries */\n    public report_data: Report;\n    /** Whether report data is loading */\n    public loading: boolean;\n    /** List of selected locations */\n    public locations: Building[];\n\n    /** List of available buildings */\n    public get buildings(): Building[] {\n        return this._service.Organisation.buildings;\n    }\n\n    constructor(private _service: ApplicationService) {}\n\n    public ngOnInit(): void {\n        this._service.Organisation.initialised.pipe(first(_ => _)).subscribe(() => {\n            this.locations = [this._service.Organisation.building];\n        })\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        /* istanbul ignore else */\n        if (changes.report) {\n            this.report_data = null;\n        }\n    }\n\n    /**\n     * Generate report\n     */\n    public generateReport() {\n        /* istanbul ignore else */\n        if (this.report) {\n            this.loading = true;\n            this.report_data = null;\n            this._service.Reports.show(this.report.id, {\n                date: dayjs(this.start_date).format('YYYY-MM-DD'),\n                start_date: Math.floor(this.start_date / 1000),\n                end_date: Math.floor(this.end_date / 1000),\n                zone_ids: this.locations.map((i) => i.id).join(','),\n            }).then(\n                (report) => {\n                    this.loading = false;\n                    this.report_data = new Report({ ...report, type: this.report.id });\n                },\n                (err) => {\n                    this.loading = false;\n                    this._service.notifyError(\n                        `Error generating report. Error: ${err.message || err}`\n                    );\n                }\n            );\n        }\n    }\n\n    public downloadReport() {\n        /* istanbul ignore else */\n        if (this.report_data) {\n            const date = dayjs(this.start_date).format('YYYY-MM-DD');\n            this.report_data.downloadCSV(\n                `${this.report.name.split(' ').join('_').toLowerCase()}+${date}.csv`\n            );\n        }\n    }\n}\n","<div class=\"header\">\n    <div class=\"period\">\n        <div class=\"field\">\n            <label for=\"start-date\">Start Date</label>\n            <a-date-field\n                name=\"start-date\"\n                [(ngModel)]=\"start_date\"\n                [from]=\"end_date / 10\"\n                [to]=\"end_date\"\n            ></a-date-field>\n        </div>\n        <div class=\"gap\">to</div>\n        <div class=\"field\">\n            <label for=\"end-date\">End Date</label>\n            <a-date-field\n                name=\"end-date\"\n                [(ngModel)]=\"end_date\"\n                [from]=\"start_date\"\n                [to]=\"start_date * 10\"\n            ></a-date-field>\n        </div>\n    </div>\n    <div class=\"location dark-mode\">\n        <mat-form-field appearance=\"outline\" *ngIf=\"buildings && buildings.length > 1\">\n            <mat-select name=\"locations\" [(ngModel)]=\"locations\" multiple>\n                <mat-select-trigger>\n                    {{ locations ? locations[0]?.name : '' }}\n                    <span *ngIf=\"locations?.length > 1\" class=\"selection\">\n                        (+{{ locations.length - 1 }}\n                        {{ locations?.length === 2 ? 'other' : 'others' }})\n                    </span>\n                </mat-select-trigger>\n                <mat-option *ngFor=\"let building of buildings\" [value]=\"building\">\n                    <div class=\"option\">\n                        <div class=\"code\">{{ building.code }}</div>\n                        <div class=\"name\">{{ building.name }}</div>\n                    </div>\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n    <div class=\"actions\">\n        <button mat-button name=\"generate\" [disabled]=\"loading\" (tapped)=\"generateReport()\">\n            <span *ngIf=\"!loading; else gen_loader\">Generate</span>\n            <ng-template #gen_loader><mat-spinner diameter=\"32\"></mat-spinner></ng-template>\n        </button>\n        <button mat-button name=\"download\" [disabled]=\"!report_data\" (tapped)=\"downloadReport()\">Download</button>\n    </div>\n</div>\n<div class=\"display\">\n    <ng-container *ngIf=\"!loading; else load_state\">\n        <ng-container *ngIf=\"report_data && report_data.data.length; else empty_state\">\n            <a-report-table [list]=\"report_data.data || []\" [details]=\"report\"></a-report-table>\n        </ng-container>\n    </ng-container>\n</div>\n<ng-template #empty_state>\n    <div class=\"info-block center\">\n        <div class=\"icon\">\n            <app-icon [icon]=\"{ class: 'material-icons', content: 'arrow_upward' }\"></app-icon>\n        </div>\n        <div class=\"text\">\n            {{\n                report_data ? 'No entries for selected date' : 'Press generate above to view report'\n            }}\n        </div>\n    </div>\n</ng-template>\n<ng-template #load_state>\n    <div class=\"info-block center\">\n        <div class=\"icon\">\n            <mat-spinner diameter=\"32\"></mat-spinner>\n        </div>\n        <div class=\"text\">Loading report...</div>\n    </div>\n</ng-template>\n","import { Component, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { HashMap } from 'src/app/shared/utilities/types.utilities';\nimport { ReportDetails } from '../reports.component';\n\n@Component({\n    selector: 'a-report-table',\n    templateUrl: './report-table.component.html',\n    styleUrls: ['./report-table.component.scss'],\n})\nexport class ReportTableComponent implements OnChanges {\n    /** List of report table data */\n    @Input() public list: HashMap[] = [];\n    /** Map of details for report */\n    @Input() public details: ReportDetails;\n\n    public fields: string[] = [];\n\n    public ngOnChanges(changes: SimpleChanges) {\n        /* istanbul ignore else */\n        if (changes.list && this.list && this.list.length) {\n            this.fields = Object.keys(this.list[0]).filter(i => this.details.hide_fields.indexOf(i) < 0);\n        }\n    }\n}\n","<table cdk-table [dataSource]=\"list\">\n    <!-- Position Column -->\n    <ng-container *ngFor=\"let key of fields\" [cdkColumnDef]=\"key\">\n        <th cdk-header-cell [attr.name]=\"key\" *cdkHeaderCellDef>{{ key }}</th>\n        <td cdk-cell [attr.name]=\"key\" *cdkCellDef=\"let element\">{{ element[key] }}</td>\n    </ng-container>\n\n    <tr cdk-header-row *cdkHeaderRowDef=\"fields\"></tr>\n    <tr cdk-row *cdkRowDef=\"let row; columns: fields\"></tr>\n</table>\n","import { Component, OnInit } from '@angular/core';\nimport { ApplicationIcon } from 'src/app/shared/utilities/settings.interfaces';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BaseDirective } from 'src/app/shared/base.directive';\n\nexport interface ReportDetails {\n    /** ID associated with the report */\n    id: string;\n    /** Name of the report */\n    name: string;\n    /** Shortened name of the report */\n    short_name: string;\n    /** More details about the report */\n    description: string;\n    /** Fields to hide on the UI */\n    hide_fields: string[];\n    /** Icon to display for report */\n    icon: ApplicationIcon;\n}\n\n@Component({\n    selector: 'a-reports',\n    templateUrl: './reports.component.html',\n    styleUrls: ['./reports.component.scss'],\n})\nexport class ReportsComponent extends BaseDirective implements OnInit {\n    /** Currently selected date */\n    public date: string;\n    /** ID of the active report */\n    public active_report: string;\n    /** List of available reports to display */\n    public readonly reports: ReportDetails[] = [\n        {\n            id: 'bookings',\n            name: 'Aggregate Bookings Report',\n            short_name: 'Bookings',\n            description: 'Generate comprehensive report on various aspects of bookings',\n            hide_fields: ['room_email'],\n            icon: { type: 'img', src: 'assets/img/report-booking.svg' }\n        },\n        {\n            id: 'catering',\n            name: 'Aggregate Charge Back Report',\n            short_name: 'Catering',\n            description: 'View confirmed catering report or mark up unconfirmed catering',\n            hide_fields: ['room_email'],\n            icon: { type: 'icon', class: 'material-icons', content: 'room_service' }\n        },\n    ];\n\n    public get the_report(): ReportDetails {\n        return this.reports.find(report => report.id === this.active_report);\n    }\n\n    constructor(private _route: ActivatedRoute, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription('route.params', this._route.paramMap.subscribe((params) => {\n            if (params.has('report')) {\n                this.active_report = params.get('report');\n            }\n        }));\n    }\n\n    public updateReport() {\n        this._router.navigate(['/reports', this.active_report]);\n    }\n}\n","<div class=\"reports\">\n    <a-sidebar></a-sidebar>\n    <div class=\"group\">\n        <a-topbar-header [(date)]=\"date\">\n            <div class=\"topbar\" *ngIf=\"active_report\">\n                <mat-form-field *ngIf=\"reports && reports.length > 1\" appearance=\"outline\">\n                    <mat-select [(ngModel)]=\"active_report\" (ngModelChange)=\"updateReport()\">\n                        <mat-option *ngFor=\"let report of reports\" [value]=\"report.id\">\n                            {{ report.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </a-topbar-header>\n        <main>\n            <div class=\"options\" *ngIf=\"!active_report; else report_display\">\n                <a\n                    class=\"card\"\n                    mat-button\n                    *ngFor=\"let report of reports\"\n                    [routerLink]=\"['/reports', report.id]\"\n                >\n                    <div class=\"content\">\n                        <div class=\"icon\">\n                            <app-icon [icon]=\"report.icon\"></app-icon>\n                        </div>\n                        <h3>{{ report.short_name }}</h3>\n                        <div class=\"details\">\n                            <div class=\"desc\">{{ report.description }}</div>\n                            <app-icon\n                                [icon]=\"{\n                                    class: 'material-icons',\n                                    content: 'keyboard_arrow_right'\n                                }\"\n                            ></app-icon>\n                        </div>\n                    </div>\n                </a>\n            </div>\n        </main>\n    </div>\n</div>\n<ng-template #report_display>\n    <a-report-display [report]=\"the_report\">\n    </a-report-display>\n</ng-template>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Route, RouterModule } from '@angular/router';\n\nimport { ReportsComponent } from './reports.component';\nimport { SharedContentModule } from 'src/app/shared/shared.module';\nimport { ReportDisplayComponent } from './report-display/report-display.component';\nimport { ReportTableComponent } from './report-table/report-table.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: ReportsComponent },\n    { path: ':report', component: ReportsComponent },\n    { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  declarations: [ReportsComponent, ReportDisplayComponent, ReportTableComponent],\n  imports: [CommonModule, FormsModule, RouterModule.forChild(ROUTES), SharedContentModule]\n})\nexport class ReportsModule { }\n"]}