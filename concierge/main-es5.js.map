{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/overlays/booking-confirm/booking-confirm.component.ts","webpack:///src/app/overlays/booking-confirm/booking-confirm.component.html","webpack:///src/app/overlays/booking-modal/booking-modal.component.ts","webpack:///src/app/overlays/booking-modal/booking-modal.component.html","webpack:///src/app/overlays/booking-modal/catering/catering.component.ts","webpack:///src/app/overlays/booking-modal/catering/catering.component.html","webpack:///src/app/overlays/booking-modal/catering/order-details/category/category.component.ts","webpack:///src/app/overlays/booking-modal/catering/order-details/category/category.component.html","webpack:///src/app/overlays/booking-modal/catering/order-details/item/item.component.ts","webpack:///src/app/overlays/booking-modal/catering/order-details/item/item.component.html","webpack:///src/app/overlays/booking-modal/catering/order-details/order-details.component.ts","webpack:///src/app/overlays/booking-modal/catering/order-details/order-details.component.html","webpack:///src/app/overlays/booking-modal/catering/order-list/item/item.component.ts","webpack:///src/app/overlays/booking-modal/catering/order-list/item/item.component.html","webpack:///src/app/overlays/booking-modal/catering/order-list/order-list.component.ts","webpack:///src/app/overlays/booking-modal/catering/order-list/order-list.component.html","webpack:///src/app/overlays/booking-modal/find-space/filters/filters.component.ts","webpack:///src/app/overlays/booking-modal/find-space/filters/filters.component.html","webpack:///src/app/overlays/booking-modal/find-space/find-space.component.ts","webpack:///src/app/overlays/booking-modal/find-space/find-space.component.html","webpack:///src/app/overlays/booking-modal/find-space/item/item.component.ts","webpack:///src/app/overlays/booking-modal/find-space/item/item.component.html","webpack:///src/app/overlays/booking-modal/form/form.component.ts","webpack:///src/app/overlays/booking-modal/form/form.component.html","webpack:///src/app/overlays/catering-confirm-modal/catering-confirm-modal.component.ts","webpack:///src/app/overlays/catering-confirm-modal/catering-confirm-modal.component.html","webpack:///src/app/overlays/catering-details-modal/catering-details-modal.component.ts","webpack:///src/app/overlays/catering-details-modal/catering-details-modal.component.html","webpack:///src/app/overlays/confirm-modal/confirm-modal.component.ts","webpack:///src/app/overlays/confirm-modal/confirm-modal.component.html","webpack:///src/app/overlays/meeting-details-modal/catering/catering.component.ts","webpack:///src/app/overlays/meeting-details-modal/catering/catering.component.html","webpack:///src/app/overlays/meeting-details-modal/details/details.component.ts","webpack:///src/app/overlays/meeting-details-modal/details/details.component.html","webpack:///src/app/overlays/meeting-details-modal/meeting-details-modal.component.html","webpack:///src/app/overlays/meeting-details-modal/meeting-details-modal.component.ts","webpack:///src/app/overlays/meeting-details-modal/private-details/private-details.component.ts","webpack:///src/app/overlays/meeting-details-modal/private-details/private-details.component.html","webpack:///src/app/overlays/meeting-details-modal/requirements/requirements.component.html","webpack:///src/app/overlays/meeting-details-modal/requirements/requirements.component.ts","webpack:///src/app/overlays/new-user-modal/new-user-modal.component.ts","webpack:///src/app/overlays/new-user-modal/new-user-modal.component.html","webpack:///src/app/overlays/overlays.module.ts","webpack:///src/app/overlays/package-options-modal/package-options-modal.component.ts","webpack:///src/app/overlays/package-options-modal/package-options-modal.component.html","webpack:///src/app/overlays/private-details-modal/private-details-modal.component.ts","webpack:///src/app/overlays/private-details-modal/private-details-modal.component.html","webpack:///src/app/overlays/recurrence-modal/recurrence-modal.component.ts","webpack:///src/app/overlays/recurrence-modal/recurrence-modal.component.html","webpack:///src/app/overlays/recurrence-spaces-modal/recurrence-spaces-modal.component.ts","webpack:///src/app/overlays/recurrence-spaces-modal/recurrence-spaces-modal.component.html","webpack:///src/app/overlays/requirement-details-modal/requirement-details-modal.component.ts","webpack:///src/app/overlays/requirement-details-modal/requirement-details-modal.component.html","webpack:///src/app/overlays/space-select-modal/space-select-modal.component.ts","webpack:///src/app/overlays/space-select-modal/space-select-modal.component.html","webpack:///src/app/services/app.service.ts","webpack:///src/app/services/data/base-api.class.ts","webpack:///src/app/services/data/base.service.ts","webpack:///src/app/services/data/bookings/booking.class.ts","webpack:///src/app/services/data/bookings/booking.utilities.ts","webpack:///src/app/services/data/bookings/bookings.service.ts","webpack:///src/app/services/data/catering/catering-categories.service.ts","webpack:///src/app/services/data/catering/catering-category.class.ts","webpack:///src/app/services/data/catering/catering-item.class.ts","webpack:///src/app/services/data/catering/catering-items.service.ts","webpack:///src/app/services/data/catering/catering-menu.service.ts","webpack:///src/app/services/data/catering/catering-order.class.ts","webpack:///src/app/services/data/location/location.class.ts","webpack:///src/app/services/data/location/location.service.ts","webpack:///src/app/services/data/location/location.utilities.ts","webpack:///src/app/services/data/organisation/building.class.ts","webpack:///src/app/services/data/organisation/level.class.ts","webpack:///src/app/services/data/organisation/organisation.class.ts","webpack:///src/app/services/data/organisation/organisation.service.ts","webpack:///src/app/services/data/reports/report.class.ts","webpack:///src/app/services/data/reports/reports.service.ts","webpack:///src/app/services/data/spaces/space.class.ts","webpack:///src/app/services/data/spaces/space.utilities.ts","webpack:///src/app/services/data/spaces/spaces.service.ts","webpack:///src/app/services/data/users/user.class.ts","webpack:///src/app/services/data/users/user.utilities.ts","webpack:///src/app/services/data/users/users.service.ts","webpack:///src/app/services/hotkeys.service.ts","webpack:///src/app/services/settings.service.ts","webpack:///src/app/shared/base.class.ts","webpack:///src/app/shared/base.directive.ts","webpack:///src/app/shared/components/action-icon/action-icon.component.ts","webpack:///src/app/shared/components/action-icon/action-icon.component.html","webpack:///src/app/shared/components/custom-fields/action-field/action-field.component.ts","webpack:///src/app/shared/components/custom-fields/action-field/action-field.component.html","webpack:///src/app/shared/components/custom-fields/counter/counter.component.ts","webpack:///src/app/shared/components/custom-fields/counter/counter.component.html","webpack:///src/app/shared/components/custom-fields/date-field/date-field.component.ts","webpack:///src/app/shared/components/custom-fields/date-field/date-field.component.html","webpack:///src/app/shared/components/custom-fields/duration-field/duration-field.component.ts","webpack:///src/app/shared/components/custom-fields/duration-field/duration-field.component.html","webpack:///src/app/shared/components/custom-fields/time-field/time-field.component.ts","webpack:///src/app/shared/components/custom-fields/time-field/time-field.component.html","webpack:///src/app/shared/components/custom-fields/user-list-field/user-list-field.component.ts","webpack:///src/app/shared/components/custom-fields/user-list-field/user-list-field.component.html","webpack:///src/app/shared/components/custom-fields/user-search-field/user-search-field.component.ts","webpack:///src/app/shared/components/custom-fields/user-search-field/user-search-field.component.html","webpack:///src/app/shared/components/feedback/feedback.component.ts","webpack:///src/app/shared/components/feedback/feedback.template.html","webpack:///src/app/shared/components/forms/booking-form/booking-form.component.ts","webpack:///src/app/shared/components/forms/booking-form/booking-form.component.html","webpack:///src/app/shared/components/forms/user-form/user-form.component.ts","webpack:///src/app/shared/components/forms/user-form/user-form.component.html","webpack:///src/app/shared/components/icon/icon.component.ts","webpack:///src/app/shared/components/icon/icon.component.html","webpack:///src/app/shared/components/login/login.component.ts","webpack:///src/app/shared/components/login/login.component.html","webpack:///src/app/shared/components/popout-menu/popout-menu.component.ts","webpack:///src/app/shared/components/popout-menu/popout-menu.component.html","webpack:///src/app/shared/components/searchbar/searchbar.component.ts","webpack:///src/app/shared/components/searchbar/searchbar.component.html","webpack:///src/app/shared/components/sidebar/sidebar.component.ts","webpack:///src/app/shared/components/sidebar/sidebar.component.html","webpack:///src/app/shared/components/topbar-header/topbar-header.component.ts","webpack:///src/app/shared/components/topbar-header/topbar-header.component.html","webpack:///src/app/shared/components/user-avatar/user-avatar.component.ts","webpack:///src/app/shared/components/user-avatar/user-avatar.component.html","webpack:///src/app/shared/directives/cdk-drop-list-scroll-container.directive.ts","webpack:///src/app/shared/globals/angular-animations.ts","webpack:///src/app/shared/globals/application.ts","webpack:///src/app/shared/mocks/api/bookings.mock.ts","webpack:///src/app/shared/mocks/api/buildings.mock.ts","webpack:///src/app/shared/mocks/api/common.mock.ts","webpack:///src/app/shared/mocks/api/locations.mock.ts","webpack:///src/app/shared/mocks/api/organisation.mock.ts","webpack:///src/app/shared/mocks/api/spaces.mock.ts","webpack:///src/app/shared/mocks/api/users.mock.ts","webpack:///src/app/shared/mocks/index.ts","webpack:///src/app/shared/mocks/systems.mock.ts","webpack:///src/app/shared/shared.module.ts","webpack:///src/app/shared/utilities/api.utilities.ts","webpack:///src/app/shared/utilities/formatting.utilities.ts","webpack:///src/app/shared/utilities/general.utilities.ts","webpack:///src/app/shared/utilities/validation.utilities.ts","webpack:///src/app/shell/shell.component.ts","webpack:///src/app/shell/shell.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","children","loadChildren","m","DayViewModule","WeekViewModule","CateringModule","VisitorsModule","ReportsModule","redirectTo","AppRoutingModule","forRoot","useHash","imports","AppComponent","_uploads","_md5_workers","_service","location","href","origin","pathname","localStorage","removeItem","setup","initUploads","subscription","initialised","subscribe","state","timeout","token","Composer","auth","setTimeout","autoStart","endpoint","addProvider","unsub","selector","templateUrl","styleUrls","encapsulation","None","AppModule","window","app_loaded","provide","useValue","register","enabled","production","declarations","providers","bootstrap","BookingConfirmComponent","_dialog","_dialog_ref","_data","event","loading","disableClose","checkSpaceAvailability","booking","save","success","emit","type","notifySuccess","err","notifyError","open","data","close","spaces","changes","date","duration","length","reject","Spaces","available","room_ids","map","space","join","space_list","was_available","name","options","host","organiser","reduce","request","byRequest","title","date_value","duration_value","all_day","end","add","format","isSame","space_ids","find","attendees","filter","i","email","Users","current","body","catering","order","a_space","location_id","level","building","Organisation","buildings","bld","symbol","currency","Object","key","BookingModalComponent","pipe","_","flow_step","only_catering","loadFormData","toNextFlowStep","toPreviousFlowStep","resetForm","form","controls","value","step","metadata","ref","openEquipmentDetailsModal","has_catering","navigate","confirmBooking","order_list","openCateringDetailsModal","route","clearPendingChanges","available_fields","form_data","toJSON","setValue","maxWidth","width","notes_field","notes","codes_field","equipment_codes","head_counts_field","expected_attendees","componentInstance","reason","afterClosed","has_changes","notifyInfo","valid","dialog_ref","maxHeight","setting","BookingCateringComponent","active_order","orders","index","findIndex","an_order","push","splice","startOf","valueOf","CateringMenuCategoryComponent","CateringMenuItemComponent","field","list","item","an_item","setAmount","amount","valueChanges","selectPackageOptions","confirmed_item","notifyWarn","done","items","a_list","animations","BookingCateringOrderDetailsComponent","category_list","available_times","loadMenu","generateAvailableTimes","time","start","initForm","booking_date","delivery_time","Menu","query","room_id","start_date","generateStartAndEndTimes","minute","Math","ceil","isBefore","abs","diff","endOf","building_time","toDate","hour","as_dayjs","toLocalDate","possible_end","isAfter","active_building","within_restricted_time","has_available_items","form_controls","building_id","catering_restricted_from","total","restricted","subtract","category","can_order_anytime","confirmOrder","CateringOrderListItemComponent","edit","unit_price","BookingCateringOrderListComponent","forEach","next","BookingSpaceFiltersComponent","locations","locationsChange","building_list","now","listen","bld_list","is_today","BookingFindSpaceComponent","zone_ids","change$","search_results$","recurrence","recurrence_properties","period","recurr_period","toLowerCase","recurr_end","unix","bookable","onChange","multiple","concat","previous","BookingSpaceItemComponent","select","recurr_available","availability","selected","height","conflicts","recurr","conflict_list","replaces","count","ocurrence","BookingSpaceFlowFormComponent","can_return","markAllAsTouched","container","nativeElement","scrollIntoView","behavior","block","inline","BookingCateringConfirmModalComponent","item_list","CateringDetailsModalComponent","codes","head_counts","needs_charge_code","active_space","note_list","note","message","charge_code","generateFormFields","is_valid","new_notes","author","submit","CONFIRM_METADATA","ConfirmModalComponent","content","action","icon","MeetingCateringDetailsComponent","setItem","JSON","stringify","creator","status","declined","MeetingDetailsDisplayComponent","person","pattern","MeetingDetailsModalComponent","_on_error","setLoading","Bookings","accept","comment","approval_status","decline","booking_id","icaluid","floor","date_string","start_time","deleteMeeting","acceptMeeting","declineMeeting","confirmDeleteMeeting","MeetingPrivateDetailsComponent","breakdown","openPrivateDetailsModal","MeetingDetailsRequirementsComponent","bookingChange","standalone","new_booking","NewUserModalComponent","user","new_user","first_name","last_name","changeEvents","OVERLAYS","SharedOverlaysModule","forChild","checkItemRequirements","must_select","getActiveItems","PackageOptionsModalComponent","a_package","option","needed","active","PrivateDetailsModalComponent","available_durations","Array","fill","storePendingChange","saveChanges","RECURRENCE_METADATA","RecurrenceModalComponent","periods","details","required","RecurrenceSpacesModalComponent","occurrences","space_details","updateOccurrences","occurrence","unshift","replaced_by","RequirementDetailsModalComponent","head_count","equipment_code","search$","SpaceSelectModalComponent","selected_spaces","request_map","types","active_type","update","space_types","ApplicationService","_app_ref","_zone","_title","_router","_cache","_settings","_hotkeys","_composer","_analytics","_organisation","_reports","_users","_bookings","_spaces","_locations","_snackbar","_menu","_catering_items","_catering_categories","_route_trail","_subjects","_observers","parent","set","isStable","run","_stable","log","setupCache","waitForSettings","get","on_action","snackbar_ref","panelClass","afterDismissed","dismiss","onAction","msg","console","debug","notify","error","warn","info","args","stream","force","getValue","asObservable","init","setupComposer","_initialised","application","composer","settings","protocol","domain","hostname","port","url","use_domain","mock","config","scope","auth_uri","token_uri","redirect_uri","handle_login","local_login","isEnabled","hash","activateUpdate","activated","reload","setInterval","checkForUpdate","bindings","app_name","title_suffix","setTitle","getTitle","api_endpoint","is_initialised","has_settings","has_org","providedIn","BASE_MUTABLE_FIELDS","BaseDataClass","raw_data","__type","_changes","_server_names","zone_id","promise","d","task_name","parameters","task","with_changes","obj","_timers","_intervals","_subscriptions","new_key","substr","undefined","_service_map","parse","service","BaseAPIService","_subscribers","_promises","_compare","a","b","_list_filter","_name","_api_route","load","response","engine","engine_endpoint","predicate","query_params","update_list","cache","result","http","process","results","new_item","updateList","post","analyticsEvent","method","post_data","_task","api_route","delay","stopPoll","sub","_poll","show","interval","complete","put","remove_ids","label","Analytics","raw_item","old_list","compareFn","new_list","mixed_list","found","Booking","_display","u_service","subject","Subject","start_epoch","Start","max","end_epoch","End","description","booking_type","visitors","attendee_emails","_attendees","organizer","organiser_email","_organiser","booked_by","creator_email","_location","location_name","Date","getTime","checked_in","checkins","notify_users","_space_list","show_as","u","addFrom","edits","auto_approve","sort","old_date","from_room","display","indexOf","v","external","space_names","MINUTE","HOUR","DAY","WEEK","MONTH","DURATION_MAP","month","months","week","weeks","day","days","hours","minutes","BOOKING_COUNT","BOOKING_DATE","setMockBookingStartDatetime","generateMockBooking","override","random","productName","paragraph","city","getFreeBookingSlots","min_size","slots","bkn_start","bkn_end","getNextFreeBookingSlot","second","generateBookingForm","current_user","use_fields","fields","needs_space","setValidators","disable","isFuture","simplified_fields","subs","hasOwnProperty","space_list_change","organiser_change","unsubscribe","control","rulesForSpace","space_rules_for_user","hide","rules","zones","zone","rule_block","checkRules","conditions","ruleset","max_length","stringToMinutes","min_length","matches","counter","condition","groups","j","last_location","check","match","durationGreaterThanOrEqual","getMinLength","rule_list","values","min","min_block","el","duration_1","duration_2","first","str","parts","split","statusFromBookings","bookings","requestable","free_slots","next_free_slot","slot","currently_free","time_until_next_block","free_tomorrow","free_today","available_until","BookingsService","setService","localeCompare","CateringCategoriesService","CateringCategory","order_anytime","anytime","CateringItem","_amount","instance_id","from_month","available_from","to_month","available_to","prior_notice","notice","price","supplier_cost","minimum_quantity","maximum_quantity","parent_categories","category_ids","categories","image_path","catering_type","out_of_stock","allergy","CateringItemsService","CateringMenuService","CateringOrder","kitchen","pantry","MapLocation","map_id","desk_id","x","normalise","x_max","y","levelWithID","fixed","confidence","at_desk","empty","LocationService","generateMockLocation","overrides","fixed_locations","maps","Building","disc_info","discovery_info","_extras","extras","extra_id","extra_name","_loan_items","loan_items","_levels","levels","_roles","roles","_lockers","lockers","locker_structure","_systems","systems","_phone_numbers","phone_numbers","longitude","latitude","_searchables","neighbourhoods","lvl","lvl_features","feature","level_id","address","booking_details","booking_rules","timezone","holding_bay","visitor_space","_zones","BuildingLevel","bld_id","level_name","lower_name","num","replace","toUpperCase","short_name","map_url","floor_type","OrganisationService","ids","_active_building","getItem","organisation","loadOrganisation","loadBuildings","loadLevels","loadSpaceTypes","tags","org_data","limit","bld_data","lvl_data","type_data","Report","cleanData","room_field","includes","price_field","date_field","row","room","transform","csv_json","ReportsService","fromCSV","OPTION_DEFAULTS","Space","long_name","book_type","can_search","searchable","can_control","controlable","hourly_rate","cost_hour","capacity","occurence","support_url","image","raw_bookings","id_list","_linked_spaces","linked_rooms","linked_spaces","rm","rulesFor","bkn","booking_list","bookingsFor","SPACE_COUNT","generateMockSpace","firstName","lastName","linked","business","availabilityOptionsToQuery","SpacesService","respond","available_spaces","User","_desk_bookings","windows_id","visitor","phone","mobile","business_unit","department","organisation_id","organisation_name","staff_code","fmno","delegates","Locations","officeLocation","desk","l","USER_COUNT","USER_DOMAIN","USER_EMAILS","generateMockUser","companyName","delegate_count","phoneNumber","avatar","generateUserForm","UsersService","uhttp","expiry","client_id","hashStr","sessionStorage","go","headers","append","authorise","logout","tries","locate","loadDelegates","promises","all","INVALID_STANDALONE_KEYS","HotkeysService","keydown_states","keydown_observers","combo_end","registered_combos","addEventListener","mapKey","last_down","preventDefault","combo","combination","validCombination","last_key","updateCombinationEndList","presses","key_list","non_meta","SettingsService","api","local","session","_app_name","built","loadFromFile","loadStore","app","colors","shift","store","file","file_name","BaseClass","clearTimeout","clearInterval","fn","Function","BaseDirective","destroy","ActionIconComponent","ActionFieldComponent","show_tooltip","performAction","CounterComponent","ctrl_key","shift_key","new_value","_onChange","_onTouch","useExisting","multi","remove","DateFieldComponent","_from","position","offset","disabled","_trigger","closeMenu","openMenu","_to","menuOpen","openDatePicker","$event","stopPropagation","closeDatePicker","DurationFieldComponent","duration_options","generateDurationOptions","blocks","TimeFieldComponent","no_past_times","show_select","_time_options","select_field","focus","openedChange","datestamp","show_past","showSelect","UserListFieldComponent","q","slice","search_str","user_list","match_name","match_email","active_list","a_user","target","files","reader","FileReader","readAsText","evt","processCsvData","srcElement","addUser","template","addUsersFromFile","downloadCSVTemplate","UserSearchFieldComponent","active_user","resetSearchString","FeedbackComponent","updateRoute","document","events","current_page","BookingFormComponent","UserFormComponent","IconComponent","LoginComponent","username","password","logo","login","setErrors","PopoutMenuComponent","actions","SearchbarComponent","valueChange","autofocus","focusField","input_field","SidebarComponent","TopbarHeaderComponent","dateChange","trigger","changeDate","resetDate","UserAvatarComponent","ScrollDirection","CdkDropListScrollContainer","_cdkDropList","_renderer","direction","X","last_scroll","scrollContainer","element","closest","toArray","onDrop","onDrag","updateListPosition","scroll","scrollLeft","scrollTop","BOTH","Y","_dropListRef","_cacheOwnPosition","_siblings","isReceiving","ANIMATION_SHOW_ENTER_LEAVE","opacity","ANIMATION_SHOW_CONTRACT_EXPAND","version","core_version","build","handlers","MOCK_BOOKINGS","rooms","callback","from","to","route_params","MOCK_BUILDINGS","emergency","av_help","concierge","desk_tracking","desk_bookings","messaging","features","number","map_features","desks","DOMAIN","API","MOCK_LOCATIONS","lvls","MOCK_ORG","send_acceptance","MOCK_SPACES","space_data","today","MOCK_USERS","MOCK_CONTACTS","PREDEFINED_USERS","LETTERS","NUMBERS","SPACE_LIST","IMAGES","createSystem","booking_bindings","touch_enabled","cancel_timeout","control_url","desk_bindings","system","DeskManagement","DeskBookings","room_name","$start_meeting","last_meeting_started","$cancel_meeting","$waiter_call","$book","$check_in","$check_out","COMPONENTS","DIRECTIVES","ENTRY_COMPONENT","MATERIAL_MODULES","CDK_MODULES","SharedContentModule","toQueryString","formatAttendeesWithHost","formatAttendees","attendee_str","users","formatDate","formatTime","formatPeriodWithDuration","t","formatPeriod","timestamp","formatDuration","RECURRENCE_PERIODS","formatRecurrence","formatSpaces","getItemWithKeys","isMobileDevice","r","navigator","userAgent","isMobileSafari","agent","isAndroidChrome","padZero","toString","unique","array","pos","arr","humaniseDuration","short","h","filterList","filters","f","word","regex","RegExp","match_count","match_index","field_list","matched","changed","tokens","k","matchToHighlight","timeToDate","randomInt","timeFormatString","is24HourTime","localeString","toLocaleTimeString","downloadFile","filename","contents","createElement","setAttribute","encodeURIComponent","style","appendChild","click","removeChild","csvToJson","csv","lines","line","part","jsonToCsv","json","valid_keys","detectIE","ua","msie","parseInt","substring","trident","rv","edge","eventToPoint","MouseEvent","clientX","clientY","touches","flatten","an_array","stack","res","pop","isArray","reverse","HAS_ERROR","validateDate","is_from","buildValidateStartTime","c","validateStartTime","date_obj","buildValidateDuration","validateDuration","buildValidateAttendees","validateAttendees","invalid","validateEndTime","date_control","end_time","ShellWrapperComponent","loading_state","is_logged_in","mod","environment","bootstrapModule"],"mappingsaAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAKA,QAAMC,MAAM,GAAW,CACnB;AACIC,UAAI,EAAE,EADV;AAEIC,eAAS,EAAE,4EAFf;AAGIC,cAAQ,EAAE,CACN;AACIF,YAAI,EAAE,UADV;AAEIG,oBAAY,EAAE;AAAA,iBACV;AAAA;AAAA;AAAA;AAAA,0DAA2CZ,IAA3C,CAAgD,UAAAa,CAAC;AAAA,mBAAIA,CAAC,CAACC,aAAN;AAAA,WAAjD,CADU;AAAA;AAFlB,OADM,EAMN;AACIL,YAAI,EAAE,WADV;AAEIG,oBAAY,EAAE;AAAA,iBACV;AAAA;AAAA;AAAA;AAAA,4DAA6CZ,IAA7C,CAAkD,UAAAa,CAAC;AAAA,mBAAIA,CAAC,CAACE,cAAN;AAAA,WAAnD,CADU;AAAA;AAFlB,OANM,EAWN;AACIN,YAAI,EAAE,UADV;AAEIG,oBAAY,EAAE;AAAA,iBACV;AAAA;AAAA;AAAA;AAAA,0DAA2CZ,IAA3C,CAAgD,UAAAa,CAAC;AAAA,mBAAIA,CAAC,CAACG,cAAN;AAAA,WAAjD,CADU;AAAA;AAFlB,OAXM,EAgBN;AACIP,YAAI,EAAE,UADV;AAEIG,oBAAY,EAAE;AAAA,iBACV;AAAA;AAAA;AAAA;AAAA,0DAA2CZ,IAA3C,CAAgD,UAAAa,CAAC;AAAA,mBAAIA,CAAC,CAACI,cAAN;AAAA,WAAjD,CADU;AAAA;AAFlB,OAhBM,EAqBN;AACIR,YAAI,EAAE,SADV;AAEIG,oBAAY,EAAE;AAAA,iBACV;AAAA;AAAA;AAAA;AAAA,wDAAyCZ,IAAzC,CAA8C,UAAAa,CAAC;AAAA,mBAAIA,CAAC,CAACK,aAAN;AAAA,WAA/C,CADU;AAAA;AAFlB,OArBM,EA0BN;AAAET,YAAI,EAAE,IAAR;AAAcU,kBAAU,EAAE;AAA1B,OA1BM;AAHd,KADmB,EAiCnB;AAAEV,UAAI,EAAE,IAAR;AAAcU,gBAAU,EAAE;AAA1B,KAjCmB,CAAvB;;QAwCaC,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHhB,CAAC,6DAAaC,OAAb,CAAqBb,MAArB,EAA6B;AAAEc,eAAO,EAAE;AAAX,OAA7B,CAAD,CAGgB,EAFf,4DAEe;;;;0HAAhBF,gB,EAAgB;AAAA;AAAA,kBAFf,4DAEe;AAAA,O;AAFH,K;;;;;sEAEbA,gB,EAAgB;cAJ5B,sDAI4B;eAJnB;AACNG,iBAAO,EAAE,CAAC,6DAAaF,OAAb,CAAqBb,MAArB,EAA6B;AAAEc,mBAAO,EAAE;AAAX,WAA7B,CAAD,CADH;AAENhB,iBAAO,EAAE,CAAC,4DAAD;AAFH,S;AAImB,Q;;;;;;;;;;;;;;;;;;AC7C7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAiBakB,Y;;;;;;;AACT,4BACYC,QADZ,EAEYC,YAFZ,EAGYC,QAHZ,EAGwC;AAAA;;AAAA;;AAEpC;AAJQ,cAAAF,QAAA,GAAAA,QAAA;AACA,cAAAC,YAAA,GAAAA,YAAA;AACA,cAAAC,QAAA,GAAAA,QAAA;AAGR;;AACA,YAAI,0FAAc,yFAAa,EAA/B,EAAmC;AAC/BC,kBAAQ,CAACC,IAAT,aAAmBD,QAAQ,CAACE,MAA5B,SAAqCF,QAAQ,CAACG,QAA9C;AACA;AACH;;AACDC,oBAAY,CAACC,UAAb,CAAwB,gBAAxB;;AACA,cAAKP,YAAL,CAAkBQ,KAAlB,CAAwB,sBAAxB;;AACA,cAAKC,WAAL;;AAVoC;AAWvC;;;;sCAEqB;AAAA;;AAClB,eAAKC,YAAL,CACI,UADJ,EAEI,KAAKT,QAAL,CAAcU,WAAd,CAA0BC,SAA1B,CAAoC,UAACC,KAAD,EAAW;AAC3C;AACA,gBAAIA,KAAJ,EAAW;AACP,oBAAI,CAACC,OAAL,CAAa,cAAb,EAA6B,YAAM;AAC/B,oBAAMC,KAAK,GAAG,MAAI,CAACd,QAAL,CAAce,QAAd,CAAuBC,IAAvB,CAA4BF,KAA1C;;AACA,oBAAI,CAACA,KAAL,EAAY;AACR,yBAAOG,UAAU,CAAC;AAAA,2BAAM,MAAI,CAACT,WAAL,EAAN;AAAA,mBAAD,EAA2B,GAA3B,CAAjB;AACH;;AACD,sBAAI,CAACV,QAAL,CAAcgB,KAAd,GAAsBA,KAAtB;AACA,sBAAI,CAAChB,QAAL,CAAcoB,SAAd,GAA0B,IAA1B;AACA,sBAAI,CAACpB,QAAL,CAAcqB,QAAd,GAAyB,oBAAzB;;AACA,uFAAcC,WAAd,CAA0B,+DAA1B;AACH,eATD;;AAUA,oBAAI,CAACC,KAAL,CAAW,UAAX;AACH;AACJ,WAfD,CAFJ;AAmBH;;;;MArC6B,oE;;;uBAArBxB,Y,EAAY,uI,EAAA,oI,EAAA,yI;AAAA,K;;;YAAZA,Y;AAAY,+B;AAAA,0F;AAAA,c;AAAA,a;AAAA,0B;AAAA;AAAA;ACjBzB;;AACI;;AACJ;;;;;;;;;;sEDeaA,Y,EAAY;cAVxB,uDAUwB;eAVd;AACPyB,kBAAQ,EAAE,UADH;AAEPC,qBAAW,EAAE,sBAFN;AAGPC,mBAAS,EAAE,CACP,6BADO,EAEP,qCAFO,EAGP,qCAHO,CAHJ;AAQPC,uBAAa,EAAE,gEAAkBC;AAR1B,S;AAUc,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEjBzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAkDaC,S,GACT,qBAAc;AAAA;;AACVC,YAAM,CAACC,UAAP,GAAoB,IAApB;AACH,K;;;YAHQF,S;AAAS,kBAFN,4DAEM;;;;yBAATA,S;AAAS,O;AAAA,iBALP,CACP;AAAEG,eAAO,EAAE,+EAAX;AAAqCC,gBAAQ,EAAE;AAAC,mBAAO;AAAR;AAA/C,OADO,C;AAEV,gBAdQ,CACL,uEADK,EAEL,4FAFK,EAGL,oEAHK,EAIL,6EAAoBC,QAApB,CAA6B,gBAA7B,EAA+C;AAAEC,eAAO,EAAE,uEAAYC;AAAvB,OAA/C,CAJK,EAKL,qEALK,EAML,0DANK,EAOL,gEAPK,EAQL,wFARK,EASL,+EATK,EAUL,0EAVK,CAcR;;;;0HAGQP,S,EAAS;AAAA,uBApBd,4DAoBc,EAnBd,6EAmBc;AAnBO,kBAGrB,uEAHqB,EAIrB,4FAJqB,EAKrB,oEALqB,EAKL,4EALK,EAOrB,qEAPqB,EAQrB,0DARqB,EASrB,gEATqB,EAUrB,wFAVqB,EAWrB,+EAXqB,EAYrB,0EAZqB;AAmBP,O;AAPK,K;;;;;sEAOdA,S,EAAS;cAtBrB,sDAsBqB;eAtBZ;AACNQ,sBAAY,EAAE,CACV,4DADU,EAEV,6EAFU,CADR;AAKNvC,iBAAO,EAAE,CACL,uEADK,EAEL,4FAFK,EAGL,oEAHK,EAIL,6EAAoBoC,QAApB,CAA6B,gBAA7B,EAA+C;AAAEC,mBAAO,EAAE,uEAAYC;AAAvB,WAA/C,CAJK,EAKL,qEALK,EAML,0DANK,EAOL,gEAPK,EAQL,wFARK,EASL,+EATK,EAUL,0EAVK,CALH;AAiBNE,mBAAS,EAAE,CACP;AAAEN,mBAAO,EAAE,+EAAX;AAAqCC,oBAAQ,EAAE;AAAC,uBAAO;AAAR;AAA/C,WADO,CAjBL;AAoBNM,mBAAS,EAAE,CAAC,4DAAD;AApBL,S;AAsBY,Q;;;;;;;;;;;;;;;;;;;;AClDtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACmBgB;;AAAqC;;AAAU;;;;;;AAC/C;;AAAoD;;AAAU;;;;;;AAElE;;AAAgD;;AAAiC;;;;;;AAGrE;;AAA4B;;AAAC;;;;;;AAI9B;;AAA2B;;AAAC;;;;;;AAIxB;;AAA+B;;AAAC;;;;;;AAKL;;AAA+B;;AAAC;;;;;;AAKlE;;AACI;;AAAkB;;AAAgB;;AACtC;;;;;;AAFmD;;AAC7B;;AAAA;;;;;;AAEtB;;AAA8C;;AAAY;;;;;;;;AAE9D;;AAGI;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AACJ;;;;;;AADI;;AAAA;;;;;;AAKG;;AAAsC;;AAAC;;;;;;AAKL;;AAAgC;;AAAC;;;;;;AAI1E;;AAA8C;;AAAoB;;;;;;AAStD;;AACI;;AAAiE;;AAE/D;;AACN;;;;;;;;AAHO;;AAAA;;AAA8D;;AAAA;;;;;;AAR7E;;AAKI;;AACI;;AAAkB;;AAAe;;AACjC;;AAKJ;;AACJ;;;;;;AAVI;;AAGsB;;AAAA;;AACC;;AAAA;;;;;;;;AAQ/B;;AAGI;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AACJ;;;;;;AADI;;AAAA;;;;;;AAKI;;AAA2B;;AAAC;;;;;;AAKU;;AAA+B;;AAAC;;;;;;AAK1E;;AACI;;AACI;;AAAkB;;AAAyC;;AAC3D;;AACI;;;;AAEJ;;AACJ;;AACJ;;;;;;AAN0B;;AAAA;;AAEd;;AAAA;;;;;;;;AAMhB;;AAGI;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AACJ;;;;;;AADI;;AAAA;;;;;;AAIZ;;AACI;;AACJ;;;;;;;;;;;;;;AA7HR;;AACI;;AACI;;AACI;;AAGJ;;AACA;;AACI;;AASA;;AACI;;AACA;;AACA;;AACJ;;AACA;;AACJ;;AACA;;AACI;;AAAO;;AAAK;;AAAoC;;AAAC;;AACjD;;AAAmB;;AAAyB;;AAChD;;AACA;;AACI;;AAAO;;AAAI;;AAAmC;;AAAC;;AAC/C;;AAAmB;;AAAU;;AACjC;;AACA;;AACI;;AAAO;;AAAQ;;AAAuC;;AAAC;;AACvD;;AAAmB;;AAAc;;AACrC;;AACA;;AACI;;AACK;;AAAqC;;AACrC;;AAAC;;AAEN;;AACI;;AACI;;AAGA;;AACJ;;AACA;;AAOJ;;AACJ;;AACA;;AACI;;AAAO;;AAAI;;AAA8C;;AAAC;;AAC1D;;AAAmB;;AAAyC;;AAChE;;AACA;;AACI;;AACK;;AAAwC;;AACxC;;AAAC;;AAEN;;AACI;;AACA;;AACI;;AAcJ;;AACA;;AAOJ;;AACJ;;AACA;;AACI;;AAAO;;AAAK;;AAAmC;;AAAC;;AAChD;;AACJ;;AACA;;AACI;;AACK;;AAA6C;;AAC7C;;AAAC;;AAEN;;AACI;;AACI;;AASJ;;AACA;;AAOJ;;AACJ;;AACA;;AAGJ;;AACJ;;;;;;AA3HgB;;AAAA;;AAKA;;AAAA;;AAUM;;AAAA;;AACgB;;AAAA;;AAER;;AAAA;;AAGA;;AAAA;;AACC;;AAAA;;AAGF;;AAAA;;AACE;;AAAA;;AAGE;;AAAA;;AACF;;AAAA;;AAId;;AAAA;;AAA2C;;AAAA;;AAI1B;;AAAA;;AACS;;AAAA;;AAGA;;AAAA;;AAIvB;;AAAA;;AAQS;;AAAA;;AACE;;AAAA;;AAId;;AAAA;;AAA8C;;AAAA;;AAIzC;;AAAA;;AACY;;AAAA;;AAGV;;AAAA;;AAeJ;;AAAA;;AAQU;;AAAA;;AACC;;AAAA;;AAId;;AAAA;;AAAmD;;AAAA;;AAIlC;;AAAA;;AACS;;AAAA;;AAYvB;;AAAA;;AAOM;;AAAA;;;;;;;;AAOlB;;AACI;;AAAoD;;AAAI;;AACxD;;AAAmB;AAAA;;AAAA;;AAAA;AAAA;;AAAyB;;AAAI;;AACpD;;;;;;AALR;;AACI;;AACI;;AAIJ;;AACJ;;;;;;;;AALsB;;AAAA,0FAAsC,UAAtC,EAAsC,GAAtC;;;;;;AAOlB;;AACI;;AACI;;AACI;;AACJ;;AACA;;AACI;;AACJ;;AACJ;;AACJ;;;;;;AAHY;;AAAA;;;;;;;;AAMZ;;AAA8C;AAAA;;AAAA;;AAAA;AAAA;;AAAwB;;AAAW;;AACjF;;AAAoC;;AAAK;;;;QDlIhCC,uB;;;;;;;AAkHT,uCACYtC,QADZ,EAEYuC,OAFZ,EAGYC,WAHZ,EAIqCC,KAJrC,EAIgE;AAAA;;AAAA;;AAE5D;AALQ,eAAAzC,QAAA,GAAAA,QAAA;AACA,eAAAuC,OAAA,GAAAA,OAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACyB,eAAAC,KAAA,GAAAA,KAAA;AArHrC;;AACiB,eAAAC,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AAoH+C;AAG/D;AAzGD;;;;;;AA2GA;;;sCAGqB;AAAA;;AACjB,eAAKC,OAAL,GAAe,0CAAf;AACA,eAAKH,WAAL,CAAiBI,YAAjB,GAAgC,IAAhC;AACA,eAAKC,sBAAL,GAA8BxE,IAA9B,CACI,YAAM;AACF,kBAAI,CAACsE,OAAL,GAAe,+BAAf;;AACA,kBAAI,CAACG,OAAL,CAAaC,IAAb,GAAoB1E,IAApB,CACI,YAAM;AACF,oBAAI,CAACsE,OAAL,GAAe,IAAf;AACA,oBAAI,CAACK,OAAL,GAAe,IAAf;AACA,oBAAI,CAACR,WAAL,CAAiBI,YAAjB,GAAgC,KAAhC;;AACA,oBAAI,CAACF,KAAL,CAAWO,IAAX,CAAgB;AAAEC,oBAAI,EAAE;AAAR,eAAhB;;AACA,oBAAI,CAAClD,QAAL,CAAcmD,aAAd,wBACoB,MAAI,CAACL,OAAL,CAAalE,EAAb,GAAkB,SAAlB,GAA8B,SADlD;AAGH,aATL,EAUI,UAAAwE,GAAG,EAAI;AACH,oBAAI,CAACT,OAAL,GAAe,IAAf;AACA,oBAAI,CAACH,WAAL,CAAiBI,YAAjB,GAAgC,KAAhC;;AACA,oBAAI,CAAC5C,QAAL,CAAcqD,WAAd,iBACa,MAAI,CAACP,OAAL,CAAalE,EAAb,GAAkB,UAAlB,GAA+B,UAD5C,uBACmEwE,GADnE;AAGH,aAhBL;AAkBH,WArBL,EAsBI,UAAAA,GAAG,EAAI;AACH,kBAAI,CAACT,OAAL,GAAe,IAAf;AACA,kBAAI,CAACH,WAAL,CAAiBI,YAAjB,GAAgC,KAAhC;;AACA,kBAAI,CAAC5C,QAAL,CAAcqD,WAAd,8CAAgED,GAAhE;AACH,WA1BL;AA4BH;;;qCAEmB;AAChB,eAAKb,OAAL,CAAae,IAAb,CAAkB,4FAAlB,EAAyC;AACrCC,gBAAI,EAAE;AACFT,qBAAO,EAAE,IAAI,oFAAJ,CAAY,EAAZ;AADP;AAD+B,WAAzC;;AAKA,eAAKN,WAAL,CAAiBgB,KAAjB;AACH;AAED;;;;;;iDAG6B;AAAA;;AACzB,cAAMC,MAAM,GAAY,KAAKA,MAA7B;;AACA,cACK,KAAKX,OAAL,CAAalE,EAAb,IAAmB,CAAC,KAAK8E,OAAL,CAAaC,IAAjC,IAAyC,CAAC,KAAKD,OAAL,CAAaE,QAAxD,IACCH,MAAM,IAAIA,MAAM,CAACI,MAAP,IAAiB,CAFhC,EAGE;AACE,mBAAO1F,OAAO,CAACC,OAAR,EAAP;AACH;;AACD,iBAAO,IAAID,OAAJ,CAAY,UAACC,OAAD,EAAU0F,MAAV,EAAqB;AACpC,kBAAI,CAAC9D,QAAL,CAAc+D,MAAd,CAAqBC,SAArB,CAA+B;AAC3BC,sBAAQ,EAAER,MAAM,CAACS,GAAP,CAAW,UAAAC,KAAK;AAAA,uBAAIA,KAAK,CAACvF,EAAV;AAAA,eAAhB,EAA8BwF,IAA9B,CAAmC,GAAnC,CADiB;AAE3BT,kBAAI,EAAE,MAAI,CAACb,OAAL,CAAaY,OAAb,CAAqBC,IAArB,IAA6B,MAAI,CAACb,OAAL,CAAaa,IAFrB;AAG3BC,sBAAQ,EAAE,MAAI,CAACd,OAAL,CAAaY,OAAb,CAAqBE,QAArB,IAAiC,MAAI,CAACd,OAAL,CAAac;AAH7B,aAA/B,EAIGvF,IAJH,CAKI,UAAAgG,UAAU,EAAI;AAAA,yDACUA,UADV;AAAA;;AAAA;AACV,oEAAgC;AAAA,sBAArBF,KAAqB;;AAC5B,sBAAI,CAACA,KAAK,CAACG,aAAX,EAA0B;AACtB,2BAAOR,MAAM,WACNK,KAAK,CAACI,IADA,kDAAb;AAGH;AACJ;AAPS;AAAA;AAAA;AAAA;AAAA;;AAQVnG,qBAAO;AACV,aAdL,EAeI,UAAAgF,GAAG;AAAA,qBAAIU,MAAM,CAACV,GAAD,CAAV;AAAA,aAfP;AAiBH,WAlBM,CAAP;AAmBH;;;4BArLoB;AACjB,cAAMoB,OAAO,GAAG;AACZb,gBAAI,EAAE,KAAKb,OAAL,CAAaY,OAAb,CAAqBC,IAArB,IAA6B,KAAKb,OAAL,CAAaa,IADpC;AAEZC,oBAAQ,EAAE,KAAKd,OAAL,CAAaY,OAAb,CAAqBE,QAArB,IAAiC,KAAKd,OAAL,CAAac,QAF5C;AAGZa,gBAAI,EAAE,KAAKC;AAHC,WAAhB;AAKA,iBAAO,KAAKjB,MAAL,CAAYkB,MAAZ,CAAmB,UAACC,OAAD,EAAUT,KAAV;AAAA,mBAAoBS,OAAO,IAAIT,KAAK,CAACU,SAAN,CAAgBL,OAAhB,CAA/B;AAAA,WAAnB,EAA4E,KAA5E,CAAP;AACH;AAED;;;;4BACkB;AACd,iBAAO,KAAK/B,KAAL,CAAWK,OAAlB;AACH;AAED;;;;4BACgB;AACZ,iBAAO,KAAKA,OAAL,CAAaY,OAAb,CAAqBoB,KAArB,IAA8B,KAAKhC,OAAL,CAAagC,KAAlD;AACH;AAED;;;;4BACe;AACX,cAAMC,UAAU,GAAG,KAAKjC,OAAL,CAAaY,OAAb,CAAqBC,IAArB,IAA6B,KAAKb,OAAL,CAAaa,IAA7D;AACA,cAAMqB,cAAc,GAAG,KAAKlC,OAAL,CAAaY,OAAb,CAAqBE,QAArB,IAAiC,KAAKd,OAAL,CAAac,QAArE;AACA,cAAMqB,OAAO,GAAG,KAAKnC,OAAL,CAAaY,OAAb,CAAqBuB,OAArB,IAAgC,KAAKnC,OAAL,CAAamC,OAA7D;AACA,cAAMtB,IAAI,GAAG,kCAAK,CAACoB,UAAD,CAAlB;AACA,cAAMG,GAAG,GAAGvB,IAAI,CAACwB,GAAL,CAASH,cAAT,EAAyB,GAAzB,CAAZ;;AACA,cAAIC,OAAO,IAAID,cAAc,GAAG,KAAK,EAArC,EAAyC;AACrC,6BAAUrB,IAAI,CAACyB,MAAL,CAAY,aAAZ,CAAV;AACH,WAFD,MAEO;AACH,gBAAIzB,IAAI,CAAC0B,MAAL,CAAYH,GAAZ,EAAiB,GAAjB,CAAJ,EAA2B;AACvB,+BAAUvB,IAAI,CAACyB,MAAL,CAAY,qBAAZ,CAAV,gBAAkDF,GAAG,CAACE,MAAJ,CAAW,QAAX,CAAlD;AACH,aAFD,MAEO;AACH,+BAAUzB,IAAI,CAACyB,MAAL,CAAY,qBAAZ,CAAV,gBAAkDF,GAAG,CAACE,MAAJ,CAC9C,qBAD8C,CAAlD;AAGH;AACJ;AACJ;AAED;;;;4BACmB;AACf,cAAMJ,cAAc,GAAG,KAAKlC,OAAL,CAAaY,OAAb,CAAqBE,QAArB,IAAiC,KAAKd,OAAL,CAAac,QAArE;AACA,iBAAO,oGAAiBoB,cAAjB,CAAP;AACH;AAED;;;;4BACiB;AAAA;;AACb,cAAMvB,MAAM,GACR,KAAKX,OAAL,CAAaY,OAAb,CAAqB4B,SAArB,IACA,KAAKxC,OAAL,CAAawC,SAFjB;AAGA,iBAAO7B,MAAM,CAACS,GAAP,CAAW,UAAAtF,EAAE;AAAA,mBAAI,MAAI,CAACoB,QAAL,CAAc+D,MAAd,CAAqBwB,IAArB,CAA0B3G,EAA1B,CAAJ;AAAA,WAAb,CAAP;AACH;AAED;;;;4BACoB;AAAA;;AAChB,cAAM4G,SAAS,GAAG,KAAK1C,OAAL,CAAaY,OAAb,CAAqB8B,SAArB,IAAkC,KAAK1C,OAAL,CAAa0C,SAAjE;AACA,iBAAOA,SAAS,CAACC,MAAV,CAAiB,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,KAAF,KAAY,MAAI,CAACjB,SAAL,CAAeiB,KAA/B;AAAA,WAAlB,CAAP;AACH;AAED;;;;4BACoB;AAChB,iBACI,KAAK7C,OAAL,CAAaY,OAAb,CAAqBgB,SAArB,IAAkC,KAAK5B,OAAL,CAAa4B,SAA/C,IAA4D,KAAK1E,QAAL,CAAc4F,KAAd,CAAoBC,OADpF;AAGH;AAED;;;;4BACgB;AACZ,iBAAO,KAAK/C,OAAL,CAAaY,OAAb,CAAqBoC,IAArB,IAA6B,KAAKhD,OAAL,CAAagD,IAAjD;AACH;AAED;;;;4BACmB;AAAA;;AACf,iBAAO,CAAC,KAAKhD,OAAL,CAAaY,OAAb,CAAqBqC,QAArB,IAAiC,KAAKjD,OAAL,CAAaiD,QAA9C,IAA0D,EAA3D,EAA+D7B,GAA/D,CAAmE,UAAA8B,KAAK,EAAI;AAC/E,gBAAM7B,KAAK,GAAQ,MAAI,CAACV,MAAL,CAAY8B,IAAZ,CAAiB,UAAAU,OAAO;AAAA,qBAAIA,OAAO,CAACrH,EAAR,KAAeoH,KAAK,CAACE,WAAzB;AAAA,aAAxB,KAAiE;AAChFC,mBAAK,EAAE;AADyE,aAApF;AAGA,gBAAMC,QAAQ,GACV,MAAI,CAACpG,QAAL,CAAcqG,YAAd,CAA2BC,SAA3B,CAAqCf,IAArC,CAA0C,UAAAgB,GAAG;AAAA,qBAAIA,GAAG,CAAC3H,EAAJ,KAAWuF,KAAK,CAACgC,KAAN,CAAYvH,EAA3B;AAAA,aAA7C,KAA+E,EADnF;AAEA,mBAAO,IAAI,iGAAJ,CAAkB,MAAD,OAAC,CAAD,kBAAMoH,KAAN,CAAC,EAAU;AAAE/F,sBAAQ,EAAEkE,KAAK,CAACI,IAAlB;AAAwBiC,oBAAM,EAAEJ,QAAQ,CAACK;AAAzC,aAAV,CAAlB,CAAP;AACH,WAPM,CAAP;AAQH;AAED;;;;4BACkB;AAAA;;AACd,cAAI,CAAC,KAAK3D,OAAL,CAAalE,EAAlB,EAAsB;AAClB,mBAAO,EAAP;AACH;;AACD,cAAM8E,OAAO,GAAG,KAAKZ,OAAL,CAAaY,OAA7B;AACA,iBAAOgD,MAAM,CAACjI,IAAP,CAAYiF,OAAZ,EAAqBiB,MAArB,CAA4B,UAACT,GAAD,EAAMyC,GAAN,EAAc;AAC7C,gBAAIjD,OAAO,CAACiD,GAAD,CAAX,EAAkB;AACdzC,iBAAG,CAACyC,GAAD,CAAH,GAAWjD,OAAO,CAACiD,GAAD,CAAP,KAAiB,MAAI,CAAC7D,OAAL,CAAa6D,GAAb,CAA5B;AACH;;AACD,mBAAOzC,GAAP;AACH,WALM,EAKJ,EALI,CAAP;AAMH;;;;MAhHwC,2E;;;uBAAhC5B,uB,EAAuB,gJ,EAAA,mI,EAAA,sI,EAAA,gEAsHpB,wEAtHoB,C;AAsHL,K;;;YAtHlBA,uB;AAAuB,8C;AAAA;AAAA;AAAA,O;AAAA,0F;AAAA,c;AAAA,a;AAAA,ktC;AAAA;AAAA;ACpBpC;;AAgIA;;AAQA;;AAYA;;;;;;AApJoB,yFAAiC,UAAjC,EAAiC,GAAjC;;AAgIA;;AAAA;;;;;;;;;;sED5GPA,uB,EAAuB;cALnC,uDAKmC;eALzB;AACPhB,kBAAQ,EAAE,yBADH;AAEPC,qBAAW,EAAE,kCAFN;AAGPC,mBAAS,EAAE,CAAC,kCAAD;AAHJ,S;AAKyB,Q;;;;;;;;;;kBAsH3B,oD;mBAAO,wE;;;;;gBApHX;;;;;;;;;;;;;;;;;;;;AEtBL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACUgB;;AAII;AAAA;;AAAA;;AAAA;AAAA;;AACH;;;;;;AAHG,4GAAmC,MAAnC,EAAmC,WAAnC;;;;;;AAHR;;AACI;;AAMJ;;;;;;AALQ;;AAAA;;;;;;;;AAOJ;;AAII;AAAA;;AAAA;;AAAA;AAAA;;AACH;;;;;;AAHG,sFAAa,MAAb,EAAa,oBAAb;;;;;;AAHR;;AACI;;AAMJ;;;;;;AALQ;;AAAA;;;;;;;;AAOJ;;AAGI;AAAA;;AAAA;;AAAA;AAAA;;AACH;;;;;;AAFG;;;;;;AAHR;;AACI;;AAKJ;;;;;;AAJQ;;AAAA;;;;;;;;;;;QDWPoF,qB;;;;;;;AAkBT,qCACY5G,QADZ,EAEYuC,OAFZ,EAGYC,WAHZ,EAIqCC,KAJrC,EAI4D;AAAA;;AAAA;;AAExD;AALQ,gBAAAzC,QAAA,GAAAA,QAAA;AACA,gBAAAuC,OAAA,GAAAA,OAAA;AACA,gBAAAC,WAAA,GAAAA,WAAA;AACyB,gBAAAC,KAAA,GAAAA,KAAA;AAAuB;AAG3D;AAjBD;;;;;mCAmBe;AAAA;;AACX,eAAKD,WAAL,CAAiBI,YAAjB,GAAgC,IAAhC;;AACA,eAAK5C,QAAL,CAAcU,WAAd,CAA0BmG,IAA1B,CAA+B,6DAAM,UAAAC,CAAC;AAAA,mBAAIA,CAAJ;AAAA,WAAP,CAA/B,EAA8CnG,SAA9C,CAAwD,YAAM;AAC1D,mBAAI,CAACoG,SAAL,GAAiB,OAAI,CAACtE,KAAL,CAAWuE,aAAX,GAA2B,UAA3B,GAAwC,MAAzD;;AACA,mBAAI,CAAChH,QAAL,CAAc+D,MAAd,CAAqBrD,WAArB,CAAiCmG,IAAjC,CAAsC,6DAAM,UAAAC,CAAC;AAAA,qBAAIA,CAAJ;AAAA,aAAP,CAAtC,EAAqDnG,SAArD,CAA+D,YAAM;AACjE,qBAAI,CAACsG,YAAL;AACH,aAFD;AAGH,WALD;AAMH;AAED;;;;;;;wCAIuBvE,K,EAAyB;AAC5C;AACA,cAAIA,KAAK,CAACQ,IAAN,KAAe,MAAnB,EAA2B;AACvB,iBAAKgE,cAAL,CAAoBxE,KAApB;AACH,WAFD,MAEO,IAAIA,KAAK,CAACQ,IAAN,KAAe,UAAnB,EAA+B;AAClC,iBAAKiE,kBAAL,CAAwBzE,KAAxB;AACH,WAFM,MAEA,IAAIA,KAAK,CAACQ,IAAN,KAAe,OAAnB,EAA4B;AAC/B,iBAAKkE,SAAL;AACH;AACJ;;;gCAEc;AACX,eAAK5E,WAAL,CAAiBgB,KAAjB;AACH;;;uCAEsBd,K,EAAyB;AAC5C,cAAM2B,UAAU,GAAG,KAAKgD,IAAL,CAAUC,QAAV,CAAmBjD,UAAnB,CAA8BkD,KAAjD;;AACA,kBAAQ7E,KAAK,CAAC8E,IAAd;AACI,iBAAK,QAAL;AACI,kBACInD,UAAU,IACVA,UAAU,CAACR,MADX,KAEC,CAACnB,KAAK,CAAC+E,QAAP,IAAmB,CAAC/E,KAAK,CAAC+E,QAAN,CAAeC,GAAnC,IAA0ChF,KAAK,CAAC+E,QAAN,CAAeC,GAAf,KAAuB,WAFlE,CADJ,EAIE;AACE,qBAAKC,yBAAL;AACH,eAND,MAMO;AACH,oBAAI,KAAKN,IAAL,CAAUC,QAAV,CAAmBM,YAAnB,IAAmC,KAAKP,IAAL,CAAUC,QAAV,CAAmBM,YAAnB,CAAgCL,KAAvE,EAA8E;AAC1E,uBAAKM,QAAL,CAAc,UAAd;AACH,iBAFD,MAEO;AACH,uBAAKA,QAAL,CAAc,MAAd;AACA,uBAAKC,cAAL;AACH;AACJ;;AACD;;AACJ,iBAAK,UAAL;AACI,kBAAMC,UAAU,GAAG,KAAKV,IAAL,CAAUC,QAAV,CAAmBvB,QAAnB,CAA4BwB,KAA/C;;AACA,kBACIQ,UAAU,IACVA,UAAU,CAAClE,MADX,KAEC,CAACnB,KAAK,CAAC+E,QAAP,IAAmB,CAAC/E,KAAK,CAAC+E,QAAN,CAAeC,GAAnC,IAA0ChF,KAAK,CAAC+E,QAAN,CAAeC,GAAf,KAAuB,SAFlE,CADJ,EAIE;AACE,qBAAKM,wBAAL;AACH,eAND,MAMO;AACH,qBAAKH,QAAL,CAAc,MAAd;AACA,qBAAKC,cAAL;AACH;;AACD;;AACJ,iBAAK,MAAL;AACI,mBAAKD,QAAL,CAAc,QAAd;AACA;AAhCR;AAkCH;;;2CAE0BnF,K,EAAyB;AAChD,kBAAQA,KAAK,CAAC8E,IAAd;AACI,iBAAK,QAAL;AACI,mBAAKK,QAAL,CAAc,MAAd;AACA;;AACJ,iBAAK,UAAL;AACI;AACA,kBAAI,CAAC,KAAKpF,KAAL,CAAWuE,aAAhB,EAA+B;AAC3B,qBAAKa,QAAL,CAAc,QAAd;AACH;;AACD;AATR;AAWH;;;iCAEgBI,K,EAAe;AAC5B,eAAKlB,SAAL,GAAiBkB,KAAjB;AACH;AAED;;;;oCACoB;AAChB,eAAKnF,OAAL,CAAaoF,mBAAb;AACA,iBAAO,KAAKb,IAAZ;AACA,eAAKA,IAAL,GAAY,6GACR,KAAKvE,OADG,EAER,KAAK9C,QAAL,CAAc4F,KAAd,CAAoBC,OAFZ,EAGR,KAAKsC,gBAHG,CAAZ;AAKH;AAED;;;;;;uCAGoB;AAAA;;AAChB,cAAIC,SAAS,GAAY,KAAK3F,KAAL,CAAWK,OAAX,CAAmBuF,MAAnB,EAAzB;;AACA,eAAKvF,OAAL,GAAe,IAAI,oFAAJ,CAAYsF,SAAZ,CAAf;AACA,eAAKf,IAAL,GAAY,6GACR,KAAKvE,OADG,EAER,KAAK9C,QAAL,CAAc4F,KAAd,CAAoBC,OAFZ,EAGR,KAAKsC,gBAHG,CAAZ;AAKA;;AACA,cAAIC,SAAS,IAAIA,SAAS,CAACnE,QAAvB,IAAmC,KAAKoD,IAAL,CAAUC,QAAV,CAAmBjD,UAA1D,EAAsE;AAClE,iBAAKgD,IAAL,CAAUC,QAAV,CAAmBjD,UAAnB,CAA8BiE,QAA9B,CACIF,SAAS,CAACnE,QAAV,CAAmBC,GAAnB,CAAuB,UAAAtF,EAAE;AAAA,qBAAI,OAAI,CAACoB,QAAL,CAAc+D,MAAd,CAAqBwB,IAArB,CAA0B3G,EAA1B,KAAiC;AAAEA,kBAAE,EAAFA,EAAF;AAAM2F,oBAAI,EAAE3F;AAAZ,eAArC;AAAA,aAAzB,CADJ;AAGH;AACJ;AAED;;;;oDACoC;AAAA;;AAChC,cAAM8I,GAAG,GAAG,KAAKnF,OAAL,CAAae,IAAb,CAGV,+HAHU,EAGwB;AAChCiF,oBAAQ,EAAE,MADsB;AAEhCC,iBAAK,EAAE,MAFyB;AAGhCjF,gBAAI,EAAE;AACFE,oBAAM,EAAE,KAAK4D,IAAL,CAAUC,QAAV,CAAmBjD,UAAnB,CAA8BkD,KADpC;AAEFkB,yBAAW,EAAE,KAAKpB,IAAL,CAAUC,QAAV,CAAmBoB,KAF9B;AAGFC,yBAAW,EAAE,KAAKtB,IAAL,CAAUC,QAAV,CAAmBsB,eAH9B;AAIFC,+BAAiB,EAAE,KAAKxB,IAAL,CAAUC,QAAV,CAAmBwB;AAJpC;AAH0B,WAHxB,CAAZ;;AAaA,eAAKrI,YAAL,CACI,cADJ,EAEIiH,GAAG,CAACqB,iBAAJ,CAAsBrG,KAAtB,CAA4B/B,SAA5B,CAAsC,UAAC+B,KAAD,EAAwB;AAC1D;AACA,gBAAIA,KAAK,CAACsG,MAAN,KAAiB,MAArB,EAA6B;AACzB,qBAAI,CAAC9B,cAAL,CAAoB;AAChBhE,oBAAI,EAAE,MADU;AAEhBsE,oBAAI,EAAE,QAFU;AAGhBC,wBAAQ,EAAE;AAAEC,qBAAG,EAAE;AAAP;AAHM,eAApB;;AAKAA,iBAAG,CAAClE,KAAJ;AACH;AACJ,WAVD,CAFJ;AAcAkE,aAAG,CAACuB,WAAJ,GAAkBtI,SAAlB,CAA4B;AAAA,mBAAM,OAAI,CAACU,KAAL,CAAW,cAAX,CAAN;AAAA,WAA5B;AACH;AAED;;;;mDACmC;AAAA;;AAC/B,cAAMqG,GAAG,GAAG,KAAKnF,OAAL,CAAae,IAAb,CACR,sHADQ,EAER;AACIiF,oBAAQ,EAAE,MADd;AAEIC,iBAAK,EAAE,MAFX;AAGIjF,gBAAI,EAAE;AACFE,oBAAM,EAAE,KAAK4D,IAAL,CAAUC,QAAV,CAAmBjD,UAAnB,CAA8BkD,KADpC;AAEFkB,yBAAW,EAAE,KAAKpB,IAAL,CAAUC,QAAV,CAAmBoB,KAF9B;AAGF3C,sBAAQ,EAAE,KAAKsB,IAAL,CAAUC,QAAV,CAAmBvB;AAH3B;AAHV,WAFQ,CAAZ;;AAYA,eAAKtF,YAAL,CACI,cADJ,EAEIiH,GAAG,CAACqB,iBAAJ,CAAsBrG,KAAtB,CAA4B/B,SAA5B,CAAsC,UAAC+B,KAAD,EAAwB;AAC1D;AACA,gBAAIA,KAAK,CAACsG,MAAN,KAAiB,MAArB,EAA6B;AACzB,qBAAI,CAAC9B,cAAL,CAAoB;AAChBhE,oBAAI,EAAE,MADU;AAEhBsE,oBAAI,EAAE,UAFU;AAGhBC,wBAAQ,EAAE;AAAEC,qBAAG,EAAE;AAAP;AAHM,eAApB;;AAKAA,iBAAG,CAAClE,KAAJ;AACH;AACJ,WAVD,CAFJ;AAcAkE,aAAG,CAACuB,WAAJ,GAAkBtI,SAAlB,CAA4B;AAAA,mBAAM,OAAI,CAACU,KAAL,CAAW,cAAX,CAAN;AAAA,WAA5B;AACH;AAED;;;;;;yCAGyB;AAAA;;AACrB;AACA,cAAI,CAAC,KAAKyB,OAAL,CAAaoG,WAAlB,EAA+B;AAC3B,iBAAKlJ,QAAL,CAAcmJ,UAAd,CAAyB,sCAAzB;;AACA;AACH;AACD;;;AACA,cAAI,KAAK9B,IAAL,CAAU+B,KAAd,EAAqB;AACjB,gBAAMC,UAAU,GAAG,KAAK9G,OAAL,CAAae,IAAb,CAAkB,kGAAlB,EAA2C;AAC1DkF,mBAAK,EAAE,MADmD;AAE1DD,sBAAQ,EAAE,MAFgD;AAG1De,uBAAS,EAAE,MAH+C;AAI1D/F,kBAAI,EAAE;AAAET,uBAAO,EAAE,KAAKA;AAAhB;AAJoD,aAA3C,CAAnB;;AAMAuG,sBAAU,CAACN,iBAAX,CAA6BrG,KAA7B,CAAmC/B,SAAnC,CAA6C,UAAA+B,KAAK,EAAI;AAClD;AACA,kBAAIA,KAAK,CAACsG,MAAN,KAAiB,MAArB,EAA6B;AACzB,uBAAI,CAACxF,KAAL;AACH;AACJ,aALD;AAMH;AACJ;;;4BA5NuB;AACpB,iBAAO,CAAC,CAAC,KAAKf,KAAL,CAAWuE,aAApB;AACH;AAED;;;;4BAC2B;AACvB,iBAAO,KAAKhH,QAAL,CAAcuJ,OAAd,CAAsB,yBAAtB,KAAoD,EAA3D;AACH;;;;MAhBsC,2E;;;uBAA9B3C,qB,EAAqB,gJ,EAAA,mI,EAAA,sI,EAAA,gEAsBlB,wEAtBkB,C;AAsBH,K;;;YAtBlBA,qB;AAAqB,sC;AAAA,0F;AAAA,e;AAAA,a;AAAA,gX;AAAA;AAAA;ACtClC;;AACI;;AAAqB;;AAA0C;;AAC/D;;AAAyC;AAAA,mBAAU,IAAApD,KAAA,EAAV;AAAiB,WAAjB;;AACrC;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AAQA;;AAQA;;AAOJ;;AACJ;;AACJ;;;;AAjCyB;;AAAA;;AAEP;;AAAA;;AAKI;;AAAA;;AACI;;AAAA;;AAQA;;AAAA;;;;;;;;sEDqBboD,qB,EAAqB;cALjC,uDAKiC;eALvB;AACPtF,kBAAQ,EAAE,iBADH;AAEPC,qBAAW,EAAE,gCAFN;AAGPC,mBAAS,EAAE,CAAC,gCAAD;AAHJ,S;AAKuB,Q;;;;;;;;;;kBAsBzB,oD;mBAAO,wE;;;;;;;;;;;;;;;;;;;;;AE5DhB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACCI;;AACI;;AAKI;AAAA;;AAAA;;AAAA;AAAA,WAAuD,OAAvD,EAAuD;AAAA;;AAAA;;AAAA,iBAC9C,OAAAkB,KAAA,aAD8C;AAC5B,SAD3B;;AAEH;;AACL;;;;;;AAPQ;;AAAA,oGAA2B,MAA3B,EAA2B,WAA3B,EAA2B,SAA3B,EAA2B,cAA3B,EAA2B,eAA3B,EAA2B,WAA3B;;;;;;;;AAUR;;AAMI;AAAA;;AAAA;;AAAA,kFAA4D,IAA5D;AAAgE,SAAhE;;AACH;;;;;;AANG,kGAAyB,OAAzB,EAAyB,mBAAzB,EAAyB,MAAzB,EAAyB,WAAzB,EAAyB,UAAzB,EAAyB,eAAzB,EAAyB,SAAzB,EAAyB,cAAzB;;;;QDAK8G,wB;;;AALb;AAAA;;AAUI;AACiB,aAAA9G,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AAsDpB;AAlDG;;;;;;AA6BA;mCACe;AACX,cAAMsD,KAAK,GAAG,IAAI,iGAAJ,CAAkB,EAAlB,CAAd;AACA,eAAKyD,YAAL,GAAoBzD,KAApB;AACH;AAED;;;;yCACwBA,K,EAAsB;AAC1C;AACA,cAAIA,KAAJ,EAAW;AACP,gBAAM0D,MAAM,GAAG,KAAKrC,IAAL,CAAUC,QAAV,CAAmBvB,QAAnB,CAA4BwB,KAA3C;AACA,gBAAMoC,KAAK,GAAGD,MAAM,CAACE,SAAP,CAAiB,UAACC,QAAD;AAAA,qBAAc7D,KAAK,CAACpH,EAAN,KAAaiL,QAAQ,CAACjL,EAApC;AAAA,aAAjB,CAAd;;AACA,gBAAI+K,KAAK,GAAG,CAAZ,EAAe;AACXD,oBAAM,CAACI,IAAP,CAAY9D,KAAZ;AACH,aAFD,MAEO;AACH0D,oBAAM,CAACK,MAAP,CAAcJ,KAAd,EAAqB,CAArB,EAAwB3D,KAAxB;AACH;;AACD,iBAAKqB,IAAL,CAAUC,QAAV,CAAmBvB,QAAnB,CAA4BuC,QAA5B,CAAqCoB,MAArC;AACH;;AACD,eAAKD,YAAL,GAAoB,IAApB;AACH;;;4BAhD2B;AACxB,iBAAO,KAAKpC,IAAL,IAAa,KAAKA,IAAL,CAAUC,QAAV,CAAmBvB,QAAhC,GAA2C,KAAKsB,IAAL,CAAUC,QAAV,CAAmBvB,QAA9D,GAAyE,IAAhF;AACH;AAED;;;;4BACqB;AACjB,iBAAO,KAAKsB,IAAL,IAAa,KAAKA,IAAL,CAAUC,QAAV,CAAmBjD,UAAhC,GACD,KAAKgD,IAAL,CAAUC,QAAV,CAAmBjD,UAAnB,CAA8BkD,KAD7B,GAED,EAFN;AAGH;AAED;;;;4BACe;AACX,iBAAO,KAAKF,IAAL,IAAa,KAAKA,IAAL,CAAUC,QAAV,CAAmB3D,IAAhC,GACD,KAAK0D,IAAL,CAAUC,QAAV,CAAmB3D,IAAnB,CAAwB4D,KADvB,GAED,kCAAK,GAAGyC,OAAR,CAAgB,GAAhB,EAAqBC,OAArB,EAFN;AAGH;AAED;;;;4BACmB;AACf,iBAAO,KAAK5C,IAAL,IAAa,KAAKA,IAAL,CAAUC,QAAV,CAAmB1D,QAAhC,GAA2C,KAAKyD,IAAL,CAAUC,QAAV,CAAmB1D,QAAnB,CAA4B2D,KAAvE,GAA+E,EAAtF;AACH;AAED;;;;4BACkB;AACd,iBAAO,KAAKF,IAAL,IAAa,KAAKA,IAAL,CAAUC,QAAV,CAAmBrC,OAAhC,IAA2C,KAAKoC,IAAL,CAAUC,QAAV,CAAmBrC,OAAnB,CAA2BsC,KAA7E;AACH;;;;;;;uBArCQiC,wB;AAAwB,K;;;YAAxBA,wB;AAAwB,uC;AAAA;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,0N;AAAA;AAAA;ACdrC;;AACI;;AAUJ;;AACA;;;;;;AAXkB;;AAAA,8FAAyC,UAAzC,EAAyC,GAAzC;;;;;;;;;sEDaLA,wB,EAAwB;cALpC,uDAKoC;eAL1B;AACPlI,kBAAQ,EAAE,kBADH;AAEPC,qBAAW,EAAE,2BAFN;AAGPC,mBAAS,EAAE,CAAC,2BAAD;AAHJ,S;AAK0B,Q;;gBAEhC;;;gBAEA;;;gBAEA;;;;;;;;;;;;;;;;;;;;AEpBL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACUI;;AACI;;AACJ;;;;;;;;AAD2B;;AAAA,8FAAqB,QAArB,EAAqB,aAArB,EAAqB,MAArB,EAAqB,OAArB,EAAqB,OAArB,EAAqB,YAArB;;;;;;AAF/B;;AACI;;AAGJ;;;;;;AAHsB;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAKlB;;AACI;;AACI;;AACJ;;AACA;;AAAA;;AAA2F;;AAC/F;;;;AAHkB;;AAAA;;;;;;;;;;;QDPT0I,6B;;;AAYT,+CAAc;AAAA;;AAHd;AACiB,aAAA1G,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AAED;;;;mCAER,CAAW;;;;;;;uBAdV0G,6B;AAA6B,K;;;YAA7BA,6B;AAA6B,yC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,qT;AAAA;AAAA;ACT1C;;AACI;;AACI;;AAAwB;AAAA,mBAAU,IAAA1G,KAAA,OAAV;AAAsB,WAAtB;;AACpB;;AACJ;;AACA;;AAAkB;;AAAoB;;AAC1C;;AACJ;;AACA;;AAKA;;;;;;AAVsB;;AAAA;;AAEI;;AAAA;;AAGZ;;AAAA,4HAAiE,UAAjE,EAAiE,GAAjE;;;;;;;;;sEDCD0G,6B,EAA6B;cALzC,uDAKyC;eAL/B;AACP5I,kBAAQ,EAAE,oBADH;AAEPC,qBAAW,EAAE,2BAFN;AAGPC,mBAAS,EAAE,CAAC,2BAAD;AAHJ,S;AAK+B,Q;;;;gBAErC;;;gBAEA;;;gBAEA;;;gBAEA;;;gBAEA;;;;;;;;;;;;;;;;;;;;AEpBL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACMI;;;;;;AAGI;;;;;;AAMI;;AACI;;;;AACJ;;;;;;AADI;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEJ;;AAAA;;AAQA;;;;;;AALI;;AAKJ;;AAAA,0FAAM,wBAAN;;AAAA;;;;;;;;;;;;;;;;;;AACA;;AAKI;;AACA;;AAAA;;AAEA;;AACJ;;;;;;AANI;;AAEA;;AAAA;;;;;;;;;;;;;;;;;;;;AAKJ;;AAGI;AAAA;;AAAA;;AAAA;AAAA;;AAHJ;;AAOA;;;;;;AAGR;;AACI;;;;AACJ;;;;;;AADI;;AAAA;;;;;;;;AAEJ;;AAGI;AAAA;;AAAA;;AAAA;AAAA;;AACH;;;;;;AAFG;;;;;;;;;;;;;;;AAGJ;;AAGI;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AAMJ;;;;;;AALQ;;AAAA;;;;;;AA7DZ;;AAMI;;AAKA;;AACI;;AAAkB;;AAAe;;AACjC;;AAAyB;;AAA4D;;AACrF;;AACI;;AAGA;;AASA;;AAUA;;AAQJ;;AACJ;;AACA;;AAGA;;AAKA;;AAYJ;;;;;;AAhEI;;AACA;;AAII;;AAAA;;AAIkB;;AAAA;;AACO;;AAAA;;AAEiB;;AAAA;;AAKlC;;AAAA;;AASA;;AAAA;;AAUA;;AAAA;;AAQyB;;AAAA;;AAIjC;;AAAA;;AAMA;;AAAA;;;;;;AAYJ;;;;;;;;AAEI,kFAAgB,QAAhB,EAAgB,aAAhB,EAAgB,MAAhB,EAAgB,YAAhB,EAAgB,OAAhB,EAAgB,YAAhB;;;;QDtDK2I,yB;;;;;;;AAmCT,yCAAoBnK,QAApB,EAA0DuC,OAA1D,EAA8E;AAAA;;AAAA;;AAC1E;AADgB,gBAAAvC,QAAA,GAAAA,QAAA;AAAsC,gBAAAuC,OAAA,GAAAA,OAAA;AAAoB;AAE7E;AAvBD;;;;;oCAyBmBmB,O,EAAsB;AAAA;;AACrC;AACA,cAAIA,OAAO,CAAC0G,KAAR,IAAiB,KAAKA,KAA1B,EAAiC;AAC7B,gBAAMC,IAAI,GAAG,KAAKD,KAAL,CAAW7C,KAAxB;AACA,gBAAM+C,IAAI,GAAGD,IAAI,CAAC9E,IAAL,CAAU,UAACgF,OAAD;AAAA,qBAAaA,OAAO,CAAC3L,EAAR,KAAe,OAAI,CAAC0L,IAAL,CAAU1L,EAAtC;AAAA,aAAV,CAAb;AACA,iBAAK0L,IAAL,CAAUE,SAAV,CAAoBF,IAAI,GAAGA,IAAI,CAACG,MAAR,GAAiB,CAAzC;AACA,iBAAKhK,YAAL,CACI,cADJ,EAEI,KAAK2J,KAAL,CAAWM,YAAX,CAAwB/J,SAAxB,CAAkC,UAAC0J,IAAD,EAAU;AACxC,kBAAMC,IAAI,GAAGD,IAAI,CAAC9E,IAAL,CAAU,UAACgF,OAAD;AAAA,uBAAaA,OAAO,CAAC3L,EAAR,KAAe,OAAI,CAAC0L,IAAL,CAAU1L,EAAtC;AAAA,eAAV,CAAb;;AACA,qBAAI,CAAC0L,IAAL,CAAUE,SAAV,CAAoBF,IAAI,GAAGA,IAAI,CAACG,MAAR,GAAiB,CAAzC;AACH,aAHD,CAFJ;AAOH;AACJ;AAED;;;;;;;qCAIoBlD,K,EAAe;AAAA;;AAC/B;AACA,cAAI,KAAK6C,KAAT,EAAgB;AACZ,gBAAMC,IAAI,GAAmB,KAAKD,KAAL,CAAW7C,KAAxC;AACA,gBAAM+C,IAAI,GAAGD,IAAI,CAAC9E,IAAL,CAAU,UAACgF,OAAD;AAAA,qBAAaA,OAAO,CAAC3L,EAAR,KAAe,OAAI,CAAC0L,IAAL,CAAU1L,EAAtC;AAAA,aAAV,CAAb;;AACA,gBAAI0L,IAAJ,EAAU;AACN,mBAAKA,IAAL,CAAUE,SAAV,CAAoBjD,KAApB;AACA+C,kBAAI,CAACE,SAAL,CAAejD,KAAf;AACH,aAHD,MAGO;AACH,kBAAMkD,MAAM,GAAG,KAAKH,IAAL,CAAUG,MAAzB;AACA,mBAAKH,IAAL,CAAUE,SAAV,CAAoBjD,KAApB;;AACA,kBAAI,KAAK+C,IAAL,eAAqBG,MAAM,GAAGlD,KAAlC,EAAyC;AACrC,qBAAKoD,oBAAL,GAA4BtM,IAA5B,CACI,UAACuM,cAAD,EAAoB;AAChBP,sBAAI,CAACP,IAAL,CAAU,IAAI,+FAAJ,CAAiBc,cAAjB,CAAV;;AACA,yBAAI,CAACR,KAAL,CAAW9B,QAAX,CAAoB+B,IAAI,CAAC5E,MAAL,CAAY,UAAC8E,OAAD;AAAA,2BAAaA,OAAO,CAACE,MAArB;AAAA,mBAAZ,CAApB;AACH,iBAJL,EAKI,YAAM;AACF,yBAAI,CAACH,IAAL,CAAUE,SAAV,CAAoB,GAApB;;AACA,yBAAI,CAAC3J,OAAL,CAAa,QAAb,EAAuB;AAAA,2BAAM,OAAI,CAACyJ,IAAL,CAAUE,SAAV,CAAoB,CAApB,CAAN;AAAA,mBAAvB,EAAqD,CAArD;;AACA,yBAAI,CAACxK,QAAL,CAAc6K,UAAd,CACI,uDADJ;AAGH,iBAXL;AAaH,eAdD,MAcO;AACHR,oBAAI,CAACP,IAAL,CAAU,IAAI,+FAAJ,CAAiB,KAAKQ,IAAtB,CAAV;AACH;AACJ;;AACD,iBAAKF,KAAL,CAAW9B,QAAX,CAAoB+B,IAAI,CAAC5E,MAAL,CAAY,UAAC8E,OAAD;AAAA,qBAAaA,OAAO,CAACE,MAArB;AAAA,aAAZ,CAApB;AACH;AACJ;AAED;;;;+CAC2B;AACvB,eAAKE,oBAAL,GAA4BtM,IAA5B,CACI;AAAA,mBAAM,IAAN;AAAA,WADJ,EAEI;AAAA,mBAAM,IAAN;AAAA,WAFJ;AAIH;AAED;;;;;;+CAG4B;AAAA;;AACxB,iBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAU0F,MAAV,EAAqB;AACpC,gBAAM4D,GAAG,GAAG,OAAI,CAACnF,OAAL,CAAae,IAAb,CAAkB,mIAAlB,EAAgD;AACxDiF,sBAAQ,EAAE,MAD8C;AAExDhF,kBAAI,EAAE;AACF+G,oBAAI,EAAE,IAAI,uGAAJ,CAAqB,OAAI,CAACA,IAA1B;AADJ;AAFkD,aAAhD,CAAZ;;AAMA,gBAAIQ,IAAI,GAAG,KAAX;AACApD,eAAG,CAACqB,iBAAJ,CAAsBrG,KAAtB,CAA4B/B,SAA5B,CAAsC,UAAC+B,KAAD,EAAW;AAC7C;AACA,kBAAIA,KAAK,CAACsG,MAAN,KAAiB,MAArB,EAA6B;AACzB8B,oBAAI,GAAG,IAAP;AACA1M,uBAAO,CAACsJ,GAAG,CAACqB,iBAAJ,CAAsBuB,IAAvB,CAAP;AACA5C,mBAAG,CAAClE,KAAJ;AACH;AACJ,aAPD;AAQAkE,eAAG,CAACuB,WAAJ,GAAkBtI,SAAlB,CAA4B,YAAM;AAC9B;AACA,kBAAI,CAACmK,IAAL,EAAW;AACPhH,sBAAM;AACT;AACJ,aALD;AAMH,WAtBM,CAAP;AAuBH;;;4BAhHkB;AACf,iBAAO,KAAKwG,IAAL,CAAUS,KAAV,GACD,KAAKT,IAAL,CAAUS,KAAV,CAAgBpG,MAAhB,CAAuB,UAAC0F,IAAD,EAAOC,IAAP,EAAgB;AACnC;AACA,gBAAID,IAAJ,EAAU;AACNA,kBAAI,IAAI,MAAR;AACH;;AACD,mBAAQA,IAAI,cAAOC,IAAI,CAAC/F,IAAZ,SACP+F,IAAY,CAACS,KAAb,GACMT,IAAY,CAACS,KAAb,CAAmBpG,MAAnB,CACG,UAACqG,MAAD,EAAST,OAAT;AAAA,qBACKS,MAAM,iBAAUT,OAAO,CAACE,MAAR,GAAiB,GAAjB,GAAuB,GAAjC,cAAwCF,OAAO,CAAChG,IAAhD,MADX;AAAA,aADH,EAGG,EAHH,CADN,GAMK,EAPE,cAQR+F,IAAI,CAACG,MAAL,GAAc,GAAd,GAAoB,EARZ,CAAZ;AASH,WAdD,EAcG,EAdH,CADC,GAgBD,EAhBN;AAiBH;;;;MAjC0C,2E;;;uBAAlCN,yB,EAAyB,gJ,EAAA,mI;AAAA,K;;;YAAzBA,yB;AAAyB,4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;AAAA,8J;AAAA,c;AAAA,a;AAAA,82B;AAAA;AAAA;ACjBtC;;AAoEA;;AACI;;AAOJ;;;;AA1EI;;AAkEkB;;AAAA;;AAEd;;AAAA;;;gpBDrDKA,yB;AAAyB,2E;AAAA,k0R;AAAA;AAAA,mBAFtB,CAAC,wGAAD;AAEsB;;;;;sEAAzBA,yB,EAAyB;cANrC,uDAMqC;eAN3B;AACP7I,kBAAQ,EAAE,uBADH;AAEPC,qBAAW,EAAE,uBAFN;AAGPC,mBAAS,EAAE,CAAC,uBAAD,CAHJ;AAIPyJ,oBAAU,EAAE,CAAC,wGAAD;AAJL,S;AAM2B,Q;;;;;;;;gBAEjC;;;gBAEA;;;gBAEA;;;gBAEA;;;gBAEA;;;;;;;;;;;;;;;;;;;;AE3BL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOwB;;AACI;;AACJ;;;;;;AAF6C;;AACzC;;AAAA;;;;;;AASJ;;AACI;;AACJ;;;;;;AAFiD;;AAC7C;;AAAA;;;;;;AAjBxB;;AACI;;AACI;;AACI;;AAAA;;AAAuD;;AACvD;;AACI;;AACI;;AAGJ;;AACJ;;AACJ;;AACA;;AACI;;AAAA;;AAAgE;;AAChE;;AACI;;AACI;;AAGJ;;AACJ;;AACJ;;AACJ;;AACJ;;;;;;AAtBU;;AAAA;;AAKsB;;AAAA;;AAUA;;AAAA;;;;;;;;AAWpB;;AAMI;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AACA;;AAAkB;;AAAe;;AACrC;;;;;;;;AANI;;AACA;;AAIkB;;AAAA;;;;;;AAV1B;;AACI;;AAWJ;;;;;;AARQ;;AAAA;;;;;;AALZ;;AACI;;AAaJ;;;;;;;;AAb0B;;AAAA,4HAA2D,UAA3D,EAA2D,GAA3D;;;;;;AAF9B;;AACI;;AAeJ;;;;;;;;AAfkB;;AAAA,kGAA+C,UAA/C,EAA+C,GAA/C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BV;;;;;;;;;;;;;;;;;;AAPR;;AACI;;AACI;;AACJ;;AACA;;AAAA;;AACgB;;AAAyD;;AAErE;;AAKJ;;AAAA;;AACJ;;;;;;AANc;;AAAA;;AAKV;;AAAA;;;;;;;;;;;;;;;;;;;;AAIJ;;AACI;;AACI;;AACI;;AACJ;;AACA;;AAAA;;AAAqG;;AACzG;;AACJ;;;;;;AAF6G;;AAAA;;AAAA;;;;;;;;AAK7G;;AAKI;AAAA;;AAAA;;AAAA,2CAA2B,IAA3B;AAA+B,SAA/B;;AACH;;;;;;AALG,qGAA4B,QAA5B,EAA4B,aAA5B,EAA4B,OAA5B,EAA4B,0BAA5B,EAA4B,UAA5B,EAA4B,6BAA5B;;;;QDvDKC,oC;;;;;;;AA8ET,oDAAoBlL,QAApB,EAA0DuC,OAA1D,EAA8E;AAAA;;AAAA;;AAC1E;AADgB,gBAAAvC,QAAA,GAAAA,QAAA;AAAsC,gBAAAuC,OAAA,GAAAA,OAAA;AAnE1D;;AACiB,gBAAAG,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AAGjB;;AACO,gBAAAyI,aAAA,GAAoC,EAApC;AAGP;;AACO,gBAAAC,eAAA,GAA8B,EAA9B;AA0DuE;AAE7E;AAxDD;;;;;mCA0De;AACX,eAAKC,QAAL;AACA,eAAKC,sBAAL;AACH;;;oCAEkB5H,O,EAAwB;AAAA;;AACvC;AACA,cAAIA,OAAO,CAACC,IAAR,IAAgBD,OAAO,CAACE,QAA5B,EAAsC;AAClC,iBAAK0H,sBAAL;AACA;;AACA,gBACI,KAAKjE,IAAL,IACA,CAAC,KAAK+D,eAAL,CAAqB7F,IAArB,CAA0B,UAACgG,IAAD;AAAA,qBAAUA,IAAI,CAAC3M,EAAL,KAAY,OAAI,CAACyI,IAAL,CAAUC,QAAV,CAAmBkE,KAAnB,CAAyBjE,KAA/C;AAAA,aAA1B,CAFL,EAGE;AACE,mBAAKF,IAAL,CAAUC,QAAV,CAAmBkE,KAAnB,CAAyBlD,QAAzB,CAAkC,KAAK8C,eAAL,CAAqB,CAArB,EAAwBxM,EAA1D;AACH;AACJ;AACD;;;AACA,cAAI8E,OAAO,CAACW,UAAZ,EAAwB;AACpB;AACA,gBAAI,KAAKgD,IAAL,IAAa,KAAKhD,UAAlB,IAAgC,CAAC,KAAKgD,IAAL,CAAUC,QAAV,CAAmBnD,KAAnB,CAAyBoD,KAA9D,EAAqE;AACjE,mBAAKF,IAAL,CAAUC,QAAV,CAAmBnD,KAAnB,CAAyBmE,QAAzB,CAAkC,KAAKjE,UAAL,CAAgB,CAAhB,CAAlC;AACH;AACJ;AACD;;;AACA,cAAIX,OAAO,CAACsC,KAAR,IAAiB,KAAKA,KAA1B,EAAiC;AAC7B,iBAAKyF,QAAL;AACH;AACJ;;;mCAEiB;AAAA;;AACd,eAAKpE,IAAL,GAAY,IAAI,wDAAJ,CAAc;AACtBzI,cAAE,EAAE,IAAI,0DAAJ,CAAgB,KAAKoH,KAAL,CAAWpH,EAA3B,CADkB;AAEtB8M,wBAAY,EAAE,IAAI,0DAAJ,CACV,KAAKzG,OAAL,GAAe,kCAAK,CAAC,KAAKtB,IAAN,CAAL,CAAiBqG,OAAjB,CAAyB,GAAzB,EAA8BC,OAA9B,EAAf,GAAyD,KAAKtG,IADpD,CAFQ;AAKtBQ,iBAAK,EAAE,IAAI,0DAAJ,CACH,KAAKnE,QAAL,CAAc+D,MAAd,CAAqBwB,IAArB,CAA0B,KAAKS,KAAL,CAAWE,WAArC,KAAqD,KAAK7B,UAAL,CAAgB,CAAhB,CADlD,CALe;AAQtB6B,uBAAW,EAAE,IAAI,0DAAJ,CAAgB,KAAKF,KAAL,CAAWE,WAAX,IAA0B,KAAK7B,UAAL,CAAgB,CAAhB,EAAmBzF,EAA7D,CARS;AAStB4M,iBAAK,EAAE,IAAI,0DAAJ,CAAgB,KAAKxF,KAAL,CAAW2F,aAAX,IAA4B,KAAKP,eAAL,CAAqB,CAArB,EAAwBxM,EAApE,CATe;AAUtBmM,iBAAK,EAAE,IAAI,0DAAJ,CAAgB,KAAK/E,KAAL,CAAW+E,KAAX,CAAiB7G,GAAjB,CAAqB,UAACoG,IAAD;AAAA,qBAAU,IAAI,+FAAJ,CAAiBA,IAAjB,CAAV;AAAA,aAArB,CAAhB;AAVe,WAAd,CAAZ;AAYA,eAAK7J,YAAL,CACI,cADJ,EAEI,KAAK4G,IAAL,CAAUC,QAAV,CAAmBnD,KAAnB,CAAyBuG,YAAzB,CAAsC/J,SAAtC,CAAgD,UAACwD,KAAD,EAAW;AACvD,mBAAI,CAACkD,IAAL,CAAUC,QAAV,CAAmBpB,WAAnB,CAA+BoC,QAA/B,CAAwCnE,KAAK,CAACvF,EAA9C;;AACA,mBAAI,CAAC0M,sBAAL;;AACA,gBACI,CAAC,OAAI,CAACF,eAAL,CAAqB7F,IAArB,CAA0B,UAACgG,IAAD;AAAA,qBAAUA,IAAI,CAAC3M,EAAL,KAAY,OAAI,CAACyI,IAAL,CAAUC,QAAV,CAAmBkE,KAAnB,CAAyBjE,KAA/C;AAAA,aAA1B,CADL,EAEE;AACE,qBAAI,CAACF,IAAL,CAAUC,QAAV,CAAmBkE,KAAnB,CAAyBlD,QAAzB,CAAkC,OAAI,CAAC8C,eAAL,CAAqB,CAArB,EAAwBxM,EAA1D;AACH;;AACD,mBAAI,CAACyM,QAAL;AACH,WATD,CAFJ;AAaA,eAAKC,sBAAL;;AACA,cACI,KAAKjE,IAAL,IACA,CAAC,KAAK+D,eAAL,CAAqB7F,IAArB,CAA0B,UAACgG,IAAD;AAAA,mBAAUA,IAAI,CAAC3M,EAAL,KAAY,OAAI,CAACyI,IAAL,CAAUC,QAAV,CAAmBkE,KAAnB,CAAyBjE,KAA/C;AAAA,WAA1B,CAFL,EAGE;AACE,iBAAKF,IAAL,CAAUC,QAAV,CAAmBkE,KAAnB,CAAyBlD,QAAzB,CAAkC,KAAK8C,eAAL,CAAqB,CAArB,EAAwBxM,EAA1D;AACH;AACJ;;;uCAEqB;AAAA;;AAClB,cAAM8I,GAAG,GAAG,KAAKnF,OAAL,CAAae,IAAb,CAGV,6IAHU,EAG4B;AACpCiF,oBAAQ,EAAE,MAD0B;AAEpChF,gBAAI,EAAE;AACFI,kBAAI,EAAE,KAAKA,IADT;AAEF0D,kBAAI,EAAE,KAAKA;AAFT;AAF8B,WAH5B,CAAZ;;AAUA,eAAK5G,YAAL,CACI,eADJ,EAEIiH,GAAG,CAACqB,iBAAJ,CAAsBrG,KAAtB,CAA4B/B,SAA5B,CAAsC,UAAC+B,KAAD,EAAwB;AAC1D;AACA,gBAAIA,KAAK,CAACsG,MAAN,KAAiB,MAArB,EAA6B;AACzB,kBAAMhD,KAAK,GAAG,IAAI,iGAAJ,CAAkB,OAAI,CAACqB,IAAL,CAAUE,KAA5B,CAAd;;AACA,qBAAI,CAAC7E,KAAL,CAAWO,IAAX,CAAgB+C,KAAhB;;AACA0B,iBAAG,CAAClE,KAAJ;AACH;AACJ,WAPD,CAFJ;AAWAkE,aAAG,CAACuB,WAAJ,GAAkBtI,SAAlB,CAA4B;AAAA,mBAAM,OAAI,CAACU,KAAL,CAAW,eAAX,CAAN;AAAA,WAA5B;AACH;;;mCAEkB;AAAA;;AACf,cAAM8C,KAAK,GAAU,KAAKkD,IAAL,GAAY,KAAKA,IAAL,CAAUC,QAAV,CAAmBnD,KAAnB,CAAyBoD,KAArC,GAA6C,IAAlE;AACA;;AACA,cAAI,CAACpD,KAAL,EAAY;AACR;AACH;;AACD,eAAKkD,IAAL,CAAUC,QAAV,CAAmByD,KAAnB,CAAyBzC,QAAzB,CAAkC,EAAlC;AACA,eAAK3F,OAAL,GAAe,IAAf;;AACA,eAAK3C,QAAL,CAAc4L,IAAd,CAAmBC,KAAnB,CAAyB;AAAEC,mBAAO,EAAE3H,KAAK,CAACvF;AAAjB,WAAzB,EAAgDP,IAAhD,CACI,UAACgM,IAAD,EAAU;AACN,mBAAI,CAAC1H,OAAL,GAAe,KAAf;AACA,mBAAI,CAACwI,aAAL,GAAqBd,IAAI,CAACnG,GAAL,CAAS,UAACwB,CAAD;AAAA,qBAAO,IAAI,uGAAJ,CAAqBA,CAArB,CAAP;AAAA,aAAT,CAArB;AACH,WAJL,EAKI;AAAA,mBAAO,OAAI,CAAC/C,OAAL,GAAe,KAAtB;AAAA,WALJ;AAOH;AAED;;;;iDACiC;AAC7B,cAAMoJ,UAAU,GAAG,KAAK9G,OAAL,GAAe,kCAAK,CAAC,KAAKtB,IAAN,CAAL,CAAiBqG,OAAjB,CAAyB,GAAzB,CAAf,GAA+C,kCAAK,CAAC,KAAKrG,IAAN,CAAvE;;AAD6B,sCAER,KAAKqI,wBAAL,EAFQ;AAAA,cAEvBR,KAFuB,yBAEvBA,KAFuB;AAAA,cAEhBtG,GAFgB,yBAEhBA,GAFgB;;AAG7BsG,eAAK,GAAGA,KAAK,CAACS,MAAN,CAAaC,IAAI,CAACC,IAAL,CAAUX,KAAK,CAACS,MAAN,KAAiB,CAA3B,IAAgC,CAA7C,CAAR;AACA,eAAKb,eAAL,GAAuB,EAAvB;;AACA,iBAAOI,KAAK,CAACY,QAAN,CAAelH,GAAf,EAAoB,GAApB,CAAP,EAAiC;AAC7B,iBAAKkG,eAAL,CAAqBtB,IAArB,CAA0B;AACtBlL,gBAAE,EAAEsN,IAAI,CAACG,GAAL,CAASN,UAAU,CAACO,IAAX,CAAgBd,KAAhB,EAAuB,GAAvB,CAAT,CADkB;AAEtBjH,kBAAI,EAAEiH,KAAK,CAACpG,MAAN,CAAa,QAAb;AAFgB,aAA1B;AAIAoG,iBAAK,GAAGA,KAAK,CAACrG,GAAN,CAAU,CAAV,EAAa,GAAb,CAAR;AACH;AACD;;;AACA,cAAI,KAAKiG,eAAL,CAAqBvH,MAArB,KAAgC,CAApC,EAAuC;AACnC,iBAAKuH,eAAL,CAAqBtB,IAArB,CAA0B;AAAElL,gBAAE,EAAE,CAAC,CAAP;AAAU2F,kBAAI,EAAE;AAAhB,aAA1B;AACH;AACJ;;;mDAE+B;AAC5B,cAAIiH,KAAK,GAAG,kCAAK,CAAC,KAAK7H,IAAN,CAAjB;AACA;;AACA,cAAI,KAAKsB,OAAT,EAAkB;AACduG,iBAAK,GAAGA,KAAK,CAACxB,OAAN,CAAc,GAAd,CAAR;AACH;;AACD,cAAI9E,GAAG,GAAG,KAAKD,OAAL,GAAeuG,KAAK,CAACe,KAAN,CAAY,GAAZ,CAAf,GAAkCf,KAAK,CAACrG,GAAN,CAAU,KAAKvB,QAAf,EAAyB,GAAzB,CAA5C;AACA,cAAI4I,aAAa,GAAG,0DAAUhB,KAAK,CAACiB,MAAN,EAAV,CAApB,CAP4B,CAQ5B;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,uBAAa,GAAGA,aAAa,CAACE,IAAd,CAAmB,CAAnB,CAAhB;AACA,cAAMC,QAAQ,GAAG,kCAAK,CAACH,aAAa,CAACI,WAAd,EAAD,CAAtB;;AACA,cAAIpB,KAAK,CAACY,QAAN,CAAeO,QAAf,EAAyB,GAAzB,CAAJ,EAAmC;AAC/BnB,iBAAK,GAAGmB,QAAR;AACAzH,eAAG,GAAGsG,KAAK,CAACrG,GAAN,CAAU,EAAV,EAAc,GAAd,CAAN;AACH,WAHD,MAGO;AACH,gBAAM0H,YAAY,GAAGF,QAAQ,CAACD,IAAT,CAAc,EAAd,CAArB;;AACA,gBAAIxH,GAAG,CAAC4H,OAAJ,CAAYD,YAAZ,CAAJ,EAA+B;AAC3B3H,iBAAG,GAAG2H,YAAN;AACH;AACJ;;AACD,iBAAO;AAAErB,iBAAK,EAALA,KAAF;AAAStG,eAAG,EAAHA;AAAT,WAAP;AACH;;;4BAlNmB;AAChB,iBACI,CAAC,KAAK6H,eAAL,CAAqBnF,YAArB,IAAqC,KAAKuD,aAAL,CAAmBtH,MAAzD,MACC,CAAC,KAAKmJ,sBAAN,IAAgC,KAAKC,mBADtC,CADJ;AAIH;AAED;;;;4BAC0B;AACtB,cAAMC,aAAa,GAAG,CAAC,KAAK7F,IAAL,IAAa;AAAEC,oBAAQ,EAAE;AAAEnD,mBAAK,EAAE;AAAEoD,qBAAK,EAAE;AAAT;AAAT;AAAZ,WAAd,EAAsDD,QAA5E;AACA,cAAMnD,KAAK,GAAU+I,aAAa,CAAC/I,KAAd,CAAoBoD,KAApB,IAA6B;AAAEpB,iBAAK,EAAE;AAAT,WAAlD;AACA,iBAAO,KAAKnG,QAAL,CAAcqG,YAAd,CAA2BC,SAA3B,CAAqCf,IAArC,CACH,UAACgB,GAAD;AAAA,mBAASpC,KAAK,CAACgC,KAAN,CAAYgH,WAAZ,KAA4B5G,GAAG,CAAC3H,EAAzC;AAAA,WADG,KAEF;AAAEwO,oCAAwB,EAAE;AAA5B,WAFL;AAGH;AAED;;;;4BACiB;AACb,iBAAO,KAAKL,eAAL,CAAqBtG,QAArB,IAAiC,KAAxC;AACH;AAED;;;;4BACqB;AACjB,iBAAO,KAAKY,IAAL,GACD,KAAKA,IAAL,CAAUC,QAAV,CAAmByD,KAAnB,CAAyBxD,KAAzB,CAA+B5C,MAA/B,CAAsC,UAAC0I,KAAD,EAAQ/C,IAAR;AAAA,mBAAiB+C,KAAK,GAAG/C,IAAI,CAACG,MAA9B;AAAA,WAAtC,EAA4E,CAA5E,CADC,GAED,CAFN;AAGH;AAED;;;;4BACuB;AACnB,iBAAO,KAAKpD,IAAL,CAAUC,QAAV,CAAmBkE,KAAnB,CAAyBjE,KAAzB,GAAiC,CAAxC;AACH;AAED;;;;4BACiC;AAC7B,cAAMnB,QAAQ,GAAG,KAAK2G,eAAtB;AACA;;AACA,cAAI,CAAC3G,QAAQ,CAACgH,wBAAV,IAAsChH,QAAQ,CAACgH,wBAAT,IAAqC,CAA/E,EAAkF;AAC9E,mBAAO,KAAP;AACH;;AACD,cAAMzJ,IAAI,GAAG,kCAAK,EAAlB;AACA,cAAM2J,UAAU,GAAG,kCAAK,CAAC,KAAK3J,IAAN,CAAL,CAAiB4J,QAAjB,CAA0BnH,QAAQ,CAACgH,wBAAnC,EAA6D,GAA7D,CAAnB;AACA,iBAAOzJ,IAAI,CAACmJ,OAAL,CAAaQ,UAAb,EAAyB,GAAzB,CAAP;AACH;AAED;;;;4BAC8B;AAC1B,iBAAO,KAAKnC,aAAL,CAAmBxG,MAAnB,CACH,UAACX,SAAD,EAAYwJ,QAAZ;AAAA,mBAAyBxJ,SAAS,IAAIwJ,QAAQ,CAACC,iBAA/C;AAAA,WADG,EAEH,KAFG,CAAP;AAIH;;;;MA5EqD,2E;;;uBAA7CvC,oC,EAAoC,gJ,EAAA,oI;AAAA,K;;;YAApCA,oC;AAAoC,+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,8J;AAAA,e;AAAA,a;AAAA,slC;AAAA;AAAA;ACtBjD;;AACI;;AAwBA;;AAiBA;;AACI;;AAAmC;AAAA,mBAAU,IAAAxI,KAAA,OAAV;AAAsB,WAAtB;;AAAnC;;AAAmG;;AACnG;;AAA2E;AAAA,mBAAU,IAAAgL,YAAA,EAAV;AAAwB,WAAxB;;AAA3E;;AAEA;;AACJ;;AACJ;;AACA;;AAgBA;;AAUA;;;;;;AA1EwB;;AAAA;;AAwBF;;AAAA,yFAAiC,UAAjC,EAAiC,GAAjC;;AAmBoB;;AAAA;;AAElC;;AAAA;;AAAA;;;;;;;;;sEDxBKxC,oC,EAAoC;cALhD,uDAKgD;eALtC;AACP5J,kBAAQ,EAAE,0BADH;AAEPC,qBAAW,EAAE,gCAFN;AAGPC,mBAAS,EAAE,CAAC,gCAAD;AAHJ,S;AAKsC,Q;;;;;;;;gBAE5C;;;gBAEA;;;gBAEA;;;gBAEA;;;gBAEA;;;gBAEA;;;;;;;;;;;;;;;;;;;;AElCL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAYamM,8B;;;AAqDT,8CAAoB3N,QAApB,EAAkD;AAAA;;AAA9B,aAAAA,QAAA,GAAAA,QAAA;AAhDpB;;AACiB,aAAA4N,IAAA,GAAO,IAAI,0DAAJ,EAAP;AACjB;;AACiB,yBAAS,IAAI,0DAAJ,EAAT;AA6CmC;AA3CpD;;;;;4BACgB;AACZ,cAAMzJ,KAAK,GAAG,KAAKnE,QAAL,CAAc+D,MAAd,CAAqBwB,IAArB,CAA0B,CAAC,KAAKS,KAAL,IAAc,EAAf,EAAmBE,WAA7C,KAA6D;AAAE3B,gBAAI,EAAE;AAAR,WAA3E;AACA,iBAAOJ,KAAK,CAACI,IAAN,IAAc,eAArB;AACH;AACD;;;;4BACwB;AACpB;AACA,cAAI,CAAC,KAAKyB,KAAV,EAAiB;AACb,mBAAO,iBAAP;AACH;;AACD,cAAMrC,IAAI,GAAG,kCAAK,CAAC,KAAKqC,KAAL,CAAW0F,YAAZ,CAAL,CAA+BvG,GAA/B,CACT,KAAKa,KAAL,CAAWtC,OAAX,CAAmBiI,aAAnB,IAAoC,KAAK3F,KAAL,CAAW2F,aADtC,EAET,GAFS,CAAb;AAIA,iBAAOhI,IAAI,CAACyB,MAAL,CAAY,QAAZ,CAAP;AACH;AAED;;;;4BACqB;AACjB,cAAM2F,KAAK,GAAG,CAAC,KAAK/E,KAAL,IAAc;AAAE+E,iBAAK,EAAE;AAAT,WAAf,EAA8BA,KAA5C;AACA,iBAAOA,KAAK,CAACpG,MAAN,CAAa,UAAC8F,MAAD,EAASH,IAAT;AAAA,mBAAkBG,MAAM,GAAGH,IAAI,CAACG,MAAL,GAAcH,IAAI,CAACuD,UAA9C;AAAA,WAAb,EAAuE,CAAvE,CAAP;AACH;AAED;;;;4BACqB;AACjB,cAAM9C,KAAK,GAAG,CAAC,KAAK/E,KAAL,IAAc;AAAE+E,iBAAK,EAAE;AAAT,WAAf,EAA8BA,KAA5C;AACA,iBAAOA,KAAK,CAACpG,MAAN,CAAa,UAAC8F,MAAD,EAASH,IAAT;AAAA,mBAAkBG,MAAM,GAAGH,IAAI,CAACG,MAAhC;AAAA,WAAb,EAAqD,CAArD,CAAP;AACH;AAED;;;;4BACiB;AACb,cAAMtG,KAAK,GAAG,KAAKnE,QAAL,CAAc+D,MAAd,CAAqBwB,IAArB,CAA0B,CAAC,KAAKS,KAAL,IAAc,EAAf,EAAmBE,WAA7C,CAAd;AACA;;;AACA,cAAI,CAAC/B,KAAD,IAAU,CAACA,KAAK,CAACgC,KAArB,EAA4B;AACxB,mBAAO,KAAP;AACH;;AACD,cAAMC,QAAQ,GAAG,KAAKpG,QAAL,CAAcqG,YAAd,CAA2BC,SAA3B,CAAqCf,IAArC,CACb,UAAAgB,GAAG;AAAA,mBAAIA,GAAG,CAAC3H,EAAJ,KAAWuF,KAAK,CAACgC,KAAN,CAAYgH,WAA3B;AAAA,WADU,KAEZ;AAAE1G,oBAAQ,EAAE;AAAZ,WAFL;AAGA,iBAAOL,QAAQ,CAACK,QAAhB;AACH;;;;;;;uBAnDQkH,8B,EAA8B,gJ;AAAA,K;;;YAA9BA,8B;AAA8B,+C;AAAA;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,c;AAAA,kN;AAAA;AAAA;ACZ3C;;AAAA;;AACe;;AAA4B;;AAC3C;;AAAA;;AACA;;AACI;;AACI;;AACA;;;;AAAsE;;AAC1E;;AACA;;AAAkB;;;;AAAyC;;AAC/D;;AACA;;AACI;;AAAoC;AAAA,mBAAU,IAAAC,IAAA,OAAV;AAAqB,WAArB;;AAChC;;AACJ;;AACA;;AAAsD;AAAA,mBAAU,oBAAV;AAAuB,WAAvB;;AAClD;;AACJ;;AACJ;;;;AAfA;;AAAA,6EAAM,iBAAN;;AAAA;;AAGQ;;AAAA;;;;;;;;AAGc;;AAAA;;AAIJ;;AAAA;;AAGA;;AAAA;;;;;;;;;;sEDHLD,8B,EAA8B;cAL1C,uDAK0C;eALhC;AACPrM,kBAAQ,EAAE,0BADH;AAEPC,qBAAW,EAAE,uBAFN;AAGPC,mBAAS,EAAE,CAAC,uBAAD;AAHJ,S;AAKgC,Q;;;;;;gBAEtC;;;gBAEA;;;gBAEA;;;gBAEA;;;;;;;;;;;;;;;;;;;;AEpBL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOgB;;AAII;AAAA;;AAAA;;AAAA;;AAAA;AAAA,WAAyB,QAAzB,EAAyB;AAAA;;AAAA;;AAAA;;AAAA;AAAA,SAAzB;;AAEH;;;;;;;;AAJG,oFAAe,MAAf,EAAe,WAAf;;;;;;;;AAJZ;;AACI;;AACI;;AAOJ;;AACA;;AAA8B;AAAA;;AAAA;;AAAA;AAAA;;AAA9B;;AAEA;;AACJ;;;;;;AAVY;;AAAA;;;;;;;;;;;;;;;;;;;;AAaZ;;AAKI;AAAA;;AAAA;;AAAA;AAAA;;AALJ;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOJ;;AACI;;AACI;;AACJ;;AACA;;AAAA;;AAA2E;;AAC3E;;AAA8B;AAAA;;AAAA;;AAAA;AAAA;;AAA9B;;AAEA;;AACJ;;;;AANkB;;AAAA;;;;QD1BTsM,iC;;;AALb;AAAA;;AAcI;AACiB,aAAApL,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AACjB;;AACiB,aAAAsD,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AAoDpB;AAlDG;;;;;;AAkBA;mCACkB;AACd,eAAKA,KAAL,CAAW/C,IAAX;AACH;AAED;;;;kCACiB+C,K,EAAsB;AACnC,eAAKA,KAAL,CAAW/C,IAAX,CAAgB+C,KAAhB;AACH;AAED;;;;oCACmBA,K,EAAsB;AACrC,cAAM0D,MAAM,GAAG,KAAKA,MAApB;AACA,cAAMC,KAAK,GAAGD,MAAM,CAACE,SAAP,CAAiB,UAAAC,QAAQ;AAAA,mBAAI7D,KAAK,CAACpH,EAAN,KAAaiL,QAAQ,CAACjL,EAA1B;AAAA,WAAzB,CAAd;AACA;;AACA,cAAI+K,KAAK,IAAI,CAAb,EAAgB;AACZD,kBAAM,CAACK,MAAP,CAAcJ,KAAd,EAAqB,CAArB;AACA,iBAAK5D,QAAL,CAAcuC,QAAd,CAAuBoB,MAAvB;AACH;AACJ;AAED;;;;;;+BAGW;AACP,eAAKhH,KAAL,CAAWO,IAAX,CAAgB;AAAEC,gBAAI,EAAE,MAAR;AAAgBsE,gBAAI,EAAE;AAAtB,WAAhB;AACH;AAED;;;;mCACe;AACX,eAAK9E,KAAL,CAAWO,IAAX,CAAgB;AAAEC,gBAAI,EAAE,UAAR;AAAoBsE,gBAAI,EAAE;AAA1B,WAAhB;AACH;;;4BAhDgB;AAAA;;AACb;AACA,cAAI,CAAC,KAAKzB,QAAV,EAAoB;AAChB,mBAAO,EAAP;AACH;;AACD,cAAM2D,MAAM,GAAG,KAAK3D,QAAL,CAAcwB,KAA7B;AACAmC,gBAAM,CAACqE,OAAP,CACI,UAAA/H,KAAK;AAAA,mBACAA,KAAK,CAAC0F,YAAN,GAAqB,OAAI,CAACzG,OAAL,GAChB,kCAAK,CAAC,OAAI,CAACtB,IAAN,CAAL,CACKqG,OADL,CACa,GADb,EAEKC,OAFL,EADgB,GAIhB,OAAI,CAACtG,IALV;AAAA,WADT;AAQA,iBAAO+F,MAAP;AACH;;;;;;;uBA9BQoE,iC;AAAiC,K;;;YAAjCA,iC;AAAiC,4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,sjB;AAAA;AAAA;ACb9C;;AACI;;AACI;;AAAA;;AAAqD;;AACzD;;AACA;;AACI;;AAcJ;;AACA;;AACI;;AAUA;;AAA+B;AAAA,mBAAU,IAAAE,IAAA,EAAV;AAAgB,WAAhB;;AAA/B;;AAEA;;AACJ;;AACJ;;AACA;;;;;;AA/BsB;;AAAA,4GAAiD,UAAjD,EAAiD,GAAjD;;AAoBV;;AAAA;;;;;;;;;sEDZCF,iC,EAAiC;cAL7C,uDAK6C;eALnC;AACPxM,kBAAQ,EAAE,uBADH;AAEPC,qBAAW,EAAE,6BAFN;AAGPC,mBAAS,EAAE,CAAC,6BAAD;AAHJ,S;AAKmC,Q;;gBAEzC;;;gBAEA;;;gBAEA;;;gBAEA;;;gBAEA;;;gBAEA;;;;;;;;;;;;;;;;;;;;AEzBL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AC8BY;;AACI;;AACI;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAMA;;AACI;;AAAkB;;AAAmB;;AACrC;;AAAkB;;AAAmB;;AACrC;;AAAqB;;AAAsB;;AAC/C;;AACJ;;AACJ;;;;;;AAL8B;;AAAA;;AACA;;AAAA;;AACG;;AAAA;;;;;;;;;;;;;;;;AASjC;;AAKI;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AACA;;AAIJ;;;;;;AAVI,uFAAkB,WAAlB,EAAkB,IAAlB;;AAKA;;AAAA;;AAGI;;AAAA;;;;;;AAZhB;;AACI;;AACI;;AAaJ;;AACJ;;;;;;AAbY;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnDhB;;AACI;;AACI;;AACI;;AAA8C;AAAA;;AAAA;;AAAA,oCAAqB,IAAC,CAAtB;AAAuB,SAAvB;;AAC1C;;AAGJ;;AACA;;AAAkB;;AAAkB;;AACpC;;AAAwB;AAAA;;AAAA;;AAAA,oCAAqB,CAArB;AAAsB,SAAtB;;AACpB;;AAGJ;;AACJ;;AACA;;AACI;;AAAmB;AAAA;;AAAA;;AAAA;AAAA;;AACf;;AACA;;AAAA;;AAAkF;;AAClF;;AAMJ;;AACA;;AAIA;;AAeA;;AACJ;;AACJ;;AACA;;AAiBJ;;;;;;AA9DoC;;AAAA;;AAEhB;;AAAA;;AAGU;;AAAA;;AAGV;;AAAA;;AASA;;AAAA;;AAQJ;;AAAA;;AAEc;;AAAA;;AAkBL;;AAAA;;;;QD/BZyM,4B;;;;;;;AA6BT,4CAAoBjO,QAApB,EAAkD;AAAA;;AAAA;;AAC9C;AADgB,gBAAAA,QAAA,GAAAA,QAAA;AA1BpB;;AACgB,gBAAAkO,SAAA,GAAsB,EAAtB;AAChB;;AACiB,gBAAAC,eAAA,GAAkB,IAAI,0DAAJ,EAAlB;AACjB;;AACO,gBAAAC,aAAA,GAA4B,EAA5B;AAqB2C;AAEjD;AAnBD;;;;;mCAqBkB3D,M,EAAgB;AAC9B,cAAI9G,IAAI,GAAG,kCAAK,CAAC,KAAKA,IAAL,CAAU4D,KAAX,CAAL,CAAuBpC,GAAvB,CAA2BsF,MAA3B,EAAmC,GAAnC,CAAX;AACA,cAAM4D,GAAG,GAAG,kCAAK,GAAGrE,OAAR,CAAgB,GAAhB,CAAZ;;AACA,cAAIrG,IAAI,CAACyI,QAAL,CAAciC,GAAd,EAAmB,GAAnB,CAAJ,EAA6B;AACzB1K,gBAAI,GAAG0K,GAAP;AACH;;AACD,eAAK1K,IAAL,CAAU2E,QAAV,CAAmB3E,IAAI,CAACsG,OAAL,EAAnB;AACH;;;mCAEc;AAAA;;AACX,eAAKxJ,YAAL,CAAkB,WAAlB,EAA+B,KAAKT,QAAL,CAAcqG,YAAd,CAA2BiI,MAA3B,CAAkC,WAAlC,EAA+C3N,SAA/C,CAAyD,UAAC4N,QAAD,EAAc;AAClG,mBAAI,CAACH,aAAL,GAAqBG,QAArB;AACH,WAF8B,CAA/B;AAGH;AAED;;;;;;;0CAIyBnI,Q,EAAkB;AACvC,eAAK8H,SAAL,CAAepE,IAAf,CAAoB1D,QAAQ,CAACxH,EAA7B;AACA,eAAKsP,SAAL,GAAiB,0FAAO,KAAKA,SAAZ,CAAjB;AACA,eAAKC,eAAL,CAAqBlL,IAArB,CAA0B,KAAKiL,SAA/B;AACH;AAED;;;;;;;6CAI4B9H,Q,EAAoB;AAC5C,eAAK8H,SAAL,CAAenE,MAAf,CACI,KAAKmE,SAAL,CAAetE,SAAf,CAAyB,UAAAhL,EAAE;AAAA,mBAAIwH,QAAQ,CAACxH,EAAT,KAAgBA,EAApB;AAAA,WAA3B,CADJ,EAEI,CAFJ;AAIA,eAAKuP,eAAL,CAAqBlL,IAArB,CAA0B,KAAKiL,SAA/B;AACH;;;4BAvDkB;AACf,cAAMvK,IAAI,GAAG,kCAAK,CAAC,KAAKA,IAAL,CAAU4D,KAAX,CAAlB;AACA,iBAAO,kCAAK,GAAGlC,MAAR,CAAe1B,IAAf,EAAqB,GAArB,CAAP;AACH;AAED;;;;4BACuB;AACnB,cAAMA,IAAI,GAAG,kCAAK,CAAC,KAAKA,IAAL,CAAU4D,KAAX,CAAlB;AACA,iBAAO,KAAKiH,QAAL,GAAgB,OAAhB,GAA0B7K,IAAI,CAACyB,MAAL,CAAY,aAAZ,CAAjC;AACH;AAED;;;;4BACwB;AAAA;;AACpB,iBAAO,KAAK8I,SAAL,CAAehK,GAAf,CAAmB,UAAAtF,EAAE;AAAA,mBAAI,OAAI,CAACwP,aAAL,CAAmB7I,IAAnB,CAAwB,UAAAgB,GAAG;AAAA,qBAAIA,GAAG,CAAC3H,EAAJ,KAAWA,EAAf;AAAA,aAA3B,CAAJ;AAAA,WAArB,CAAP;AACH;;;;MA3B6C,2E;;;uBAArCqP,4B,EAA4B,gJ;AAAA,K;;;YAA5BA,4B;AAA4B,4C;AAAA;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,0F;AAAA,c;AAAA,a;AAAA,ksB;AAAA;AAAA;ACjBzC;;;;AAA2B;;;;;;mBDeX,CAAC,wGAAD;;;;;;sEAEHA,4B,EAA4B;cANxC,uDAMwC;eAN9B;AACP3M,kBAAQ,EAAE,uBADH;AAEPC,qBAAW,EAAE,0BAFN;AAGPC,mBAAS,EAAE,CAAC,0BAAD,CAHJ;AAIPyJ,oBAAU,EAAE,CAAC,wGAAD;AAJL,S;AAM8B,Q;;;;;;gBAEpC;;;gBAEA;;;gBAEA;;;;;;;;;;;;;;;;;;;;AEvBL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;ACcY;;AACI;;AAII;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACH;;AACL;;;;;;;;AALQ;;AAAA,sFAAa,OAAb,EAAa,QAAb,EAAa,OAAb,EAAa,eAAb;;;;;;AANZ;;AAII;;AAQJ;;;;;;AAVI;;AAEc;;AAAA;;;;;;AALtB;;AACI;;AAaJ;;;;;;;;AAZQ;;AAAA,wHAAyD,UAAzD,EAAyD,GAAzD;;;;;;;;;;;;;;;;;;;;AAwBA;;AAKI;AAAA;;AAAA;;AAAA;AAAA;;AALJ;;AASA;;;;;;AALI;;;;;;;;;;;;;;;;;;AAUZ;;AACI;;AACI;;AACI;;AACJ;;AACA;;AAAA;;AAEA;;AACJ;;AACJ;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AACI;;AACI;;AACI;;AACJ;;AACA;;AAAA;;AAEA;;AACJ;;AACJ;;;;AANsB;;AAAA;;;;QDvCbwD,yB;;;;;;;AAwBT,yCAAoBzO,QAApB,EAAkD;AAAA;;AAAA;;AAC9C;AADgB,gBAAAA,QAAA,GAAAA,QAAA;AAnBpB;;AACiB,gBAAA0C,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AAEjB;;AACO,gBAAA2B,UAAA,GAAsB,EAAtB;AAKP;;AACO,gBAAAqK,QAAA,GAAqB,EAArB;AACP;;AACgB,gBAAAC,OAAA,GAAU,IAAI,4CAAJ,EAAV;AAOkC;AAEjD;AAPD;;;;;mCASe;AAAA;;AACX,eAAK3O,QAAL,CAAc+D,MAAd,CAAqBrD,WAArB,CAAiCmG,IAAjC,CAAsC,6DAAM,UAAAC,CAAC;AAAA,mBAAIA,CAAJ;AAAA,WAAP,CAAtC,EAAqDnG,SAArD,CAA+D,YAAM;AACjE;AACA,mBAAI,CAACiO,eAAL,GAAuB,OAAI,CAACD,OAAL,CAAa9H,IAAb,CACnB,oEAAa,GAAb,CADmB,EAEnB,6EAFmB,EAGnB,iEAAU,UAAAC,CAAC,EAAI;AACX,qBAAI,CAACnE,OAAL,GAAe,IAAf;AACA,kBAAMkM,UAAU,GAAG,OAAI,CAACxH,IAAL,CAAUC,QAAV,CAAmBuH,UAAnB,GAAgC,OAAI,CAACxH,IAAL,CAAUC,QAAV,CAAmBuH,UAAnB,CAA8BtH,KAA9D,GAAsE,IAAzF;AACA,kBAAMuH,qBAAqB,GAAGD,UAAU,IAAIA,UAAU,CAACE,MAAzB,IAAmCF,UAAU,CAACE,MAAX,KAAsB,MAAzD,GAAkE;AAC5FC,6BAAa,EAAE,CAACH,UAAU,CAACE,MAAX,IAAqB,EAAtB,EAA0BE,WAA1B,EAD6E;AAE5FC,0BAAU,EAAE,kCAAK,CAACL,UAAU,CAAC3J,GAAZ,CAAL,CAAsBiK,IAAtB;AAFgF,eAAlE,GAG1B,EAHJ;AAIA,kBAAMtD,KAAK;AACPlI,oBAAI,EAAE,OAAI,CAAC0D,IAAL,CAAUC,QAAV,CAAmB3D,IAAnB,CAAwB4D,KADvB;AAEP3D,wBAAQ,EAAE,OAAI,CAACyD,IAAL,CAAUC,QAAV,CAAmB1D,QAAnB,CAA4B2D,KAF/B;AAGPmH,wBAAQ,EAAE,OAAI,CAAC1O,QAAL,CAAcqG,YAAd,CAA2BD,QAA3B,CAAoCxH,EAHvC;AAIPwQ,wBAAQ,EAAE;AAJH,iBAKJN,qBALI,CAAX;AAOA;;AACA,kBAAI,OAAI,CAACJ,QAAL,IAAiB,OAAI,CAACA,QAAL,CAAc7K,MAAnC,EAA2C;AACvCgI,qBAAK,CAAC6C,QAAN,GAAiB,OAAI,CAACA,QAAL,CAActK,IAAd,CAAmB,GAAnB,CAAjB;AACH;;AACD,qBAAO,OAAI,CAACpE,QAAL,CAAc+D,MAAd,CAAqBC,SAArB,CAA+B6H,KAA/B,CAAP;AACH,aAnBD,CAHmB,EAuBnB,kEAAW,UAAA/E,CAAC;AAAA,qBAAI,gDAAG,EAAH,CAAJ;AAAA,aAAZ,CAvBmB,EAwBnB,2DAAI,UAACuD,IAAD,EAAmB;AACnB,qBAAI,CAAC1H,OAAL,GAAe,KAAf;AACA,qBAAO0H,IAAP;AACH,aAHD,CAxBmB,CAAvB,CAFiE,CA+BjE;;AACA,mBAAI,CAAC5J,YAAL,CACI,gBADJ,EAEI,OAAI,CAACmO,eAAL,CAAqBjO,SAArB,CAA+B,UAAA0J,IAAI;AAAA,qBAAK,OAAI,CAAChG,UAAL,GAAkBgG,IAAvB;AAAA,aAAnC,CAFJ;;AAIA,mBAAI,CAACsE,OAAL,CAAaX,IAAb,CAAkB,EAAlB;AACH,WArCD;AAsCH;;;oCAEkBtK,O,EAAsB;AAAA;;AACrC;AACA,cAAIA,OAAO,CAAC2D,IAAZ,EAAkB;AACd,gBAAMgI,QAAQ,GAAG,SAAXA,QAAW,CAAAvI,CAAC;AAAA,qBAAI,OAAI,CAAC6H,OAAL,CAAaX,IAAb,CAAkBlH,CAAlB,CAAJ;AAAA,aAAlB;AACA;;;AACA,gBAAI,KAAKO,IAAL,CAAUC,QAAV,CAAmB3D,IAAvB,EAA6B;AACzB,mBAAKlD,YAAL,CACI,YADJ,EAEI,KAAK4G,IAAL,CAAUC,QAAV,CAAmB3D,IAAnB,CAAwB+G,YAAxB,CAAqC/J,SAArC,CAA+C0O,QAA/C,CAFJ;AAIH;AACD;;;AACA,gBAAI,KAAKhI,IAAL,CAAUC,QAAV,CAAmB1D,QAAvB,EAAiC;AAC7B,mBAAKnD,YAAL,CACI,gBADJ,EAEI,KAAK4G,IAAL,CAAUC,QAAV,CAAmB1D,QAAnB,CAA4B8G,YAA5B,CAAyC/J,SAAzC,CAAmD0O,QAAnD,CAFJ;AAIH;AACJ;AACJ;AAED;;;;;;;oCAImBlL,K,EAAc;AAC7B,cAAI,KAAKmL,QAAT,EAAmB;AACf,gBAAMjF,IAAI,GAAG,KAAK5G,MAAL,CAAY8D,KAAzB;;AACA,gBAAI8C,IAAI,CAAC9E,IAAL,CAAU,UAAA+E,IAAI;AAAA,qBAAIA,IAAI,CAAC1L,EAAL,KAAYuF,KAAK,CAACvF,EAAtB;AAAA,aAAd,CAAJ,EAA6C;AACzC,mBAAK6E,MAAL,CAAY6E,QAAZ,CAAqB+B,IAAI,CAAC5E,MAAL,CAAY,UAAA6E,IAAI;AAAA,uBAAIA,IAAI,CAAC1L,EAAL,KAAYuF,KAAK,CAACvF,EAAtB;AAAA,eAAhB,CAArB;AACH,aAFD,MAEO;AACH,mBAAK6E,MAAL,CAAY6E,QAAZ,CAAqB+B,IAAI,CAACkF,MAAL,CAAY,CAACpL,KAAD,CAAZ,CAArB;AACH;AACJ,WAPD,MAOO;AACH,iBAAKV,MAAL,CAAY6E,QAAZ,CAAqB,CAACnE,KAAD,CAArB;AACA,iBAAKzB,KAAL,CAAWO,IAAX,CAAgB;AAAEC,kBAAI,EAAE,MAAR;AAAgBsE,kBAAI,EAAE;AAAtB,aAAhB;AACH;AACJ;AAED;;;;;;+BAGW;AACP,eAAK9E,KAAL,CAAWO,IAAX,CAAgB;AAAEC,gBAAI,EAAE,MAAR;AAAgBsE,gBAAI,EAAE;AAAtB,WAAhB;AACH;AAED;;;;mCACe;AACX,eAAK9E,KAAL,CAAWO,IAAX,CAAgB;AAAEC,gBAAI,EAAE,UAAR;AAAoBsE,gBAAI,EAAE;AAA1B,WAAhB;AACH;;;4BAlGkB;AACf,iBAAO,KAAKxH,QAAL,CAAcuJ,OAAd,CAAsB,6BAAtB,CAAP;AACH;;;;MAtB0C,2E;;;uBAAlCkF,yB,EAAyB,gJ;AAAA,K;;;YAAzBA,yB;AAAyB,yC;AAAA;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,8J;AAAA,e;AAAA,a;AAAA,qoB;AAAA;AAAA;ACzBtC;;AACI;;AACA;;AACI;;AAEI;AAAA;AAAA,aAAwB,iBAAxB,EAAwB;AAAA,mBACL,IAAAE,OAAA,aADK;AACe,WADvC;;AAEH;;AACL;;AACA;;AAeA;;AACI;;AACI;;AAII;AAAA,mBAAU,IAAAa,QAAA,EAAV;AAAoB,WAApB;;AAJJ;;AAQA;;AACA;;AAUJ;;AACJ;;AACJ;;AACA;;AAYA;;;;;;AAxDY;;AAAA,mGAA2B,WAA3B,EAA2B,YAA3B;;AAKM;;AAAA,yFAAiC,UAAjC,EAAiC,GAAjC;;AA4BF;;AAAA;;;;;;;;;sEDZHf,yB,EAAyB;cALrC,uDAKqC;eAL3B;AACPnN,kBAAQ,EAAE,oBADH;AAEPC,qBAAW,EAAE,6BAFN;AAGPC,mBAAS,EAAE,CAAC,6BAAD;AAHJ,S;AAK2B,Q;;;;;;gBAEjC;;;gBAEA;;;gBAEA;;;;;;;;;;;;;;;;;;;;AE/BL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACEQ;;;;;;AAGI;;;;;;;;;;;;;;;;;;;;;;AAaJ;;AAAA;;AAKuB;;AAEvB;;AAAA;;;;;;AAAA;;AAAA;;AAAA;;;;;;;;;;;;;;;;AAzBR;;AACI;;AACI;;AAKA;;AACA;;AAAkB;;AAAgB;;AAClC;;AACI;;AAAsB;;AAAc;;AACpC;;AACI;;AAGA;;AACJ;;AACJ;;AACA;;AAQJ;;AACA;;AACI;;AAII;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AACJ;;AACJ;;AACJ;;;;;;AArCyC;;AAI7B;;AAAA;;AAIc;;AAAA;;AAEQ;;AAAA;;AAGd;;AAAA;;AAEJ;;AAAA;;AAKJ;;AAAA;;AAWA;;AAAA;;AAGA;;AAAA;;;;QDfCiO,yB;;;;;;;AAiET,yCAAoBzP,QAApB,EAA0DuC,OAA1D,EAA8E;AAAA;;AAAA;;AAC1E;AADgB,gBAAAvC,QAAA,GAAAA,QAAA;AAAsC,gBAAAuC,OAAA,GAAAA,OAAA;AA1D1D;;AACiB,gBAAAmN,MAAA,GAAS,IAAI,0DAAJ,EAAT;AAyD6D;AAE7E;AAzDD;;;;;sCA2DqB;AAAA;;AACjB,cAAI,CAAC,KAAKvL,KAAL,CAAWwL,gBAAZ,IAAgC,KAAKC,YAAL,KAAsB,KAAtD,IAA+D,KAAKC,QAAxE,EAAkF;AAC9E,iBAAKH,MAAL,CAAYzM,IAAZ;AACH,WAFD,MAEO;AACH,gBAAMyE,GAAG,GAAG,KAAKnF,OAAL,CAAae,IAAb,CAGV,yIAHU,EAGsB;AAC9BkF,mBAAK,EAAE,MADuB;AAE9BsH,oBAAM,EAAE,MAFsB;AAG9BvH,sBAAQ,EAAE,MAHoB;AAI9Be,uBAAS,EAAE,MAJmB;AAK9B/F,kBAAI,EAAE;AACFY,qBAAK,EAAE,KAAKA,KADV;AAEFP,wBAAQ,EAAE,KAAKyD,IAAL,CAAUC,QAAV,CAAmB1D,QAAnB,CAA4B2D,KAFpC;AAGF9C,oBAAI,EAAE,KAAK4C,IAAL,CAAUC,QAAV,CAAmB5C,SAAnB,CAA6B6C,KAHjC;AAIFwI,yBAAS,EAAE,KAAK1I,IAAL,CAAUC,QAAV,CAAmBuH,UAAnB,CAA8BtH,KAA9B,CAAoCwI,SAApC,IAAiD;AAJ1D;AALwB,aAHtB,CAAZ;;AAeA,iBAAKtP,YAAL,CACI,kBADJ,EAEIiH,GAAG,CAACqB,iBAAJ,CAAsBrG,KAAtB,CAA4B/B,SAA5B,CAAsC,UAAC+B,KAAD,EAAwB;AAC1D;AACA,kBAAIA,KAAK,CAACsG,MAAN,KAAiB,MAArB,EAA6B;AACzB,oBAAMgH,MAAM,GAA6B,OAAI,CAAC3I,IAAL,CAAUC,QAAV,CAAmBuH,UAAnB,CACpCtH,KADL;AAEA,oBAAM0I,aAAa,GACfD,MAAM,CAACD,SAAP,IAAoB,EADxB;;AAHyB,4DAKNrN,KAAK,CAAC+E,QALA;AAAA;;AAAA;AAAA;AAAA,wBAKd6C,IALc;AAMrB,wBAAMX,KAAK,GAAGsG,aAAa,CAACrG,SAAd,CACV,UAAClH,KAAD;AAAA,6BACIA,KAAK,CAACiB,IAAN,KAAe2G,IAAI,CAAC3G,IAApB,IAA4BjB,KAAK,CAACwN,QAAN,KAAmB5F,IAAI,CAAC4F,QADxD;AAAA,qBADU,CAAd;;AAIA,wBAAIvG,KAAK,IAAI,CAAb,EAAgB;AACZsG,mCAAa,CAAClG,MAAd,CAAqBJ,KAArB,EAA4B,CAA5B,EAA+BW,IAA/B;AACH,qBAFD,MAEO;AACH2F,mCAAa,CAACnG,IAAd,CAAmBQ,IAAnB;AACH;AAdoB;;AAKzB,yEAAmC;AAAA;AAUlC;AAfwB;AAAA;AAAA;AAAA;AAAA;;AAgBzB,uBAAI,CAACjD,IAAL,CAAUC,QAAV,CAAmBuH,UAAnB,CAA8BvG,QAA9B,CAAuC,MAAD,OAAC,CAAD,kBAC/B0H,MAD+B,CAAC,EAC1B;AACTD,2BAAS,EAAEE;AADF,iBAD0B,CAAvC;;AAIA,uBAAI,CAACP,MAAL,CAAYzM,IAAZ;;AACAyE,mBAAG,CAAClE,KAAJ;AACH;AACJ,aAzBD,CAFJ;AA6BH;AACJ;;;4BA3GuB;AACpB,iBAAO,KAAKxD,QAAL,CAAcuJ,OAAd,CAAsB,+BAAtB,CAAP;AACH;AAED;;;;4BACmB;AAAA;;AACf;AACA,cAAI,CAAC,KAAKlC,IAAN,IAAc,KAAKlD,KAAvB,EAA8B;AAC1B,mBAAO,KAAP;AACH;;AACD,iBACI,KAAKkD,IAAL,CAAUC,QAAV,CAAmBjD,UAAnB,IACA,CAAC,CAAC,CAAC,KAAKgD,IAAL,CAAUC,QAAV,CAAmBjD,UAAnB,CAA8BkD,KAA9B,IAAuC,EAAxC,EAA4ChC,IAA5C,CACE,UAACpB,KAAD;AAAA,mBAAWA,KAAK,CAACvF,EAAN,KAAa,OAAI,CAACuF,KAAL,CAAWvF,EAAnC;AAAA,WADF,CAFN;AAMH;AAED;;;;4BACqB;AACjB;AACA,cAAI,CAAC,KAAKyI,IAAV,EAAgB;AACZ,mBAAO,KAAP;AACH;;AACD,iBAAO,KAAKlD,KAAL,CAAWU,SAAX,CAAqB;AACxBlB,gBAAI,EAAE,KAAK0D,IAAL,CAAUC,QAAV,CAAmB3D,IAAnB,CAAwB4D,KADN;AAExB3D,oBAAQ,EAAE,KAAKyD,IAAL,CAAUC,QAAV,CAAmB1D,QAAnB,CAA4B2D,KAFd;AAGxB9C,gBAAI,EAAE,KAAK4C,IAAL,CAAUC,QAAV,CAAmB5C,SAAnB,CAA6B6C,KAA7B,IAAsC,KAAKvH,QAAL,CAAc4F,KAAd,CAAoBC;AAHxC,WAArB,CAAP;AAKH;;;4BAEsB;AACnB,cAAMsK,KAAK,GAAG,KAAKhM,KAAL,CAAWwL,gBAAX,CAA4BhL,MAA5B,CACV,UAACwL,KAAD,EAAQC,SAAR;AAAA,mBAAsBD,KAAK,IAAIC,SAAS,CAACpM,SAAV,GAAsB,CAAtB,GAA0B,CAA9B,CAA3B;AAAA,WADU,EAEV,CAFU,CAAd;AAIA,iBAAOmM,KAAK,IAAI,KAAKhM,KAAL,CAAWwL,gBAAX,CAA4B9L,MAArC,GACD,KADC,aAEEsM,KAFF,iBAEc,KAAKhM,KAAL,CAAWwL,gBAAX,CAA4B9L,MAF1C,CAAP;AAGH;AAED;;;;4BACmB;AACf;AACA,cAAI,CAAC,KAAKM,KAAV,EAAiB;AACb,mBAAO,8BAAP;AACH;;AACD,cAAMgC,KAAK,GAAG,KAAKhC,KAAL,CAAWgC,KAAzB;;AACA,cAAMI,GAAG,GAAG,KAAKvG,QAAL,CAAcqG,YAAd,CAA2BC,SAA3B,CAAqCf,IAArC,CACR,UAACa,QAAD;AAAA,mBAAcA,QAAQ,CAACxH,EAAT,KAAgBuH,KAAK,CAACgH,WAApC;AAAA,WADQ,CAAZ;;AAGA,2BAAU5G,GAAG,GAAGA,GAAG,CAAChC,IAAJ,GAAW,IAAd,GAAqB,EAAlC,SAAuC4B,KAAK,CAAC5B,IAA7C;AACH;;;;MA/D0C,2E;;;uBAAlCkL,yB,EAAyB,gJ,EAAA,mI;AAAA,K;;;YAAzBA,yB;AAAyB,2C;AAAA;AAAA;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,0F;AAAA,c;AAAA,a;AAAA,wY;AAAA;AAAA;ACnBtC;;;;AAA2B;;;;;;;;;sEDmBdA,yB,EAAyB;cALrC,uDAKqC;eAL3B;AACPnO,kBAAQ,EAAE,sBADH;AAEPC,qBAAW,EAAE,uBAFN;AAGPC,mBAAS,EAAE,CAAC,uBAAD;AAHJ,S;AAK2B,Q;;;;;;;;gBAEjC;;;gBAEA;;;gBAEA;;;gBAEA;;;;;;;;;;;;;;;;;;;;AE3BL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACMY;;AAAkF;AAAA;;AAAA;;AAAA;AAAA;;AAAlF;;AAA8I;;;;QDK7I6O,6B;;;AALb;AAAA;;AAQI;AACgB,aAAAC,UAAA,GAAsB,KAAtB;AAChB;;AACiB,aAAA5N,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AA4BpB;AAxBG;;;;;+BACW;AACP,eAAK2E,IAAL,CAAUkJ,gBAAV;AACA;;AACA,cAAI,KAAKlJ,IAAL,CAAU+B,KAAd,EAAqB;AACjB,iBAAK1G,KAAL,CAAWO,IAAX,CAAgB;AAAEC,kBAAI,EAAE,MAAR;AAAgBsE,kBAAI,EAAE;AAAtB,aAAhB;AACH,WAFD,MAEO,IAAI,KAAKgJ,SAAT,EAAoB;AACvB,iBAAKA,SAAL,CAAeC,aAAf,CAA6BC,cAA7B,CAA4C;AACxCC,sBAAQ,EAAE,QAD8B;AAExCC,mBAAK,EAAE,OAFiC;AAGxCC,oBAAM,EAAE;AAHgC,aAA5C;AAKH;AACJ;AAED;;;;mCACe;AACX,eAAKnO,KAAL,CAAWO,IAAX,CAAgB;AAAEC,gBAAI,EAAE,UAAR;AAAoBsE,gBAAI,EAAE;AAA1B,WAAhB;AACH;AAED;;;;oCACgB;AACZ,eAAK9E,KAAL,CAAWO,IAAX,CAAgB;AAAEC,gBAAI,EAAE,OAAR;AAAiBsE,gBAAI,EAAE;AAAvB,WAAhB;AACH;;;;;;;uBAjCQ6I,6B;AAA6B,K;;;YAA7BA,6B;AAA6B,0C;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACX1C;;AACI;;AAAyB;AAAA,mBAAY,IAAArC,IAAA,EAAZ;AAAkB,WAAlB;;AACrB;;AACI;;AACJ;;AACA;;AACI;;AACA;;AAAA;;AAAyE;;AAC7E;;AACJ;;AACJ;;;;AATU;;AAAA;;AAEkB;;AAAA;;AAG+B;;AAAA;;;;;;;;;sEDK9CqC,6B,EAA6B;cALzC,uDAKyC;eAL/B;AACP/O,kBAAQ,EAAE,qBADH;AAEPC,qBAAW,EAAE,uBAFN;AAGPC,mBAAS,EAAE,CAAC,uBAAD;AAHJ,S;AAK+B,Q;;gBAErC;;;gBAEA;;;gBAEA;;;gBAEA,uD;iBAAU,W,EAAa;AAAE,sBAAQ;AAAV,W;;;;;;;;;;;;;;;;;;;;AEnB5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACYY;;;;;;;;AAEI,6FAAoB,SAApB,EAAoB,IAApB,EAAoB,MAApB,EAAoB,OAApB,EAAoB,QAApB,EAAoB,aAApB;;;;;;;;;;;QDQHsP,oC;;;;;;;AAwCT,oDACY9Q,QADZ,EAEYwC,WAFZ,EAGqCC,KAHrC,EAGoE;AAAA;;AAAA;;AAEhE;AAJQ,gBAAAzC,QAAA,GAAAA,QAAA;AACA,gBAAAwC,WAAA,GAAAA,WAAA;AACyB,gBAAAC,KAAA,GAAAA,KAAA;AA1CrC;;AACiB,gBAAAC,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AACjB;;AACO,gBAAAqO,SAAA,GAA4B,EAA5B;;AA0CH,YAAI,CAAC,QAAKtO,KAAL,CAAW4E,IAAhB,EAAsB;AAClB,kBAAKrH,QAAL,CAAcqD,WAAd,CAA0B,wBAA1B;;AACA,kBAAKb,WAAL,CAAiBgB,KAAjB;AACH;;AAN+D;AAOnE;AA5CD;;;;;mCA8Ce;AAAA;;AACX;AACA,cAAI,KAAKf,KAAL,CAAW4E,IAAX,CAAgBC,QAAhB,CAAyByD,KAA7B,EAAoC;AAChC,iBAAKtK,YAAL,CACI,WADJ,EAEI,KAAKgC,KAAL,CAAW4E,IAAX,CAAgBC,QAAhB,CAAyByD,KAAzB,CAA+BL,YAA/B,CAA4C/J,SAA5C,CAAsD,UAACoK,KAAD,EAAW;AAC7D;AACA,kBAAI,CAACA,KAAD,IAAUA,KAAK,CAAClH,MAAN,IAAgB,CAA9B,EAAiC;AAC7B,uBAAI,CAACrB,WAAL,CAAiBgB,KAAjB;AACH;AACJ,aALD,CAFJ;AASH;;AACD,eAAKuN,SAAL,GAAiB,KAAKtO,KAAL,CAAW4E,IAAX,CAAgBC,QAAhB,CAAyByD,KAAzB,CAA+BxD,KAA/B,CAAqCrD,GAArC,CAAyC,UAACoG,IAAD;AAAA,mBAAU,IAAI,+FAAJ,CAAiBA,IAAjB,CAAV;AAAA,WAAzC,CAAjB;AACH;;;4BA3De;AACZ,iBAAO,KAAK7H,KAAL,CAAW4E,IAAX,IAAmB,KAAK5E,KAAL,CAAW4E,IAAX,CAAgBC,QAAhB,CAAyBnD,KAA5C,GACD,KAAK1B,KAAL,CAAW4E,IAAX,CAAgBC,QAAhB,CAAyBnD,KAAzB,CAA+BoD,KAD9B,GAEA,EAFP;AAGH;AACD;;;;4BACwB;AACpB,cAAM5D,IAAI,GAAG,kCAAK,CAAC,KAAKlB,KAAL,CAAWkB,IAAZ,CAAlB;AACA,iBAAOA,IAAI,CAACyB,MAAL,CAAY,QAAZ,CAAP;AACH;AAED;;;;4BACqB;AACjB,iBAAO,KAAK3C,KAAL,CAAW4E,IAAX,CAAgBC,QAAhB,CAAyByD,KAAhC;AACH;AAED;;;;4BACqB;AACjB,iBAAO,KAAKgG,SAAL,CAAepM,MAAf,CAAsB,UAAC8F,MAAD,EAASH,IAAT;AAAA,mBAAkBG,MAAM,GAAGH,IAAI,CAACG,MAAL,GAAcH,IAAI,CAACuD,UAA9C;AAAA,WAAtB,EAAgF,CAAhF,CAAP;AACH;AAED;;;;4BACiB;AAAA;;AACb;AACA,cAAI,CAAC,KAAK1J,KAAN,IAAe,CAAC,KAAKA,KAAL,CAAWgC,KAA/B,EAAsC;AAClC,mBAAO,KAAP;AACH;;AACD,cAAMC,QAAQ,GAAG,KAAKpG,QAAL,CAAcqG,YAAd,CAA2BC,SAA3B,CAAqCf,IAArC,CACb,UAACgB,GAAD;AAAA,mBAASA,GAAG,CAAC3H,EAAJ,KAAW,OAAI,CAACuF,KAAL,CAAWgC,KAAX,CAAiBgH,WAArC;AAAA,WADa,KAEZ;AAAE1G,oBAAQ,EAAE;AAAZ,WAFL;AAGA,iBAAOL,QAAQ,CAACK,QAAhB;AACH;;;;MAtCqD,2E;;;uBAA7CqK,oC,EAAoC,gJ,EAAA,sI,EAAA,gEA2CjC,wEA3CiC,C;AA2ClB,K;;;YA3ClBA,oC;AAAoC,+C;AAAA;AAAA;AAAA,O;AAAA,0F;AAAA,e;AAAA,a;AAAA,mS;AAAA;AAAA;ACtBjD;;AACI;;AAAA;;AAAgF;;AAChF;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AAAc;;AAAM;;AAAmC;;AAAQ;;AAAG;;AAAM;;AAAmB;;AAC/F;;AACA;;AACI;;AAOJ;;AACA;;AACI;;AAAO;;AAAY;;AACnB;;AAAmB;;;;AAAwC;;AAC/D;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AAAmB;AAAA,mBAAU,IAAApO,KAAA;AAAA,sBAAqB;AAArB,cAAV;AAAwC,WAAxC;;AAAnB;;AAA2G;;AAC/G;;AACJ;;;;AA3BkB;;AAAA;;AAMc;;AAAA;;AAAoD;;AAAA;;AAIpE;;AAAA;;AASe;;AAAA;;;;;;;;;;sEDAlBoO,oC,EAAoC;cALhD,uDAKgD;eALtC;AACPxP,kBAAQ,EAAE,0BADH;AAEPC,qBAAW,EAAE,yCAFN;AAGPC,mBAAS,EAAE,CAAC,yCAAD;AAHJ,S;AAKsC,Q;;;;;;;;kBA2CxC,oD;mBAAO,wE;;;;;gBAzCX;;;;;;;;;;;;;;;;;;;;AExBL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;ACGY;;;;;;;;AAEI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCe;;;;;;;;AAxBvB;;AACI;;AACI;;AAAA;;AAGA;;AACA;;AACI;;AAAA;;AAMC;;AACL;;AACJ;;AACA;;AACI;;AAAA;;AAOe;;AACf;;AAAA;;AACA;;AACI;;AAAA;;AAAA;;AAOA;;AAAA;;AAEA;;AACA;;AAAA;;AACI;;AACJ;;AAAA;;AACJ;;AACJ;;AACJ;;;;;;AA1CsD;;AAmB1C;;AAAA;;AAKiB;;AAAA;;;;;;;;;;;QDpBxBwP,6B;;;AA8BT,6CACYhR,QADZ,EAEqCyC,KAFrC,EAEoE;AAAA;;AADxD,aAAAzC,QAAA,GAAAA,QAAA;AACyB,aAAAyC,KAAA,GAAAA,KAAA;AA/BrC;;AACiB,aAAAC,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AACjB;;AACO,aAAAgG,KAAA,GAAyB,EAAzB;AACP;;AACO,aAAAuI,KAAA,GAAyB,EAAzB;AACP;;AACO,aAAAC,WAAA,GAA+B,EAA/B;AACP;;AACO,aAAA7J,IAAA,GAA2B,EAA3B;AACP;;AACO,aAAA8J,iBAAA,GAAsC,EAAtC;AACP;;AACO,aAAAC,YAAA,GAAuB,CAAvB;AAmBH;AAjBJ;;;;;mCAmBe;AACX,cAAMC,SAAS,GAAG,KAAK5O,KAAL,CAAWgG,WAAX,CAAuBlB,KAAvB,CAA6B9B,MAA7B,CACd,UAAC6L,IAAD;AAAA,mBAAuBA,IAAI,CAACpO,IAAL,KAAc,UAArC;AAAA,WADc,CAAlB;;AAGA,eAAKwF,KAAL,GAAa2I,SAAS,CAAC1M,MAAV,CAAiB,UAACT,GAAD,EAAMoN,IAAN,EAAe;AACzCpN,eAAG,CAACoN,IAAI,CAACnN,KAAN,CAAH,GAAkBmN,IAAI,CAACC,OAAvB;AACA,mBAAOrN,GAAP;AACH,WAHY,EAGV,EAHU,CAAb;AAIA,eAAK+M,KAAL,GAAa,KAAKxO,KAAL,CAAWsD,QAAX,CAAoBwB,KAApB,CAA0B5C,MAA1B,CAAiC,UAACT,GAAD,EAAM8B,KAAN,EAA+B;AACzE9B,eAAG,CAAC8B,KAAK,CAACE,WAAP,CAAH,GAAyBF,KAAK,CAACwL,WAA/B;AACA,mBAAOtN,GAAP;AACH,WAHY,EAGV,EAHU,CAAb;AAIA,eAAKuN,kBAAL;AACH;;;iCAEY;AAAA;;AACT,eAAKpN,UAAL,CAAgB0J,OAAhB,CAAwB,UAAC5J,KAAD;AAAA,mBAAW,OAAI,CAACkD,IAAL,CAAUlD,KAAK,CAACvF,EAAhB,EAAoB2R,gBAApB,EAAX;AAAA,WAAxB;AACA;;AACA,cAAI,KAAKmB,QAAT,EAAmB;AACf;AACA,gBAAMhJ,KAAK,GAAG,KAAKjG,KAAL,CAAWgG,WAAX,CAAuBlB,KAAvB,CAA6B9B,MAA7B,CACV,UAAC6L,IAAD;AAAA,qBAAuBA,IAAI,CAACpO,IAAL,KAAc,UAArC;AAAA,aADU,CAAd;;AAGA,gBAAMyO,SAAS,GAAG,KAAKtN,UAAL,CAAgBH,GAAhB,CACd,UAACC,KAAD;AAAA,qBACK;AACGyN,sBAAM,EAAE,OAAI,CAAC5R,QAAL,CAAc4F,KAAd,CAAoBC,OAApB,CAA4BtB,IADvC;AAEGrB,oBAAI,EAAE,UAFT;AAGGqO,uBAAO,EAAE,OAAI,CAAClK,IAAL,CAAUlD,KAAK,CAACvF,EAAhB,EAAoB0I,QAApB,CAA6BoB,KAA7B,CAAmCnB,KAH/C;AAIGpD,qBAAK,EAAEA,KAAK,CAACvF,EAJhB;AAKG+E,oBAAI,EAAE,kCAAK,GAAGsG,OAAR;AALT,eADL;AAAA,aADc,CAAlB;;AAUA,iBAAKxH,KAAL,CAAWgG,WAAX,CAAuBH,QAAvB,CAAgCI,KAAK,CAAC6G,MAAN,CAAaoC,SAAb,EAAwBlM,MAAxB,CAA+B,UAAC6L,IAAD;AAAA,qBAAUA,IAAI,CAACC,OAAf;AAAA,aAA/B,CAAhC;;AACA,gBAAM7H,MAAM,GAAG,KAAKjH,KAAL,CAAWsD,QAAX,CAAoBwB,KAApB,CAA0BrD,GAA1B,CACX,UAAC8B,KAAD;AAAA,qBACI,IAAI,iGAAJ,CAAkB,MAAD,OAAC,CAAD,kBACVA,KADU,CAAC,EACN;AACRwL,2BAAW,EAAE,OAAI,CAACnK,IAAL,CAAUrB,KAAK,CAACE,WAAhB,EAA6BoB,QAA7B,CAAsC9I,IAAtC,CAA2C+I;AADhD,eADM,CAAlB,CADJ;AAAA,aADW,CAAf;;AAOA,iBAAK9E,KAAL,CAAWsD,QAAX,CAAoBuC,QAApB,CAA6BoB,MAA7B;;AACA,iBAAKhH,KAAL,CAAWO,IAAX,CAAgB;AAAE+F,oBAAM,EAAE;AAAV,aAAhB;AACH;AACJ;AAED;;;;6CAC0B;AAAA,sDACF,KAAK3E,UADH;AAAA;;AAAA;AACtB,mEAAqC;AAAA,kBAA1BF,KAA0B;AACjC,mBAAKkD,IAAL,CAAUlD,KAAK,CAACvF,EAAhB,IAAsB,IAAI,wDAAJ,CAAc;AAChC8J,qBAAK,EAAE,IAAI,0DAAJ,CAAgB,KAAKA,KAAL,CAAWvE,KAAK,CAACvF,EAAjB,KAAwB,EAAxC,CADyB;AAEhCJ,oBAAI,EAAE,IAAI,0DAAJ,CAAgB,KAAKyS,KAAL,CAAW9M,KAAK,CAACvF,EAAjB,KAAwB,EAAxC;AAF0B,eAAd,CAAtB;AAIH;AANqB;AAAA;AAAA;AAAA;AAAA;AAOzB;;;4BAxEoB;AACjB,iBAAO,KAAK6D,KAAL,CAAWgB,MAAX,IAAqB,EAA5B;AACH;;;4BAEqB;AAClB,iBAAO,KAAK4D,IAAL,CAAU,KAAKhD,UAAL,CAAgB,KAAK+M,YAArB,EAAmCxS,EAA7C,CAAP;AACH;AAED;;;;4BACmB;AAAA;;AACf,iBAAO,KAAKyF,UAAL,CAAgBM,MAAhB,CAAuB,UAACyE,KAAD,EAAQjF,KAAR;AAAA,mBAAkBiF,KAAK,IAAI,OAAI,CAAC/B,IAAL,CAAUlD,KAAK,CAACvF,EAAhB,EAAoBwK,KAA/C;AAAA,WAAvB,EAA6E,IAA7E,CAAP;AACH;;;;;;;uBA5BQ4H,6B,EAA6B,gJ,EAAA,gEAgC1B,wEAhC0B,C;AAgCX,K;;;YAhClBA,6B;AAA6B,+C;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,snB;AAAA;AAAA;ACvB1C;;AACI;;AACI;;AAAe;AAAA;AAAA;;AACX;;AAIJ;;AACJ;;AACA;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACA;;AAAkB;;AAAmD;;AACzE;;AACA;;AA2CJ;;AACJ;;AACA;;AACI;;AACI;;AAAmB;AAAA,mBAAU,IAAAa,MAAA,EAAV;AAAkB,WAAlB;;AAAnB;;AAEA;;AACJ;;AACJ;;;;AApEuB;;AAAA;;AAEP;;AAAA;;AAME;;AAAA;;AASJ;;AAAA;;;;;;;;;sEDIDb,6B,EAA6B;cALzC,uDAKyC;eAL/B;AACP1P,kBAAQ,EAAE,0BADH;AAEPC,qBAAW,EAAE,yCAFN;AAGPC,mBAAS,EAAE,CAAC,yCAAD;AAHJ,S;AAK+B,Q;;;;;;kBAgCjC,oD;mBAAO,wE;;;;;gBA9BX;;;;;;;;;;;;;;;;;;;;AEzBL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACKQ;;;;;;AAAuB;;;;;;AAD3B;;AACI;;AACA;;AACI;;AACJ;;AACJ;;;;;;AAJc;;AAAA;;AAEH;;AAAA;;;;;;;;;;;;;;;;;;;;AAIf;;AACI;;AAAA;;AAAqF;;AACrF;;AAAiC;AAAA;;AAAA;;AAAA;AAAA;;AAAoB;;AAAoB;;AAC7E;;;;;;AADyD;;AAAA;;;;;;AAGrD;;AACI;;AACI;;AACI;;AACJ;;AACA;;AAAkB;;AAAa;;AACnC;;AACJ;;;;;;AAF0B;;AAAA;;;;ADHvB,QAAMsQ,gBAAgB,GAAG;AAC5BhC,YAAM,EAAE,MADoB;AAE5BtH,WAAK,EAAE,MAFqB;AAG5Bc,eAAS,EAAE,mBAHiB;AAI5Bf,cAAQ,EAAE;AAJkB,KAAzB;;QAYMwJ,qB;;;;;;;AA0BT,qCACYxP,OADZ,EAEqCE,KAFrC,EAE4D;AAAA;;AAAA;;AAExD;AAHQ,gBAAAF,OAAA,GAAAA,OAAA;AACyB,gBAAAE,KAAA,GAAAA,KAAA;AA3BrC;;AACiB,gBAAAC,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AA0B2C;AAG3D;AAzBD;;;;;;AA0BA;;;iCAGgB;AACZ,eAAKA,KAAL,CAAWO,IAAX,CAAgB;AAAE+F,kBAAM,EAAE;AAAV,WAAhB;AACH;;;4BA9Be;AACZ,iBAAO,CAAC,KAAKvG,KAAL,GAAa,KAAKA,KAAL,CAAWqC,KAAxB,GAAgC,IAAjC,KAA0C,SAAjD;AACH;AAED;;;;4BACkB;AACd,iBAAO,CAAC,KAAKrC,KAAL,GAAa,KAAKA,KAAL,CAAWuP,OAAxB,GAAkC,IAAnC,KAA4C,eAAnD;AACH;AAED;;;;4BACiB;AACb,iBAAO,CAAC,KAAKvP,KAAL,GAAa,KAAKA,KAAL,CAAWwP,MAAxB,GAAiC,IAAlC,KAA2C,IAAlD;AACH;AAED;;;;4BACe;AACX,iBAAO,CAAC,KAAKxP,KAAL,GAAa,KAAKA,KAAL,CAAWyP,IAAxB,GAA+B,IAAhC,KAAyC,IAAhD;AACH;;;;MAxBsC,2E;;;uBAA9BH,qB,EAAqB,sI,EAAA,gEA4BlB,wEA5BkB,C;AA4BH,K;;;YA5BlBA,qB;AAAqB,oC;AAAA;AAAA;AAAA,O;AAAA,0F;AAAA,c;AAAA,a;AAAA,qX;AAAA;AAAA;AC9BlC;;AACI;;AAAqB;;AAAwB;;AACjD;;AACA;;AACI;;AAMJ;;AACA;;AAIA;;;;;;AAdyB;;AAAA;;AAGH;;AAAA,yFAAiC,UAAjC,EAAiC,GAAjC;;AAOF;;AAAA;;;;;;;;;sEDmBPA,qB,EAAqB;cALjC,uDAKiC;eALvB;AACPzQ,kBAAQ,EAAE,eADH;AAEPC,qBAAW,EAAE,gCAFN;AAGPC,mBAAS,EAAE,CAAC,gCAAD;AAHJ,S;AAKuB,Q;;;;;;kBA4BzB,oD;mBAAO,wE;;;;;gBA1BX;;;;;;;;;;;;;;;;;;;;AEhCL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;ACOY;;AAKI;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAGA;;AACI;;AAAkB;;AAA8B;;AAChD;;AACI;;AACJ;;AACA;;AAAmB;;;;AAAgD;;AACvE;;AACJ;;;;;;AAZI,sJAAsC,aAAtC,EAAsC,mFAAtC;;AAMsB;;AAAA;;AAEd;;AAAA;;AAEe;;AAAA;;;;;;AAd/B;;AACI;;AAgBJ;;;;;;AAdQ;;AAAA;;;;;;AANhB;;AACI;;AACI;;AAAoB;;AAAO;;AAC3B;;AAkBJ;;AACA;;AACI;;AAAmB;;AAAM;;AACzB;;AACI;;;;AACJ;;AACJ;;AACA;;AACI;;AAAyB;;AAAY;;AACrC;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AAAmB;;AAAM;;AACzB;;AACI;;AACJ;;AACJ;;AACJ;;;;;;;;AArCyC;;AAAA,+FAAqC,UAArC,EAAqC,GAArC;;AAmBlB;;AAAA;;AAGX;;AAAA;;AAGW;;AAAA;;AAGX;;AAAA;;AAGW;;AAAA;;AAGX;;AAAA;;;;;;;;AAIZ;;AAA+D;AAAA;;AAAA;;AAAA;AAAA;;AAC3D;;AACJ;;;;;;AAEI;;AACI;;AACJ;;;;QDrCS2Q,+B;;;AA6CT,+CAAoBnS,QAApB,EAA0DuC,OAA1D,EAA8E;AAAA;;AAA1D,aAAAvC,QAAA,GAAAA,QAAA;AAAsC,aAAAuC,OAAA,GAAAA,OAAA;AAAsB;AAzChF;;;;;;AA2CA;mCACkByD,K,EAAsB;AACpC3F,sBAAY,CAAC+R,OAAb,CAAqB,sBAArB,EAA6CC,IAAI,CAACC,SAAL,CAAetM,KAAK,CAACqC,MAAN,EAAf,CAA7C;AACAhI,sBAAY,CAAC+R,OAAb,CAAqB,wBAArB,EAA+CC,IAAI,CAACC,SAAL,CAAe,KAAKxP,OAAL,CAAauF,MAAb,EAAf,CAA/C;AACAhI,sBAAY,CAAC+R,OAAb,CAAqB,gBAArB,YAA0C,KAAKtP,OAAL,CAAaa,IAAvD;AACH;AAED;;;;8CAC6B;AACzB,eAAKpB,OAAL,CAAae,IAAb,CAAkB,4FAAlB,EAAyC;AACrCC,gBAAI,EAAE;AACFT,qBAAO,EAAE,KAAKA,OADZ;AAEFkE,2BAAa,EAAE;AAFb;AAD+B,WAAzC;AAMH;;;4BAzDgB;AAAA;;AACb,iBAAO,KAAKlE,OAAL,CAAaiD,QAAb,CAAsBN,MAAtB,CAA6B,UAACO,KAAD;AAAA,mBAAWA,KAAK,CAACE,WAAN,KAAsB,OAAI,CAACpD,OAAL,CAAaqB,KAAb,CAAmBvF,EAApD;AAAA,WAA7B,CAAP;AACH;AAED;;;;4BACgB;AACZ,cAAIyO,KAAK,GAAG,CAAZ;AACA,eAAK3D,MAAL,CAAYqE,OAAZ,CAAoB,UAAC/H,KAAD;AAAA,mBAAYqH,KAAK,IAAIrH,KAAK,CAACqH,KAA3B;AAAA,WAApB;AACA,iBAAOA,KAAP;AACH;AAED;;;;4BACsB;AAClB,iBAAO,CAAC,KAAK3D,MAAL,CAAY7F,MAAZ,GAAqB,KAAK6F,MAAL,CAAY,CAAZ,EAAe8H,WAApC,GAAkD,EAAnD,KAA0D,kBAAjE;AACH;AAED;;;;4BACiB;AAAA;;AACb,cAAMpL,QAAQ,GAAG,KAAKpG,QAAL,CAAcqG,YAAd,CAA2BC,SAA3B,CAAqCf,IAArC,CACb,UAACgB,GAAD;AAAA,mBAASA,GAAG,CAAC3H,EAAJ,KAAW,OAAI,CAACkE,OAAL,CAAaqB,KAAb,CAAmBgC,KAAnB,CAAyBgH,WAA7C;AAAA,WADa,KAEZ;AAAE1G,oBAAQ,EAAE;AAAZ,WAFL;AAGA,iBAAOL,QAAQ,CAACK,QAAhB;AACH;AAED;;;;4BACgB;AAAA;;AACZ,cAAM6K,IAAI,GAAG,KAAKxO,OAAL,CAAa4F,KAAb,CAAmBnD,IAAnB,CACT,UAAC+L,IAAD;AAAA,mBACIA,IAAI,CAACpO,IAAL,KAAc,UAAd,IACAoO,IAAI,CAACnN,KAAL,KAAe,OAAI,CAACrB,OAAL,CAAaqB,KAAb,CAAmBvF,EADlC,IAEA0S,IAAI,CAACM,MAAL,KAAgB,OAAI,CAAC9O,OAAL,CAAayP,OAAb,CAAqBhO,IAHzC;AAAA,WADS,CAAb;AAMA,iBAAO+M,IAAI,GAAGA,IAAI,CAACC,OAAR,GAAkB,YAA7B;AACH;AAED;;;;4BACkB;AACd,iBAAO,KAAKzO,OAAL,CAAa0P,MAAb,KAAwB,MAAxB,IAAkC,KAAK1P,OAAL,CAAa2P,QAAtD;AACH;;;;;;;uBA3CQN,+B,EAA+B,gJ,EAAA,mI;AAAA,K;;;YAA/BA,+B;AAA+B,uC;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,swB;AAAA;AAAA;ACb5C;;AACI;;AACJ;;AACA;;AAyCA;;AAGA;;;;AA5CqB;;AAAA;;AAyCyB;;AAAA;;;;;;;;;;sED/BjCA,+B,EAA+B;cAL3C,uDAK2C;eALjC;AACP7Q,kBAAQ,EAAE,kBADH;AAEPC,qBAAW,EAAE,2BAFN;AAGPC,mBAAS,EAAE,CAAC,2BAAD;AAHJ,S;AAKiC,Q;;;;;;;;gBAEvC;;;;;;;;;;;;;;;;;;;;AEfL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;ACGA;;AACI;;AACI;;AAAkB;;AAAK;;AACvB;;AACI;;AACJ;;AACA;;AACI;;AAKI;;AACJ;;AACA;;AAMI;;AACJ;;AACJ;;AACJ;;AACA;;AACI;;AAAsB;;AAAY;;AAClC;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AAAwB;;AAAM;;AAC9B;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AAAsB;;AAAI;;AAC1B;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AAAsB;;AAAS;;AAC/B;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AAAwB;;AAAW;;AACnC;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AAAuB;;AAAU;;AACjC;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AAA0B;;AAAa;;AACvC;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AAAmB;;AAAM;;AACzB;;;;AACJ;;AACJ;;;;;;AArEuB;;AAAA;;AAGX;;AAAA;;AAMI;;AAAA;;AAEU;;AAAA;;AAIV;;AAAA,0JAAsC,MAAtC,EAAsC,mFAAtC,EAAsC,2DAAtC;;AAIU;;AAAA;;AAIH;;AAAA;;AAGX;;AAAA;;AAGW;;AAAA;;AAGX;;AAAA;;AAGW;;AAAA;;AAGX;;AAAA;;AAGW;;AAAA;;AAGX;;AAAA;;AAGW;;AAAA;;AAGX;;AAAA;;AAGW;;AAAA;;AAGX;;AAAA;;AAGW;;AAAA;;AAMA;;AAAA;;AAEsB;;AAAA;;;;;;;;AAG7C;;AAAmD;AAAA;;AAAA;;AAAA;AAAA;;AAC/C;;AACJ;;;;QD7DakR,8B;;;AA4CT,8CAAoBnQ,OAApB,EAAwC;AAAA;;AAApB,aAAAA,OAAA,GAAAA,OAAA;AAAsB;AAxC1C;;;;;sCA0CqB;AACjB,eAAKA,OAAL,CAAae,IAAb,CAAkB,4FAAlB,EAAyC;AACrCC,gBAAI,EAAE;AACFT,qBAAO,EAAE,KAAKA;AADZ;AAD+B,WAAzC;AAKH;;;4BA/CqB;AAClB,iBAAO,KAAKA,OAAL,CAAauB,UAAb,CAAwBH,GAAxB,CAA4B,UAACC,KAAD;AAAA,mBAAWA,KAAK,CAACI,IAAjB;AAAA,WAA5B,EAAmDH,IAAnD,CAAwD,IAAxD,CAAP;AACH;AACD;;;;4BACsB;AAClB,iBAAO,KAAKtB,OAAL,GAAe,oGAAiB,KAAKA,OAAL,CAAac,QAA9B,CAAf,GAAyD,QAAhE;AACH;AACD;;;;4BACwB;AACpB,iBAAO,kCAAK,CAAC,KAAKd,OAAL,CAAaa,IAAd,CAAL,CAAyByB,MAAzB,CAAgC,qBAAhC,CAAP;AACH;AACD;;;;4BACsB;AAClB,iBAAO,kCAAK,CAAC,KAAKtC,OAAL,CAAaa,IAAd,CAAL,CACFwB,GADE,CACE,KAAKrC,OAAL,CAAac,QADf,EACyB,GADzB,EAEFwB,MAFE,CAEK,qBAFL,CAAP;AAGH;AACD;;;;4BACuB;AACnB,iBAAO,KAAKtC,OAAL,CAAa0C,SAAb,CAAuBtB,GAAvB,CAA2B,UAACyO,MAAD;AAAA,mBAAYA,MAAM,CAACpO,IAAnB;AAAA,WAA3B,EAAoDH,IAApD,CAAyD,IAAzD,CAAP;AACH;AAED;;;;4BACqB;AAAA,sCACO,KAAKtB,OAAL,CAAa+L,UADpB;AAAA,cACT3J,GADS,yBACTA,GADS;AAAA,cACJ6J,MADI,yBACJA,MADI;AAEjB;;AACA,cAAI,CAACA,MAAL,EAAa;AACT,mBAAO,iBAAP;AACH;;AACD,cAAM6D,OAAO,GAAG,iGAAmBrN,IAAnB,CAAwB,UAACG,CAAD;AAAA,mBAAOA,CAAC,CAACuJ,WAAF,iBAAuBF,MAAvB,CAAP;AAAA,WAAxB,CAAhB;AACA,cAAMpL,IAAI,GAAG,kCAAK,CAACuB,GAAD,CAAL,CAAWE,MAAX,CAAkB,aAAlB,CAAb;AACA,2BAAUwN,OAAV,oBAA2BjP,IAA3B;AACH;AAED;;;;4BACkB;AACd,iBAAO,KAAKb,OAAL,CAAa0P,MAAb,KAAwB,MAAxB,IAAkC,KAAK1P,OAAL,CAAa2P,QAAtD;AACH;;;;;;;uBA1CQC,8B,EAA8B,mI;AAAA,K;;;YAA9BA,8B;AAA8B,sC;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,82B;AAAA;AAAA;ACf3C;;AACI;;AACJ;;AACA;;AAuEA;;;;AAvEqB;;AAAA;;AAuEE;;AAAA;;;;;;;;;;sED3DVA,8B,EAA8B;cAL1C,uDAK0C;eALhC;AACPpR,kBAAQ,EAAE,iBADH;AAEPC,qBAAW,EAAE,0BAFN;AAGPC,mBAAS,EAAE,CAAC,0BAAD;AAHJ,S;AAKgC,Q;;;;;;gBAEtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEbG;;AACI;;AAGJ;;;;;;;;AAJoC;;AAE5B;;AAAA;;;;;;;;;;;;;;AAGR;;AACI;;AAGJ;;;;AAFQ;;AAAA;;;;;;;;AAMZ;;AACI;;AACI;;AACJ;;AACA;;AACI;;AAAkD;AAAA;;AAAA;;AAAA;AAAA;;AAA+B;;AACrF;;AACA;;AACI;;AACJ;;AACA;;AACI;;AACJ;;AACJ;;;;;;AAXyB;;AAAA;;AAGa;;AAAA;;AAGZ;;AAAA;;AAGO;;AAAA;;;;;;AA+BjC;;AACI;;AACI;;AACI;;AACJ;;AACA;;AAAkB;;AAAa;;AACnC;;AACJ;;;;;;AAF0B;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;QC1CjBqR,4B;;;;;;;AAmBT,4CACY7S,QADZ,EAEYwC,WAFZ,EAGYD,OAHZ,EAIqCE,KAJrC,EAImE;AAAA;;AAAA;;AAE/D;AALQ,gBAAAzC,QAAA,GAAAA,QAAA;AACA,gBAAAwC,WAAA,GAAAA,WAAA;AACA,gBAAAD,OAAA,GAAAA,OAAA;AACyB,gBAAAE,KAAA,GAAAA,KAAA;AAtBrC;;AACiB,gBAAAC,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AAGjB;;AACQ,gBAAAoQ,SAAA,GAAY,UAACvB,OAAD;AAAA,iBAAa,UAACnO,GAAD,EAAS;AACtC,oBAAKpD,QAAL,CAAcqD,WAAd,WAA6BkO,OAA7B,sBAAgDnO,GAAG,CAACmO,OAAJ,IAAenO,GAA/D;;AACA,oBAAK2P,UAAL,CAAgB,IAAhB;AACH,WAHmB;AAAA,SAAZ;;AAiB2D;AAGlE;AAhBD;;;;;mCAkBkBnS,K,EAAe;AAC7B,eAAK+B,OAAL,GAAe/B,KAAf;AACA,eAAK4B,WAAL,CAAiBI,YAAjB,GAAgC,CAAC,CAAC,KAAKD,OAAvC;AACH;;;wCAEsB;AAAA;;AACnB,eAAKoQ,UAAL,CAAgB,sBAAhB;;AACA,eAAK/S,QAAL,CAAcgT,QAAd,CAAuBC,MAAvB,CAA8B,KAAKnQ,OAAL,CAAalE,EAA3C,EAA+C;AAC3CsU,mBAAO,EAAE,EADkC;AAE3CpH,mBAAO,EAAE,KAAKhJ,OAAL,CAAaqB,KAAb,CAAmBvF;AAFe,WAA/C,EAGGP,IAHH,CAGQ,YAAM;AACV,mBAAI,CAAC2B,QAAL,CAAcmD,aAAd,CAA4B,mBAA5B;;AACA,mBAAI,CAACL,OAAL,CAAaqQ,eAAb,CAA6B,OAAI,CAACrQ,OAAL,CAAaqB,KAAb,CAAmBvF,EAAhD,IAAsD,UAAtD;;AACA,mBAAI,CAACmU,UAAL,CAAgB,IAAhB;;AACA,mBAAI,CAACrQ,KAAL,CAAWO,IAAX,CAAgB;AAAE+F,oBAAM,EAAE,QAAV;AAAoBvB,sBAAQ,EAAE;AAA9B,aAAhB;AACH,WARD,EAQG,KAAKqL,SAAL,CAAe,6BAAf,CARH;AASH;;;yCAEuB;AAAA;;AACpB,eAAKC,UAAL,CAAgB,sBAAhB;;AACA,eAAK/S,QAAL,CAAcgT,QAAd,CAAuBI,OAAvB,CAA+B,KAAKtQ,OAAL,CAAalE,EAA5C,EAAgD;AAC5CyU,sBAAU,EAAE,KAAKvQ,OAAL,CAAalE,EADmB;AAE5C8F,qBAAS,EAAE,KAAK5B,OAAL,CAAa4B,SAAb,CAAuBiB,KAFU;AAG5C2N,mBAAO,EAAE,KAAKxQ,OAAL,CAAawQ,OAHsB;AAI5C9H,iBAAK,EAAEU,IAAI,CAACqH,KAAL,CAAW,KAAKzQ,OAAL,CAAaa,IAAb,GAAoB,IAA/B,CAJqC;AAK5CuB,eAAG,EAAEgH,IAAI,CAACqH,KAAL,CAAW,KAAKzQ,OAAL,CAAaa,IAAb,GAAoB,IAA/B,IAAuC,KAAKb,OAAL,CAAac,QAAb,GAAwB,EALxB;AAM5CkI,mBAAO,EAAE,KAAKhJ,OAAL,CAAaqB,KAAb,CAAmBvF;AANgB,WAAhD,EAOGP,IAPH,CAOQ,YAAM;AACV,mBAAI,CAAC2B,QAAL,CAAcmD,aAAd,CAA4B,mBAA5B;;AACA,mBAAI,CAACL,OAAL,CAAaqQ,eAAb,CAA6B,OAAI,CAACrQ,OAAL,CAAaqB,KAAb,CAAmBvF,EAAhD,IAAsD,UAAtD;;AACA,mBAAI,CAACmU,UAAL,CAAgB,IAAhB;;AACA,mBAAI,CAACrQ,KAAL,CAAWO,IAAX,CAAgB;AAAE+F,oBAAM,EAAE,QAAV;AAAoBvB,sBAAQ,EAAE;AAA9B,aAAhB;AACH,WAZD,EAYG,KAAKqL,SAAL,CAAe,6BAAf,CAZH;AAaH;AAED;;;;+CAC8B;AAAA;;AAC1B,cAAMpL,GAAG,GAAG,KAAKnF,OAAL,CAAae,IAAb,CACR,4FADQ,EACa,gCAEd,uFAFc,GAEE;AACnBC,gBAAI,EAAE;AACFuB,mBAAK,EAAE,gBADL;AAEFkN,qBAAO,2DAAoD,KAAKlP,OAAL,CAAaqB,KAAb,CAAmBI,IAAvE,iBAAkF,KAAKzB,OAAL,CAAa0Q,WAA/F,eAA+G,KAAK1Q,OAAL,CAAa2Q,UAA5H,MAFL;AAGFvB,kBAAI,EAAE;AAAEhP,oBAAI,EAAE,MAAR;AAAgB,yBAAO,gBAAvB;AAAyC8O,uBAAO,EAAE;AAAlD;AAHJ;AADa,WAFF,CADb,CAAZ;;AAWA,eAAKvR,YAAL,CACI,SADJ,EAEIiH,GAAG,CAACqB,iBAAJ,CAAsBrG,KAAtB,CAA4B/B,SAA5B,CAAsC,UAAC+B,KAAD,EAAwB;AAC1D;AACA,gBAAIA,KAAK,CAACsG,MAAN,KAAiB,MAArB,EAA6B;AACzB,qBAAI,CAAC0K,aAAL,YAA2B,OAAI,CAACZ,SAAL,CAAe,wBAAf,CAA3B;AACH;;AACDpL,eAAG,CAAClE,KAAJ;AACH,WAND,CAFJ;AAUAkE,aAAG,CAACuB,WAAJ,GAAkBtI,SAAlB,CAA4B;AAAA,mBAAM,OAAI,CAACU,KAAL,CAAW,SAAX,CAAN;AAAA,WAA5B;AACH;AAED;;;;wCAC8B;;;;;;;;AAC1B,yBAAK0R,UAAL,CAAgB,qBAAhB;;AACA,2BAAM,KAAKjQ,OAAL,YAAN;;;AACA,yBAAK9C,QAAL,CAAcmD,aAAd,CAA4B,8BAA5B;;AACA,yBAAK4P,UAAL,CAAgB,IAAhB;AACA,yBAAKrQ,KAAL,CAAWO,IAAX,CAAgB;AAAE+F,4BAAM,EAAE,QAAV;AAAoBvB,8BAAQ,EAAE;AAA9B,qBAAhB;;AACA,yBAAKjF,WAAL,CAAiBgB,KAAjB;;;;;;;;;AACH;;;4BAtFiB;AACd,iBAAO,KAAKf,KAAL,CAAWK,OAAlB;AACH;AACD;;;;4BACe;AACX,iBAAO,KAAKA,OAAL,CAAa2P,QAAb,GAAwB,UAAxB,GAAqC,KAAK3P,OAAL,CAAaI,IAAzD;AACH;;;;MAjB6C,2E;;;uBAArC2P,4B,EAA4B,gJ,EAAA,sI,EAAA,mI,EAAA,gEAuBzB,wEAvByB,C;AAuBV,K;;;YAvBlBA,4B;AAA4B,8C;AAAA;AAAA;AAAA,O;AAAA,0F;AAAA,e;AAAA,c;AAAA,4rB;AAAA;AAAA;ADtBzC;;AACI;;AAAkB;;AAAyB;;AAC3C;;AAAqB;;AAAoB;;AACzC;;AACI;;AAKA;;AAKJ;;AACJ;;AACA;;AACI;;AAcJ;;AACA;;AACI;;AAAoC;AAAA,mBAAU,IAAAc,aAAA,EAAV;AAAyB,WAAzB;;AAChC;;AACI;;AAGA;;AACJ;;AACJ;;AACA;;AAAqC;AAAA,mBAAU,IAAAC,cAAA,EAAV;AAA0B,WAA1B;;AACjC;;AACI;;AAGA;;AACJ;;AACJ;;AACA;;AAAyD;AAAA,mBAAU,IAAAC,oBAAA,EAAV;AAAgC,WAAhC;;AACrD;;AACI;;AAGA;;AACJ;;AACJ;;AACJ;;AACA;;;;;;AA1DQ;;AACc;;AAAA;;AACG;;AAAA;;AAEiD;;AAAA;;AAKzB;;AAAA;;AAO7B;;AAAA;;AACV;;AAAA,yFAAiC,UAAjC,EAAiC,GAAjC;;AAmBM;;AAAA;;AAQA;;AAAA;;AAKU;;AAAA;;AAGV;;AAAA;;;;;;;;;sEC9BHhB,4B,EAA4B;cALxC,uDAKwC;eAL9B;AACPvR,kBAAQ,EAAE,yBADH;AAEPC,qBAAW,EAAE,wCAFN;AAGPC,mBAAS,EAAE,CAAC,wCAAD;AAHJ,S;AAK8B,Q;;;;;;;;;;kBAuBhC,oD;mBAAO,wE;;;;;gBArBX;;;;;;;;;;;;;;;;;;;;ACxBL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAWasS,8B;;;AAgBT,8CAAoBvR,OAApB,EAAwC;AAAA;;AAApB,aAAAA,OAAA,GAAAA,OAAA;AAAsB;;;;mCAElC,CAAW;;;kDAEc;AAC7B,eAAKA,OAAL,CAAae,IAAb,CAAkB,mHAAlB,EAAgD;AAC5CC,gBAAI,EAAE;AACFT,qBAAO,EAAE,KAAKA;AADZ;AADsC,WAAhD;AAKH;;;4BAtBe;AACZ,iBAAO,KAAKA,OAAL,IAAgB,KAAKA,OAAL,CAAavC,KAA7B,GAAqC,oGAAiB,KAAKuC,OAAL,CAAavC,KAA9B,CAArC,GAA4E,iBAAnF;AACH;;;4BAEmB;AAChB,iBAAO,KAAKuC,OAAL,IAAgB,KAAKA,OAAL,CAAaiR,SAA7B,GAAyC,oGAAiB,KAAKjR,OAAL,CAAaiR,SAA9B,CAAzC,GAAoF,qBAA3F;AACH;;;4BAEkB;AACf,iBAAO,EAAP;AACH;;;;;;;uBAdQD,8B,EAA8B,mI;AAAA,K;;;YAA9BA,8B;AAA8B,8C;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,qQ;AAAA;AAAA;ACX3C;;AACI;;AACJ;;AACA;;AACI;;AACI;;AAAmB;;AAAM;;AACzB;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AAAuB;;AAAU;;AACjC;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AAAmB;;AAAc;;AACjC;;AACI;;AACJ;;AACJ;;AACJ;;AACA;;AAAkC;AAAA,mBAAU,IAAAE,uBAAA,EAAV;AAAmC,WAAnC;;AAC9B;;AACJ;;;;AAlBY;;AAAA;;AAMA;;AAAA;;AAMA;;AAAA;;;;;;;;;sEDRCF,8B,EAA8B;cAL1C,uDAK0C;eALhC;AACPxS,kBAAQ,EAAE,yBADH;AAEPC,qBAAW,EAAE,kCAFN;AAGPC,mBAAS,EAAE,CAAC,kCAAD;AAHJ,S;AAKgC,Q;;;;;;gBAEtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEVL;;AACI;;AACI;;AAAsB;;AAAS;;AAC/B;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AAAsB;;AAAmB;;AACzC;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AAAyB;;AAAY;;AACrC;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AAAmB;;AAAc;;AACjC;;AACI;;AACJ;;AACJ;;AACJ;;;;;;AArBY;;AAAA;;AAMA;;AAAA;;AAMA;;AAAA;;AAMA;;AAAA;;;;;;;;AAIZ;;AAAmD;AAAA;;AAAA;;AAAA;AAAA;;AAC/C;;AACJ;;;;QChBayS,mC;;;;;;;AAqBT,mDAAoB1R,OAApB,EAAgDvC,QAAhD,EAA8E;AAAA;;AAAA;;AAC1E;AADgB,gBAAAuC,OAAA,GAAAA,OAAA;AAA4B,gBAAAvC,QAAA,GAAAA,QAAA;AAlBhD;;AACiB,gBAAAkU,aAAA,GAAgB,IAAI,0DAAJ,EAAhB;AACjB;;AACiB,gBAAAvR,OAAA,GAAU,IAAI,0DAAJ,EAAV;AAe6D;AAE7E;AAfD;;;;;;AAkBA;oDACmC;AAAA;;AAC/B,cAAM0E,IAAI,GAAG,6GAAoB,KAAKvE,OAAzB,EAAkC,KAAK9C,QAAL,CAAc4F,KAAd,CAAoBC,OAAtD,EAA+D,CAAC,YAAD,CAA/D,CAAb;;AACA,cAAM6B,GAAG,GAAG,KAAKnF,OAAL,CAAae,IAAb,CAGV,+HAHU,EAGwB;AAChCiF,oBAAQ,EAAE,MADsB;AAEhCC,iBAAK,EAAE,MAFyB;AAGhCjF,gBAAI,EAAE;AACFE,oBAAM,EAAE4D,IAAI,CAACC,QAAL,CAAcjD,UAAd,CAAyBkD,KAD/B;AAEFkB,yBAAW,EAAEpB,IAAI,CAACC,QAAL,CAAcoB,KAFzB;AAGFC,yBAAW,EAAEtB,IAAI,CAACC,QAAL,CAAcsB,eAHzB;AAIFC,+BAAiB,EAAExB,IAAI,CAACC,QAAL,CAAcwB,kBAJ/B;AAKFqL,wBAAU,EAAE;AALV;AAH0B,WAHxB,CAAZ;;AAcA,eAAK1T,YAAL,CACI,cADJ,EAEIiH,GAAG,CAACqB,iBAAJ,CAAsBrG,KAAtB,CAA4B/B,SAA5B,CAAsC,UAAO+B,KAAP;AAAA,mBAA8B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAE5DA,KAAK,CAACsG,MAAN,KAAiB,MAF2C;AAAA;AAAA;AAAA;;AAG5DtB,yBAAG,CAAClE,KAAJ;AACA,2BAAKb,OAAL,CAAaM,IAAb,CAAkB,0BAAlB;AAJ4D;AAK/B,6BAAM,KAAKH,OAAL,CAAaC,IAAb,YAA0B,UAACK,GAAD,EAAS;AAClE,+BAAI,CAACpD,QAAL,CAAcqD,WAAd,+CAAiED,GAAG,CAACmO,OAAJ,IAAenO,GAAhF;AACH,uBAFkC,CAAN;;AAL+B;AAKtDgR,iCALsD;AAQ5D,2BAAKzR,OAAL,CAAaM,IAAb,CAAkB,IAAlB;AACA;;AACA,0BAAImR,WAAJ,EAAiB;AACb,6BAAKtR,OAAL,GAAesR,WAAf;AACA,6BAAKF,aAAL,CAAmBjR,IAAnB,CAAwBmR,WAAxB;AACH;;AAb2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA9B;AAAA,WAAtC,CAFJ;AAmBH;;;4BArDe;AAAA;;AACZ,cAAM9C,IAAI,GAAG,KAAKxO,OAAL,CAAa4F,KAAb,CAAmBnD,IAAnB,CACT,UAAC+L,IAAD;AAAA,mBAAUA,IAAI,CAACpO,IAAL,KAAc,WAAd,IAA6B,OAAI,CAACJ,OAAL,CAAaqB,KAAb,CAAmBvF,EAAnB,KAA0B0S,IAAI,CAACnN,KAAtE;AAAA,WADS,CAAb;AAGA,iBAAO,CAACmN,IAAI,GAAGA,IAAI,CAACC,OAAR,GAAkB,EAAvB,KAA8B,YAArC;AACH;AAED;;;;4BACkB;AACd,iBAAO,KAAKzO,OAAL,CAAa0P,MAAb,KAAwB,MAAxB,IAAkC,KAAK1P,OAAL,CAAa2P,QAAtD;AACH;;;;MAnBoD,2E;;;uBAA5CwB,mC,EAAmC,mI,EAAA,gJ;AAAA,K;;;YAAnCA,mC;AAAmC,mD;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA;AAAA,O;AAAA,0F;AAAA,c;AAAA,a;AAAA,sa;AAAA;AAAA;ADfhD;;AACI;;AACJ;;AACA;;AA0BA;;;;AA1BqB;;AAAA;;AA0Ba;;AAAA;;;;;;;;;sECdrBA,mC,EAAmC;cAL/C,uDAK+C;eALrC;AACP3S,kBAAQ,EAAE,8BADH;AAEPC,qBAAW,EAAE,+BAFN;AAGPC,mBAAS,EAAE,CAAC,+BAAD;AAHJ,S;AAKqC,Q;;;;;;;;gBAE3C;;;gBAEA;;;gBAEA;;;;;;;;;;;;;;;;;;;;ACrBL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;ACEI;;AACI;;AACJ;;;;AADc;;AAAA;;;;;;AAGlB;;AACI;;AACJ;;;;;;AADe;;AAAA;;;;;;;;AAEf;;AACI;;AAAoD;;AAAM;;AAC1D;;AAAmB;AAAA;;AAAA;;AAAA;AAAA;;AAAyB;;AAAI;;AACpD;;;;;;AAEI;;AACI;;AACI;;AACI;;AACJ;;AACA;;AACI;;AACJ;;AACJ;;AACJ;;;;QDRS6S,qB;;;;;;;AAUT,qCACY9R,OADZ,EAEYvC,QAFZ,EAEwC;AAAA;;AAAA;;AAEpC;AAHQ,gBAAAuC,OAAA,GAAAA,OAAA;AACA,gBAAAvC,QAAA,GAAAA,QAAA;AAXZ;;AACiB,gBAAA0C,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AAUuB;AAGvC;;;;mCAEc;AACX,eAAK4R,IAAL,GAAY,IAAI,2EAAJ,CAAS,EAAT,CAAZ;AACA,eAAKjN,IAAL,GAAY,oGAAiB,KAAKiN,IAAtB,CAAZ;AACH;;;sCAEoB;AACjB,eAAKjN,IAAL,CAAUkJ,gBAAV;;AACA,cAAI,KAAKlJ,IAAL,CAAU+B,KAAd,EAAqB;AACjB,gBAAMmL,QAAQ,GAAG,IAAI,2EAAJ,CAAS,MAAD,OAAC,CAAD,kBAClB,KAAKlN,IAAL,CAAUE,KADQ,CAAC,EACJ;AAClBhD,kBAAI,YAAK,KAAK8C,IAAL,CAAUE,KAAV,CAAgBiN,UAArB,cAAmC,KAAKnN,IAAL,CAAUE,KAAV,CAAgBkN,SAAnD,CADc;AAElBvR,kBAAI,EAAE;AAFY,aADI,CAAT,CAAjB;AAKA,iBAAKoR,IAAL,CAAUI,YAAV,CAAuB1G,IAAvB,CAA4B;AAAE9K,kBAAI,EAAE,YAAR;AAAsBuE,sBAAQ,EAAE8M;AAAhC,aAA5B;AACA,iBAAK7R,KAAL,CAAWO,IAAX,CAAgB;AAAE+F,oBAAM,EAAE,MAAV;AAAkBvB,sBAAQ,EAAE8M;AAA5B,aAAhB;AACH;AACJ;;;;MAjCsC,2E;;;uBAA9BF,qB,EAAqB,sI,EAAA,gJ;AAAA,K;;;YAArBA,qB;AAAqB,qC;AAAA;AAAA;AAAA,O;AAAA,0F;AAAA,c;AAAA,a;AAAA,ma;AAAA;AAAA;ACflC;;AACI;;AAAqB;;AAAqB;;AAC1C;;AAGJ;;AACA;;AAGA;;AAIA;;;;;;AAX6C;;AAAA;;AAI3B;;AAAA,yFAAiC,UAAjC,EAAiC,GAAjC;;AAGV;;AAAA;;;;;;;;;sEDMKA,qB,EAAqB;cALjC,uDAKiC;eALvB;AACT/S,kBAAQ,EAAE,gBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,iCAAD;AAHF,S;AAKuB,Q;;;;;;;;gBAE7B;;;;;;;;;;;;;;;;;;;;AEhmCA,QAAMmT,QAAQ,GAAgB,CAC1B,4FAD0B,EAE1B,8FAF0B,EAG1B,0GAH0B,EAI1B,qGAJ0B,EAK1B,mHAL0B,EAM1B,oHAN0B,EAO1B,6FAP0B,EAQ1B,gIAR0B,CAA9B;;QA8CaC,oB;;;;;YAAAA;;;;yBAAAA,oB;AAAoB,O;AAAA,gBAXpB,CACL,4DADK,EAEL,yEAFK,EAGL,0DAHK,EAIL,kEAJK,EAKL,6DAAaC,QAAb,CAAsB,EAAtB,CALK,CAWoB;;;;0HAApBD,oB,EAAoB;AAAA,uBA7C7B,4FA6C6B,EA5C7B,8FA4C6B,EA3C7B,0GA2C6B,EA1C7B,qGA0C6B,EAzC7B,mHAyC6B,EAxC7B,oHAwC6B,EAvC7B,6FAuC6B,EAtC7B,gIAsC6B,EAhCzB,gHAgCyB,EA/BzB,+HA+ByB,EA9BzB,mHA8ByB,EA7BzB,gIA6ByB,EA5BzB,0HA4ByB,EA3BzB,oHA2ByB,EA1BzB,uHA0ByB,EAzBzB,8HAyByB,EAxBzB,mGAwByB,EAvBzB,iGAuByB,EAtBzB,oGAsByB,EArBzB,yGAqByB,EApBzB,iHAoByB,EAnBzB,wGAmByB,EAlBzB,oGAkByB,EAjBzB,mIAiByB,EAhBzB,0HAgByB,EAfzB,sHAeyB,EAdzB,gIAcyB,EAbzB,oHAayB;AAbA,kBAGzB,4DAHyB,EAIzB,yEAJyB,EAKzB,0DALyB,EAMzB,kEANyB,EAMN,4DANM,CAaA;AAPN,kBAtCvB,4FAsCuB,EArCvB,8FAqCuB,EApCvB,0GAoCuB,EAnCvB,qGAmCuB,EAlCvB,mHAkCuB,EAjCvB,oHAiCuB,EAhCvB,6FAgCuB,EA/BvB,gIA+BuB;AAOM,O;AAtCG,K;;;;;sEAsCvBA,oB,EAAoB;cAnChC,sDAmCgC;eAnCvB;AACNzS,sBAAY,YACLwS,QADK,GAER,gHAFQ,EAGR,+HAHQ,EAIR,mHAJQ,EAKR,gIALQ,EAMR,0HANQ,EAOR,oHAPQ,EAQR,uHARQ,EASR,8HATQ,EAUR,mGAVQ,EAWR,iGAXQ,EAYR,oGAZQ,EAaR,yGAbQ,EAcR,iHAdQ,EAeR,wGAfQ,EAgBR,oGAhBQ,EAiBR,mIAjBQ,EAkBR,0HAlBQ,EAmBR,sHAnBQ,EAoBR,gIApBQ,EAqBR,oHArBQ,EADN;AAwBN/U,iBAAO,EAAE,CACL,4DADK,EAEL,yEAFK,EAGL,0DAHK,EAIL,kEAJK,EAKL,6DAAaiV,QAAb,CAAsB,EAAtB,CALK,CAxBH;AA+BNlW,iBAAO,YACAgW,QADA;AA/BD,S;AAmCuB,Q;;;sEAvC7B,6F,EAAqB,0+VANrB,4FAMqB,EALrB,8FAKqB,EAJrB,0GAIqB,EAHrB,qGAGqB,EAFrB,mHAEqB,EADrB,oHACqB,EAArB,6FAAqB,EACrB,gIADqB,EAOjB,gHAPiB,EAQjB,+HARiB,EASjB,mHATiB,EAUjB,gIAViB,EAWjB,0HAXiB,EAYjB,oHAZiB,EAajB,uHAbiB,EAcjB,8HAdiB,EAejB,mGAfiB,EAgBjB,iGAhBiB,EAqBjB,oGArBiB,EAkBjB,yGAlBiB,EAmBjB,iHAnBiB,EAoBjB,wGApBiB,EAsBjB,mIAtBiB,EAuBjB,0HAvBiB,EAwBjB,sHAxBiB,EAyBjB,gIAzBiB,EA0BjB,oHA1BiB,C,EA0BQ,q5B;;;;;;;;;;;;;;;;;ACrEjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQQ;;;;;;;;AAqBQ;;AAGI;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AACJ;;;;;;AAJI;;AAGA;;AAAA;;;;;;;;AAEJ;;AAGI;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,6DAAwC,IAAxC;AAA4C,SAA5C;;AAEA;;AACJ;;;;;;AAJI;;AAGA;;AAAA;;;;;;AAnBR;;AAOI;;AAOA;;AAOJ;;;;;;AAbQ;;AAAA;;AAOA;;AAAA;;;;;;AAOR;;AACI;;AACJ;;;;;;AADI;;AAAA;;;;;;AAEJ;;;;;;;;;;;;AA1BA;;AACA;;AAsBA;;AAGA;;AAGJ;;;;;;;;;;;;AA7B2D;;AAEnD;;AAAA;;AAqBU;;AAAA;;AAIV;;AAAA,0FAA8D,yBAA9D,EAA8D,gFAA9D;;;;;;AA7BZ;;AACI;;AACI;;AA8BR;;AACA;;;;;;;;AAhCqB;;AAAA;;AACK;;AAAA;;;;;;AAF1B;;;;;;AAAc;;;;;;;;;;;ADRX,aAASG,qBAAT,CAA+BtH,QAA/B,EAAyD;AAC5D,UAAMzC,KAAK,GAAGyC,QAAQ,CAACzC,KAAvB;AACA,aAAOyC,QAAQ,CAACuH,WAAT,IAAwBhK,KAAK,CAAClH,MAA9B,GACDkH,KAAK,CAACpG,MAAN,CAAa,UAACyE,KAAD,EAAQkB,IAAR;AAAA,eAAiBlB,KAAK,IAAI0L,qBAAqB,CAACxK,IAAD,CAA/C;AAAA,OAAb,EAA2E,IAA3E,CADC,GAEDS,KAAK,CAACpG,MAAN,CAAa,UAAC8F,MAAD,EAASH,IAAT;AAAA,eAAmBG,MAAM,GAAGH,IAAI,CAACG,MAAd,GAAuB,CAAvB,GAA2B,CAA9C;AAAA,OAAb,EAA+D,CAA/D,MACI+C,QAAQ,CAACuH,WAHnB;AAIH;;AAEM,aAASC,cAAT,CAAwBxH,QAAxB,EAAkD;AACrD,UAAItJ,GAAG,GAAG,EAAV;;AACA,UAAIsJ,QAAQ,CAACzC,KAAb,EAAoB;AAChB,YAAMT,IAAI,GAAGkD,QAAQ,CAACzC,KAAT,CAAexF,IAAf,CAAoB,UAAA+E,IAAI;AAAA,iBAAKA,IAAI,CAACG,MAAL,GAAc,CAAnB;AAAA,SAAxB,CAAb;;AACA,YAAIH,IAAJ,EAAU;AACNpG,aAAG,CAACsJ,QAAQ,CAAC5O,EAAV,CAAH,GAAmB0L,IAAI,CAAC1L,EAAxB;AACH;;AACD4O,gBAAQ,CAACzC,KAAT,CAAegD,OAAf,CAAuB,UAAAzD,IAAI;AAAA,iBAAIpG,GAAG,GAAG,MAAH,OAAG,CAAH,kBAAQA,GAAR,CAAG,EAAa8Q,cAAc,CAAC1K,IAAD,CAA3B,CAAV;AAAA,SAA3B;AACH;;AACD,aAAOpG,GAAP;AACH;;QAOY+Q,4B;;;AAkBT,4CAA6CxS,KAA7C,EAA6E;AAAA;;AAAhC,aAAAA,KAAA,GAAAA,KAAA;AAjB7C;;AACiB,aAAAC,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AAgB8D;AAd/E;;;;;;AAgBA;;;qCAGoBwS,S,EAA6BC,M,EAAsBvU,K,EAAgB;AACnF,cAAIA,KAAJ,EAAW;AACP,gBAAMwU,MAAM,GAAGF,SAAS,CAACH,WAAzB;AACA,gBAAMM,MAAM,GAAGH,SAAS,CAACnK,KAAV,CAAgBtF,MAAhB,CAAuB,UAAA8E,OAAO;AAAA,qBAAIA,OAAO,CAACE,MAAR,GAAiB,CAArB;AAAA,aAA9B,EAAsD5G,MAArE;;AACA,gBAAIwR,MAAM,IAAID,MAAd,EAAsB;AAClB,kBAAM9K,IAAI,GAAG4K,SAAS,CAACnK,KAAV,CAAgBxF,IAAhB,CAAqB,UAAAgF,OAAO;AAAA,uBAAIA,OAAO,CAACE,MAAR,GAAiB,CAArB;AAAA,eAA5B,CAAb;AACAH,kBAAI,CAACE,SAAL,CAAe,CAAf;AACH;;AACD2K,kBAAM,CAAC3K,SAAP,CAAiB,CAAjB;AACH,WARD,MAQO;AACH2K,kBAAM,CAAC3K,SAAP,CAAiB,CAAjB;AACH;AACJ;;;4BA9Bc;AACX,iBAAO,KAAK/H,KAAL,CAAW6H,IAAlB;AACH;AAED;;;;4BAC2B;AACvB,iBAAOwK,qBAAqB,CAAC,KAAKxK,IAAN,CAA5B;AACH;;;4BAEsB;AACnB,iBAAO0K,cAAc,CAAC,KAAK1K,IAAN,CAArB;AACH;;;;;;;uBAhBQ2K,4B,EAA4B,gEAkBjB,wEAlBiB,C;AAkBF,K;;;YAlB1BA,4B;AAA4B,8C;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,iZ;AAAA;AAAA;ACpCzC;;AACI;;AAAA;;AAA0D;;AAC1D;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AAAkD;AAAA,mBAAU,IAAAvS,KAAA;AAAA,sBAAqB;AAArB,cAAV;AAAwC,WAAxC;;AAAlD;;AAEA;;AACJ;;AACJ;;AACA;;;;;;AAfkB;;AAAA;;AAKI;;AAAA,4FAA4D,yBAA5D,EAA4D,+EAA5D;;AAKK;;AAAA;;;;;;;;;sEDuBduS,4B,EAA4B;cALxC,uDAKwC;eAL9B;AACP3T,kBAAQ,EAAE,yBADH;AAEPC,qBAAW,EAAE,wCAFN;AAGPC,mBAAS,EAAE,CAAC,wCAAD;AAHJ,S;AAK8B,Q;;;;kBAkBxB,oD;mBAAO,wE;;;;;gBAhBnB;;;;;;;;;;;;;;;;;;;;AEtCL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;ACEI;;AACI;;AACJ;;;;AADc;;AAAA;;;;;;AAUM;;AACI;;AACJ;;;;;;AAFyD;;AACrD;;AAAA;;;;;;AASJ;;AACI;;AACJ;;;;;;AAFyD;;AACrD;;AAAA;;;;;;AAhBpB;;AACI;;AACI;;AAAmB;;AAAM;;AACzB;;AACI;;AACI;;AAGJ;;AACJ;;AACJ;;AACA;;AACI;;AAAuB;;AAAU;;AACjC;;AACI;;AACI;;AAGJ;;AACJ;;AACJ;;AACA;;AACI;;AAAmB;;AAAM;;AACzB;;AACI;;AAMJ;;AACJ;;AACJ;;;;;;AAhCmB;;AAKS;;AAAA;;AAUA;;AAAA;;;;;;AAhBhC;;AACI;;AAiCJ;;;;;;AAjCU;;AAAA;;;;;;AAyCV;;AACI;;AACI;;AACI;;AACJ;;AACA;;AAAmB;;AAA2B;;AAClD;;AACJ;;;;QDlCS8T,4B;;;;;;;AAgBT,4CACYtV,QADZ,EAEYwC,WAFZ,EAGqCC,KAHrC,EAGmE;AAAA;;AAAA;;AAE/D;AAJQ,gBAAAzC,QAAA,GAAAA,QAAA;AACA,gBAAAwC,WAAA,GAAAA,WAAA;AACyB,gBAAAC,KAAA,GAAAA,KAAA;AAlBrC;;AACiB,gBAAAC,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AAKjB;;AACO,gBAAA6S,mBAAA,GAAkC,IAAIC,KAAJ,CAAU,CAAV,EACpCC,IADoC,CAC/B,CAD+B,EAEpCvR,GAFoC,CAEhC,UAAC4C,CAAD,EAAIpB,CAAJ;AAAA,iBAAW;AAAE9G,cAAE,EAAE8G,CAAC,GAAG,EAAV;AAAcnB,gBAAI,EAAE,oGAAiBmB,CAAC,GAAG,EAArB,KAA4B;AAAhD,WAAX;AAAA,SAFgC,CAAlC;AAW4D;AAGlE;;;;mCAEc;AAAA;;AACX,cAAM4L,IAAI,GAAG,KAAKxO,OAAL,CAAa4F,KAAb,CAAmBnD,IAAnB,CACT,UAAC+L,IAAD;AAAA,mBAAUA,IAAI,CAACpO,IAAL,KAAc,SAAd,IAA2BoO,IAAI,CAACnN,KAAL,KAAe,OAAI,CAACrB,OAAL,CAAaqB,KAAb,CAAmBvF,EAAvE;AAAA,WADS,KAER;AAAE2S,mBAAO,EAAE;AAAX,WAFL;AAGA,eAAKlK,IAAL,GAAY,IAAI,wDAAJ,CAAc;AACtB9G,iBAAK,EAAE,IAAI,0DAAJ,CAAgB,KAAKuC,OAAL,CAAavC,KAAb,IAAsB,CAAtC,CADe;AAEtBwT,qBAAS,EAAE,IAAI,0DAAJ,CAAgB,KAAKjR,OAAL,CAAaiR,SAAb,IAA0B,CAA1C,CAFW;AAGtBrL,iBAAK,EAAE,IAAI,0DAAJ,CAAgB4I,IAAI,CAACC,OAArB;AAHe,WAAd,CAAZ;AAKA,eAAK9Q,YAAL,CACI,OADJ,EAEI,KAAK4G,IAAL,CAAUC,QAAV,CAAmB/G,KAAnB,CAAyBmK,YAAzB,CAAsC/J,SAAtC,CAAgD,UAAC4G,KAAD,EAAW;AACvD,mBAAI,CAACzE,OAAL,CAAa4S,kBAAb,CAAgC,OAAhC,EAAyCnO,KAAzC;AACH,WAFD,CAFJ;AAMA,eAAK9G,YAAL,CACI,WADJ,EAEI,KAAK4G,IAAL,CAAUC,QAAV,CAAmByM,SAAnB,CAA6BrJ,YAA7B,CAA0C/J,SAA1C,CAAoD,UAAC4G,KAAD,EAAW;AAC3D,mBAAI,CAACzE,OAAL,CAAa4S,kBAAb,CAAgC,WAAhC,EAA6CnO,KAA7C;AACH,WAFD,CAFJ;AAMA,eAAK9G,YAAL,CACI,OADJ,EAEI,KAAK4G,IAAL,CAAUC,QAAV,CAAmBoB,KAAnB,CAAyBgC,YAAzB,CAAsC/J,SAAtC,CAAgD,UAAC4G,KAAD,EAAW;AACvD;AACA,gBAAIA,KAAJ,EAAW;AACP,qBAAI,CAAC1G,OAAL,CAAa,OAAb,EAAsB,YAAM;AACxB,oBAAM6H,KAAK,GAAG,OAAI,CAAC5F,OAAL,CAAa4F,KAAb,CAAmBjD,MAAnB,CACV,UAAC6L,IAAD;AAAA,yBACI,EAAEA,IAAI,CAACpO,IAAL,KAAc,SAAd,IAA2BoO,IAAI,CAACnN,KAAL,KAAe,OAAI,CAACrB,OAAL,CAAaqB,KAAb,CAAmBvF,EAA/D,CADJ;AAAA,iBADU,CAAd;;AAIA,uBAAI,CAACkE,OAAL,CAAa4S,kBAAb,CAAgC,OAAhC,+BACOhN,KADP,IAEI;AACIxF,sBAAI,EAAE,SADV;AAEIS,sBAAI,EAAE,kCAAK,GAAGsG,OAAR,EAFV;AAGIsH,yBAAO,EAAEhK,KAHb;AAIIqK,wBAAM,EAAE,OAAI,CAAC5R,QAAL,CAAc4F,KAAd,CAAoBC,OAApB,CAA4BtB,IAJxC;AAKIJ,uBAAK,EAAE,OAAI,CAACrB,OAAL,CAAaqB,KAAb,CAAmBvF;AAL9B,iBAFJ;AAUH,eAfD;AAgBH;AACJ,WApBD,CAFJ;AAwBH;;;sCAEoB;AAAA;;AACjB,cAAI,KAAKkE,OAAL,CAAaoG,WAAjB,EAA8B;AAC1B,iBAAKvG,OAAL,GAAe,IAAf;AACA,iBAAKH,WAAL,CAAiBI,YAAjB,GAAgC,IAAhC;AACA,iBAAKE,OAAL,CAAaC,IAAb,GAAoB1E,IAApB,CAAyB,UAACyE,OAAD,EAAa;AAClC,qBAAI,CAAC9C,QAAL,CAAcmD,aAAd,CAA4B,sCAA5B;;AACA,qBAAI,CAACT,KAAL,CAAWO,IAAX,CAAgB;AAAE+F,sBAAM,EAAE,MAAV;AAAkBvB,wBAAQ,EAAE3E;AAA5B,eAAhB;;AACA,qBAAI,CAACN,WAAL,CAAiBgB,KAAjB;AACH,aAJD,EAIG,UAACJ,GAAD,EAAS;AACR,qBAAI,CAACZ,WAAL,CAAiBI,YAAjB,GAAgC,KAAhC;;AACA,qBAAI,CAAC5C,QAAL,CAAcqD,WAAd,6DAA+ED,GAAG,CAACmO,OAAJ,IAAenO,GAA9F;;AACA,qBAAI,CAACT,OAAL,GAAe,KAAf;AACH,aARD;AASH,WAZD,MAYO;AACH,iBAAKH,WAAL,CAAiBgB,KAAjB;AACH;AACJ;;;4BA3EiB;AACd,iBAAO,KAAKf,KAAL,CAAWK,OAAlB;AACH;;;;MAd6C,2E;;;uBAArCwS,4B,EAA4B,gJ,EAAA,sI,EAAA,gEAmBzB,wEAnByB,C;AAmBV,K;;;YAnBlBA,4B;AAA4B,8C;AAAA;AAAA;AAAA,O;AAAA,0F;AAAA,e;AAAA,a;AAAA,kxB;AAAA;AAAA;ACtBzC;;AACI;;AAAqB;;AAAoB;;AACzC;;AAGJ;;AACA;;AACI;;AAmCJ;;AACA;;AACI;;AACI;;AAAmB;AAAA,mBAAU,IAAAK,WAAA,EAAV;AAAuB,WAAvB;;AAAyB;;AAAI;;AACpD;;AACJ;;AACA;;;;;;AA9C6C;;AAAA;;AAKnC;;AAAA,yFAAiC,UAAjC,EAAiC,GAAjC;;;;;;;;;sEDeGL,4B,EAA4B;cALxC,uDAKwC;eAL9B;AACPhU,kBAAQ,EAAE,yBADH;AAEPC,qBAAW,EAAE,wCAFN;AAGPC,mBAAS,EAAE,CAAC,wCAAD;AAHJ,S;AAK8B,Q;;;;;;;;kBAmBhC,oD;mBAAO,wE;;;;;gBAjBX;;;;;;;;;;;;;;;;;;;;AExBL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACawB;;AACI;;AACJ;;;;;;AAFyC;;AACrC;;AAAA;;;;;;AALhB;;AACI;;AAAoB;;AAAQ;;AAC5B;;AACI;;AACI;;AAGJ;;AACJ;;AACJ;;;;;;AALwB;;AAAA;;;;;;AAcpB;;AAII;;AACJ;;;;;;AAbJ;;AACI;;AAII;;AAAQ;;AAAM;;AAAC;;AAAO;;AAC1B;;AACA;;AACA;;AAMJ;;;;;;AAXQ;;AAAA;;AAOA;;AAAA;;;;;;AArBZ;;AACI;;AAUA;;AAeJ;;;;;;AA1BmB;;AACI;;AAAA;;AAUA;;AAAA;;;;;;AAZ3B;;AACI;;AA2BJ;;;;;;AA3BU;;AAAA;;;;;;;;AA6Bd;;AACI;;AACI;;AAAmB;AAAA;;AAAA;;AAAA;AAAA;;AAAkB;;AAAc;;AACvD;;AACJ;;;;;;AAEI;;AACI;;AACI;;AACI;;AACJ;;AACA;;AAAkB;;AAAa;;AACnC;;AACJ;;;;;;AAF0B;;AAAA;;;;;;;;;;;;ADjCvB,QAAMoU,mBAAmB,GAAG;AAC/B9F,YAAM,EAAE,MADuB;AAE/BtH,WAAK,EAAE,MAFwB;AAG/Bc,eAAS,EAAE,mBAHoB;AAI/Bf,cAAQ,EAAE;AAJqB,KAA5B;;QAYMsN,wB;;;;;;;AAgBT,wCACqCpT,KADrC,EAC+D;AAAA;;AAAA;;AAE3D;AAFiC,gBAAAA,KAAA,GAAAA,KAAA;AAhBrC;;AACiB,gBAAAC,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AAKjB;;AACO,gBAAAoT,OAAA,GAAsB,CACzB;AAAElX,YAAE,EAAE,MAAN;AAAc2F,cAAI,EAAE;AAApB,SADyB,EAEzB;AAAE3F,YAAE,EAAE,OAAN;AAAe2F,cAAI,EAAE;AAArB,SAFyB,EAGzB;AAAE3F,YAAE,EAAE,QAAN;AAAgB2F,cAAI,EAAE;AAAtB,SAHyB,EAIzB;AAAE3F,YAAE,EAAE,UAAN;AAAkB2F,cAAI,EAAE;AAAxB,SAJyB,EAKzB;AAAE3F,YAAE,EAAE,SAAN;AAAiB2F,cAAI,EAAE;AAAvB,SALyB,CAAtB;AASwD;AAG9D;;;;mCAEc;AACX,eAAK8C,IAAL,GAAY,IAAI,wDAAJ,CAAc;AACtB0H,kBAAM,EAAE,IAAI,0DAAJ,CAAgB,KAAKtM,KAAL,CAAWsT,OAAX,CAAmBhH,MAAnB,IAA6B,MAA7C,CADc;AAEtB7J,eAAG,EAAE,IAAI,0DAAJ,CAAgB,KAAKzC,KAAL,CAAWsT,OAAX,CAAmB7Q,GAAnB,IAA0B,KAAKzC,KAAL,CAAWkB,IAArD,EAA2D,CAAC,0DAAWqS,QAAZ,CAA3D;AAFiB,WAAd,CAAZ;AAIH;AAED;;;;;;+BAGc;AACV,eAAK3O,IAAL,CAAUkJ,gBAAV;AACA;;AACA,cAAI,KAAKlJ,IAAL,CAAU+B,KAAd,EAAqB;AACjB,iBAAKzG,OAAL,GAAe,sCAAf;AACA,iBAAKD,KAAL,CAAWO,IAAX,CAAgB;AAAE+F,oBAAM,EAAE,MAAV;AAAkBvB,sBAAQ,EAAE,MAAF,OAAE,CAAF,kBAAO,KAAKhF,KAAL,CAAWsT,OAAlB,CAAE,EAA4B,KAAK1O,IAAL,CAAUE,KAAtC;AAA5B,aAAhB;AACH;AACJ;;;;MAvCyC,2E;;;uBAAjCsO,wB,EAAwB,gEAiBrB,wEAjBqB,C;AAiBN,K;;;YAjBlBA,wB;AAAwB,uC;AAAA;AAAA;AAAA,O;AAAA,0F;AAAA,e;AAAA,a;AAAA,0pB;AAAA;AAAA;AC3BrC;;AACI;;AAAsC;;AAAkB;;AACxD;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AA6BJ;;AACA;;AAKA;;;;;;AAvCkB;;AAAA;;AAIR;;AAAA,yFAAiC,UAAjC,EAAiC,GAAjC;;AA8BU;;AAAA;;;;;;;;;sEDVPA,wB,EAAwB;cALpC,uDAKoC;eAL1B;AACPvU,kBAAQ,EAAE,kBADH;AAEPC,qBAAW,EAAE,mCAFN;AAGPC,mBAAS,EAAE,CAAC,mCAAD;AAHJ,S;AAK0B,Q;;;;kBAiB5B,oD;mBAAO,wE;;;;;gBAfX;;;;;;;;;;;;;;;;;;;;AE7BL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWQ;;AACI;;AAAkB;;AAAsB;;AACxC;;AACI;;AAGI;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AACI;;AACJ;;AACJ;;AACJ;;AACJ;;;;;;;;AAZsB;;AAAA;;AAIV;;AAAA;;AAII;;AAAA;;;;;;;;;;;;QDiBXyU,8B;;;;;;;AAkBT,8CACqCxT,KADrC,EAEYF,OAFZ,EAGYvC,QAHZ,EAGwC;AAAA;;AAAA;;AAEpC;AAJiC,gBAAAyC,KAAA,GAAAA,KAAA;AACzB,gBAAAF,OAAA,GAAAA,OAAA;AACA,gBAAAvC,QAAA,GAAAA,QAAA;AApBZ;;AACiB,gBAAA0C,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AACjB;;AACO,gBAAAwT,WAAA,GAAmC,EAAnC;AACP;;AACO,gBAAAC,aAAA,GAAiD,EAAjD;AAeiC;AAGvC;AAhBD;;;;;mCAkBQ;AACJ,eAAKA,aAAL,GAAqB,GAAG5G,MAAH,CAAU,KAAK9M,KAAL,CAAWsN,SAAX,IAAwB,EAAlC,CAArB;AACA,eAAKqG,iBAAL;AACH;;;+BAEa;AACV,eAAK1T,KAAL,CAAWO,IAAX,CAAgB;AAAE+F,kBAAM,EAAE,MAAV;AAAkBvB,oBAAQ,EAAE,KAAK0O;AAAjC,WAAhB;AACH;;;oCAEkBE,U,EAA+B;AAAA;;AAC9C,cAAM3O,GAAG,GAAG,KAAKnF,OAAL,CAAae,IAAb,CACR,0HADQ,EAER;AACIkF,iBAAK,EAAE,MADX;AAEIsH,kBAAM,EAAE,MAFZ;AAGIvH,oBAAQ,EAAE,MAHd;AAIIhF,gBAAI,EAAE;AACFE,oBAAM,EAAE,EADN;AAEFiL,sBAAQ,EAAE,KAAKvK,KAAL,CAAWgC,KAAX,CAAiBgH,WAFzB;AAGFxJ,kBAAI,EAAE0S,UAAU,CAAC1S,IAAX,GAAkB,IAHtB;AAIFC,sBAAQ,EAAE,KAAKnB,KAAL,CAAWmB,QAJnB;AAKFa,kBAAI,EAAE,KAAKhC,KAAL,CAAWgC,IALf;AAMF6K,sBAAQ,EAAE;AANR;AAJV,WAFQ,CAAZ;;AAgBA,eAAK7O,YAAL,CACI,YADJ,EAEIiH,GAAG,CAACqB,iBAAJ,CAAsBrG,KAAtB,CAA4B/B,SAA5B,CAAsC,UAAA+B,KAAK,EAAI;AAC3C;AACA,gBAAIA,KAAK,CAACsG,MAAN,KAAiB,MAArB,EAA6B;AACzB,kBAAM7E,KAAK,GAAGzB,KAAK,CAAC+E,QAAN,CAAe,CAAf,CAAd;AACA;;AACA,kBAAItD,KAAJ,EAAW;AACP,uBAAI,CAACgS,aAAL,CAAmBG,OAAnB,CAA2B;AACvB3S,sBAAI,EAAE0S,UAAU,CAAC1S,IADM;AAEvBQ,uBAAK,EAAEA,KAAK,CAACwB,KAFU;AAGvBuK,0BAAQ,EAAE,OAAI,CAAC/L,KAAL,CAAWwB;AAHE,iBAA3B;;AAKA,uBAAI,CAACwQ,aAAL,GAAqB,0FAAO,OAAI,CAACA,aAAZ,EAA2B,MAA3B,CAArB;AACH;;AACD,qBAAI,CAACC,iBAAL;;AACA1O,iBAAG,CAAClE,KAAJ;;AACA,qBAAI,CAACnC,KAAL,CAAW,YAAX;AACH;AACJ,WAjBD,CAFJ;AAqBH;;;4CAE2B;AAAA;;AACxB,eAAK6U,WAAL,GAAmB,KAAKzT,KAAL,CAAW0B,KAAX,CAAiBwL,gBAAjB,CAAkCzL,GAAlC,CAAsC,UAAAxB,KAAK,EAAI;AAC9D,gBAAMyT,aAAa,GAAG,OAAI,CAACA,aAAL,CAAmB5Q,IAAnB,CAAwB,UAAAwQ,OAAO;AAAA,qBAAIA,OAAO,CAACpS,IAAR,KAAiBjB,KAAK,CAACiB,IAAvB,IAA+BoS,OAAO,CAAC7F,QAAR,KAAqB,OAAI,CAAC/L,KAAL,CAAWwB,KAAnE;AAAA,aAA/B,CAAtB;;AACA,gBAAMA,KAAK,GAAG,CAACwQ,aAAa,IAAI,EAAlB,EAAsBhS,KAApC;AACA,gBAAMA,KAAK,GAAG,OAAI,CAACnE,QAAL,CAAc+D,MAAd,CAAqBwB,IAArB,CAA0BI,KAA1B,KAAoC;AAAEA,mBAAK,EAALA,KAAF;AAASpB,kBAAI,EAAEoB;AAAf,aAAlD;AACA,mBAAO,MAAP,OAAO,CAAP,kBACOjD,KADP,CAAO,EACK;AACR8Q,yBAAW,EAAE,kCAAK,CAAC9Q,KAAK,CAACiB,IAAN,GAAa,IAAd,CAAL,CAAyByB,MAAzB,CAAgC,oBAAhC,CADL;AAERmR,yBAAW,EAAEpS,KAAK,CAACI;AAFX,aADL,CAAP;AAKH,WATkB,CAAnB;AAUH;;;4BA7Ee;AACZ,iBAAO,KAAK9B,KAAL,CAAW0B,KAAlB;AACH;AAED;;;;4BAC4B;AACxB,iBAAO,KAAK+R,WAAL,CAAiBvR,MAAjB,CAAwB,UAACyE,KAAD,EAAQ1G,KAAR;AAAA,mBAAkB0G,KAAK,KAAK1G,KAAK,CAACsB,SAAN,IAAmB,CAAC,CAACtB,KAAK,CAAC6T,WAAhC,CAAvB;AAAA,WAAxB,EAA6F,IAA7F,CAAP;AACH;;;;MAhB+C,2E;;;uBAAvCN,8B,EAA8B,gEAmB3B,wEAnB2B,C,EAmBZ,mI,EAAA,gJ;AAAA,K;;;YAnBlBA,8B;AAA8B,gD;AAAA;AAAA;AAAA,O;AAAA,0F;AAAA,e;AAAA,a;AAAA,0R;AAAA;AAAA;ACrC3C;;AACI;;AAAA;;AAAiF;;AACjF;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AAAA;;AAEA;;AACA;;AAcJ;;AACJ;;AACA;;AACI;;AACI;;AAGI;AAAA,mBAAU,IAAAlT,IAAA,EAAV;AAAgB,WAAhB;;AAHJ;;AAOA;;AACJ;;AACJ;;;;AArCqF;;AAAA;;AAAA;;AAEnE;;AAAA;;AAQQ;;AAAA;;AAoBd;;AAAA;;;;;;;;;sEDMCkT,8B,EAA8B;cAL1C,uDAK0C;eALhC;AACP3U,kBAAQ,EAAE,2BADH;AAEPC,qBAAW,EAAE,0CAFN;AAGPC,mBAAS,EAAE,CAAC,0CAAD;AAHJ,S;AAKgC,Q;;;;kBAmBlC,oD;mBAAO,wE;;;;;;;;;gBAjBX;;;;;;;;;;;;;;;;;;;;AEvCL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;ACGY;;;;;;;;AAEI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCmB;;;;;;;;AAzB3B;;AACI;;AACI;;AAAA;;AAGA;;AACA;;AACI;;AAAA;;AAMC;;AACL;;AACJ;;AACA;;AACI;;AACI;;AAAA;;AAOe;;AAGf;;AAAA;;AACA;;AACI;;AAAA;;AAAA;;AAOA;;AAAA;;AACI;;AAEJ;;AAAA;;AACA;;AAAA;;AAEA;;AACJ;;AACJ;;AACA;;AACI;;AAAA;;AAQsB;;AACtB;;AAAA;;AACA;;AACI;;AAAA;;AAAA;;AAQA;;AAAA;;AACI;;AAEJ;;AAAA;;AACA;;AAAA;;AAEA;;AACJ;;AACJ;;AACJ;;AACJ;;;;;;AA5EsD;;AAoBtC;;AAAA;;AAKiB;;AAAA;;AAwBjB;;AAAA;;;;;;;;;;;QD9CXgV,gC;;;AA8BT,gDACYxW,QADZ,EAEqCyC,KAFrC,EAEuE;AAAA;;AAD3D,aAAAzC,QAAA,GAAAA,QAAA;AACyB,aAAAyC,KAAA,GAAAA,KAAA;AA/BrC;;AACiB,aAAAC,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AACjB;;AACO,aAAAgG,KAAA,GAAyB,EAAzB;AACP;;AACO,aAAAuI,KAAA,GAAyB,EAAzB;AACP;;AACO,aAAAC,WAAA,GAA+B,EAA/B;AACP;;AACO,aAAA7J,IAAA,GAA2B,EAA3B;AACP;;AACO,aAAA8J,iBAAA,GAAsC,EAAtC;AACP;;AACO,aAAAC,YAAA,GAAuB,CAAvB;AAmBH;AAjBJ;;;;;mCAmBe;AACX,cAAMC,SAAS,GAAG,KAAK5O,KAAL,CAAWgG,WAAX,CAAuBlB,KAAvB,CACb9B,MADa,CACN,UAAC6L,IAAD;AAAA,mBAAuBA,IAAI,CAACpO,IAAL,KAAc,WAArC;AAAA,WADM,CAAlB;;AAEA,eAAKwF,KAAL,GAAa2I,SAAS,CAAC1M,MAAV,CAAiB,UAACT,GAAD,EAAMoN,IAAN,EAAe;AACzCpN,eAAG,CAACoN,IAAI,CAACnN,KAAN,CAAH,GAAkBmN,IAAI,CAACC,OAAvB;AACA,mBAAOrN,GAAP;AACH,WAHY,EAGV,EAHU,CAAb;AAIA,eAAK+M,KAAL,GAAa,MAAH,OAAG,CAAH,EAAG,EAAK,KAAKxO,KAAL,CAAWkG,WAAX,CAAuBpB,KAA5B,CAAb;AACA,eAAK2J,WAAL,GAAmB,MAAH,OAAG,CAAH,EAAG,EAAK,KAAKzO,KAAL,CAAWoG,iBAAX,CAA6BtB,KAAlC,CAAnB;AACA,eAAKkK,kBAAL;AACH;;;iCAEY;AAAA;;AACT,eAAKpN,UAAL,CAAgB0J,OAAhB,CAAwB,UAAA5J,KAAK;AAAA,mBAAI,OAAI,CAACkD,IAAL,CAAUlD,KAAK,CAACvF,EAAhB,EAAoB2R,gBAApB,EAAJ;AAAA,WAA7B;AACA;;AACA,cAAI,KAAKmB,QAAT,EAAmB;AACf;AACA,gBAAMhJ,KAAK,GAAG,KAAKjG,KAAL,CAAWgG,WAAX,CAAuBlB,KAAvB,CACT9B,MADS,CACF,UAAC6L,IAAD;AAAA,qBAAuBA,IAAI,CAACpO,IAAL,KAAc,WAArC;AAAA,aADE,CAAd;;AAEA,gBAAMyO,SAAS,GAAG,KAAKtN,UAAL,CAAgBH,GAAhB,CAAoB,UAAAC,KAAK;AAAA,qBAAK;AAC5CyN,sBAAM,EAAE,OAAI,CAAC5R,QAAL,CAAc4F,KAAd,CAAoBC,OAApB,CAA4BtB,IADQ;AAE5CrB,oBAAI,EAAE,WAFsC;AAG5CqO,uBAAO,EAAE,OAAI,CAAClK,IAAL,CAAUlD,KAAK,CAACvF,EAAhB,EAAoB0I,QAApB,CAA6BoB,KAA7B,CAAmCnB,KAHA;AAI5CpD,qBAAK,EAAEA,KAAK,CAACvF,EAJ+B;AAK5C+E,oBAAI,EAAE,kCAAK,GAAGsG,OAAR;AALsC,eAAL;AAAA,aAAzB,CAAlB;;AAOA,iBAAKxH,KAAL,CAAWgG,WAAX,CAAuBH,QAAvB,CAAgCI,KAAK,CAAC6G,MAAN,CAAaoC,SAAb,EAAwBlM,MAAxB,CAA+B,UAAA6L,IAAI;AAAA,qBAAIA,IAAI,CAACC,OAAT;AAAA,aAAnC,CAAhC;;AACA,iBAAK9O,KAAL,CAAWkG,WAAX,CAAuBL,QAAvB,CAAgC,KAAKjE,UAAL,CAAgBM,MAAhB,CAAuB,UAACT,GAAD,EAAMC,KAAN,EAAgB;AACnED,iBAAG,CAACC,KAAK,CAACvF,EAAP,CAAH,GAAgB,OAAI,CAACyI,IAAL,CAAUlD,KAAK,CAACvF,EAAhB,EAAoB0I,QAApB,CAA6B9I,IAA7B,CAAkC+I,KAAlD;AACA,qBAAOrD,GAAP;AACH,aAH+B,EAG7B,EAH6B,CAAhC;;AAIA,iBAAKzB,KAAL,CAAWoG,iBAAX,CAA6BP,QAA7B,CAAsC,KAAKjE,UAAL,CAAgBM,MAAhB,CAAuB,UAACT,GAAD,EAAMC,KAAN,EAAgB;AACzED,iBAAG,CAACC,KAAK,CAACvF,EAAP,CAAH,GAAgB,OAAI,CAACyI,IAAL,CAAUlD,KAAK,CAACvF,EAAhB,EAAoB0I,QAApB,CAA6BmP,UAA7B,CAAwClP,KAAxD;AACA,qBAAOrD,GAAP;AACH,aAHqC,EAGnC,EAHmC,CAAtC;;AAIA,iBAAKxB,KAAL,CAAWO,IAAX,CAAgB;AAAE+F,oBAAM,EAAE;AAAV,aAAhB;AACH;AACJ;AAED;;;;6CAC0B;AAAA;;AAAA,sDACF,KAAK3E,UADH;AAAA;;AAAA;AAAA;AAAA,kBACXF,KADW;;AAElB,kBAAMiC,QAAQ,GAAG,OAAI,CAACpG,QAAL,CAAcqG,YAAd,CAA2BC,SAA3B,CAAqCf,IAArC,CACb,UAAAgB,GAAG;AAAA,uBAAIA,GAAG,CAAC3H,EAAJ,KAAWuF,KAAK,CAACgC,KAAN,CAAYgH,WAA3B;AAAA,eADU,CAAjB;;AAGA,qBAAI,CAACgE,iBAAL,CAAuBhN,KAAK,CAACvF,EAA7B,IAAmCwH,QAAQ,CAAC4P,QAAT,CAAkBU,cAArD;AACA,qBAAI,CAACrP,IAAL,CAAUlD,KAAK,CAACvF,EAAhB,IAAsB,IAAI,wDAAJ,CAAc;AAChC8J,qBAAK,EAAE,IAAI,0DAAJ,CAAgB,OAAI,CAACA,KAAL,CAAWvE,KAAK,CAACvF,EAAjB,KAAwB,EAAxC,CADyB;AAEhCJ,oBAAI,EAAE,IAAI,0DAAJ,CACF,OAAI,CAACyS,KAAL,CAAW9M,KAAK,CAACvF,EAAjB,KAAwB,EADtB,EAEFwH,QAAQ,CAAC4P,QAAT,CAAkBU,cAAlB,GAAmC,CAAC,0DAAWV,QAAZ,CAAnC,GAA2D,EAFzD,CAF0B;AAMhCS,0BAAU,EAAE,IAAI,0DAAJ,CAAgB,OAAI,CAACvF,WAAL,CAAiB/M,KAAK,CAACvF,EAAvB,KAA8B,EAA9C,EAAkD,CAAC,0DAAWoX,QAAZ,CAAlD;AANoB,eAAd,CAAtB;AANkB;;AACtB,mEAAqC;AAAA;AAapC;AAdqB;AAAA;AAAA;AAAA;AAAA;AAezB;;;4BAzEoB;AACjB,iBAAO,KAAKvT,KAAL,CAAWgB,MAAlB;AACH;;;4BAEqB;AAClB,iBAAO,KAAK4D,IAAL,CAAU,KAAKhD,UAAL,CAAgB,KAAK+M,YAArB,EAAmCxS,EAA7C,CAAP;AACH;AAED;;;;4BACmB;AAAA;;AACf,iBAAO,KAAKyF,UAAL,CAAgBM,MAAhB,CAAuB,UAACyE,KAAD,EAAQjF,KAAR;AAAA,mBAAkBiF,KAAK,IAAI,OAAI,CAAC/B,IAAL,CAAUlD,KAAK,CAACvF,EAAhB,EAAoBwK,KAA/C;AAAA,WAAvB,EAA6E,IAA7E,CAAP;AACH;;;;;;;uBA5BQoN,gC,EAAgC,gJ,EAAA,gEAgC7B,wEAhC6B,C;AAgCd,K;;;YAhClBA,gC;AAAgC,kD;AAAA;AAAA;AAAA,O;AAAA,e;AAAA,a;AAAA,0wB;AAAA;AAAA;ACxB7C;;AACI;;AACI;;AAAe;AAAA;AAAA;;AACX;;AAIJ;;AACJ;;AACA;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AACA;;AAAA;;AAEA;;AACJ;;AACA;;AA6EJ;;AACJ;;AACA;;AACI;;AACI;;AAAmB;AAAA,mBAAU,IAAA3E,MAAA,EAAV;AAAkB,WAAlB;;AAAoB;;AAAc;;AACzD;;AACJ;;;;AAtGuB;;AAAA;;AAEP;;AAAA;;AAME;;AAAA;;AAWJ;;AAAA;;;;;;;;;sEDGD2E,gC,EAAgC;cAL5C,uDAK4C;eALlC;AACPlV,kBAAQ,EAAE,6BADH;AAEPC,qBAAW,EAAE,4CAFN;AAGPC,mBAAS,EAAE,CAAC,4CAAD;AAHJ,S;AAKkC,Q;;;;;;kBAgCpC,oD;mBAAO,wE;;;;;gBA9BX;;;;;;;;;;;;;;;;;;;;AE1BL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACgBwB;;AACI;;AAEJ;;;;;;AAH+C;;AAC3C;;AAAA;;;;;;;;AAPZ;;AACI;;AAEI;AAAA;;AAAA;;AAAA;AAAA,WAA2B,aAA3B,EAA2B;AAAA;;AAAA;;AAAA,iBACZ,QAAAmV,OAAA,mCAAkC,GAAlC,GAAwC,OAAH,YAAG,CAAH,EAArC,CADY;AAC2C,SADtE;;AAGA;;AAIJ;;AACJ;;;;;;AARQ;;AAAA;;AAGY;;AAAA;;;;;;AAYZ;;AACI;;AACJ;;;;;;AAFuC;;AACnC;;AAAA;;;;;;;;AAPZ;;AACI;;AAEI;AAAA;;AAAA;;AAAA;AAAA,WAAuB,aAAvB,EAAuB;AAAA;;AAAA;;AAAA,iBACR,QAAAA,OAAA,mCAAkC,GAAlC,GAAwC,OAAH,YAAG,CAAH,EAArC,CADQ;AAC+C,SADtE;;AAGA;;AAGJ;;AACJ;;;;;;AAPQ;;AAAA;;AAGY;;AAAA;;;;;;AAnBxB;;AACI;;AAYA;;AAWJ;;;;;;AAvByC;;AAAA;;AAYA;;AAAA;;;;;;;;;;;;;;;;AAe7B;;AACI;;AACI;;AAAkB;;AAAgB;;AAClC;;AAAkB;;AAAsB;;AAC5C;;AACA;;AACI;;AAGA;;AAAkB;;AAA2B;;AACjD;;AACA;;AACI;;AAGI;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AACJ;;AACJ;;AACJ;;;;;;;;AAlB0B;;AAAA;;AACA;;AAAA;;AAId;;AAAA;;AAEc;;AAAA;;AAId;;AAAA;;;;;;AAdhB;;AACI;;AAqBJ;;;;;;AArBsB;;AAAA;;;;;;AAF1B;;AACI;;AAuBJ;;;;;;;;AAvBkB;;AAAA,gHAAiD,UAAjD,EAAiD,GAAjD;;;;;;;;;;;;;;;;;;;;;;AAgCd;;AACI;;AASI;;AAMJ;;AACA;;AACI;;AAAkB;;AAAgB;;AAClC;;AAAkB;;AAAsB;;AAC5C;;AACA;;AACI;;AAGA;;AAAkB;;AAA2B;;AACjD;;AACA;;AACI;;AAAwB;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACpB;;AAGJ;;AACJ;;AACJ;;;;;;;;AA/BQ;;AAAA;;AACA;;AAOI;;AAAA;;AAOc;;AAAA;;AACA;;AAAA;;AAId;;AAAA;;AAEc;;AAAA;;AAKV;;AAAA;;;;;;AAjCpB;;AAGI;;AAmCJ;;;;;;AAnCsB;;AAAA;;;;;;;;;;;;;;;AAN9B;;AACI;;AAAI;;AAAe;;AACnB;;AACI;;AAuCJ;;AACA;;AACI;;AAAmB;AAAA;;AAAA;;AAAA;AAAA;;AAAsC;;AAAc;;AAC3E;;AACA;;AAAwE;AAAA;;AAAA;;AAAA,qCAAsB,KAAtB;AAA2B,SAA3B;;AACpE;;AACJ;;AACA;;AACI;;AAAwB;AAAA;;AAAA;;AAAA,qCAAsB,IAAtB;AAA0B,SAA1B;;AACpB;;AACJ;;AACJ;;AACJ;;;;;;;;AAtD6C;;AAIjC;;AAAA,kIAA0E,UAA1E,EAA0E,GAA1E;;AA0CgB;;AAAA,iFAAoB,aAApB,EAAoB,IAApB;;AACV;;AAAA;;AAII;;AAAA;;;;;;AAO1B;;AACI;;AACI;;AACJ;;AACA;;AAAkB;;AAA2B;;AACjD;;;;;;AAGA;;AACI;;AACI;;AACJ;;AACA;;AAAkB;;AAAmB;;AACzC;;;;AAHkB;;AAAA;;;;;;AAMlB;;AACI;;AACI;;AACJ;;AACA;;AAAkB;;AAAkB;;AACxC;;;;AAHkB;;AAAA;;;;QDzGTC,yB;;;;;;;AAuCT,yCACY5W,QADZ,EAEqCyC,KAFrC,EAEgE;AAAA;;AAAA;;AAE5D;AAHQ,gBAAAzC,QAAA,GAAAA,QAAA;AACyB,gBAAAyC,KAAA,GAAAA,KAAA;AAxCrC;;AACiB,gBAAAC,KAAA,GAAQ,IAAI,0DAAJ,EAAR;AAGjB;;AACO,gBAAAe,MAAA,GAAkB,EAAlB;AAOP;;AACgB,gBAAAkT,OAAA,GAAU,IAAI,4CAAJ,EAAV;AAChB;;AACO,gBAAAE,eAAA,GAA2B,EAA3B;AACP;;AACO,gBAAAC,WAAA,GAAgC,EAAhC;AAIP;;AACO,gBAAAC,KAAA,GAAoB,EAApB;AAkByD;AAG/D;AAnBD;;;;;mCAqBe;AAAA;;AACX,eAAKF,eAAL,GAAuB,GAAGtH,MAAH,CAAU,KAAK9M,KAAL,CAAWgB,MAAX,IAAqB,EAA/B,CAAvB,CADW,CAEX;;AACA,eAAKmL,eAAL,GAAuB,KAAK+H,OAAL,CAAa9P,IAAb,CACnB,oEAAa,GAAb,CADmB,EAEnB,6EAFmB,EAGnB,iEAAU,UAAAC,CAAC,EAAI;AACX,mBAAI,CAACnE,OAAL,GAAe,IAAf;AACA,gBAAM+L,QAAQ,GAAa,EAA3B;AACA;;AACA,gBAAI,OAAI,CAAC3B,eAAT,EAA0B;AACtB2B,sBAAQ,CAAC5E,IAAT,CAAc,OAAI,CAACiD,eAAL,CAAqBnO,EAAnC;AACH;AACD;;;AACA,gBAAI,OAAI,CAACoY,WAAT,EAAsB;AAClBtI,sBAAQ,CAAC5E,IAAT,WAAiB,OAAI,CAACkN,WAAL,CAAiBpY,EAAlC;AACH;;AACD,mBAAO,OAAI,CAACoB,QAAL,CAAc+D,MAAd,CAAqBC,SAArB,CAA+B;AAClC0K,sBAAQ,EAAE,OAAI,CAACjM,KAAL,CAAWiM,QAAX,IAAuBA,QAAQ,CAACtK,IAAT,CAAc,GAAd,CADC;AAElCT,kBAAI,EAAE,OAAI,CAAClB,KAAL,CAAWkB,IAFiB;AAGlCC,sBAAQ,EAAE,OAAI,CAACnB,KAAL,CAAWmB;AAHa,aAA/B,CAAP;AAKH,WAhBD,CAHmB,EAoBnB,kEAAW,UAAAkD,CAAC;AAAA,mBAAI,gDAAG,EAAH,CAAJ;AAAA,WAAZ,CApBmB,EAqBnB,2DAAI,UAACuD,IAAD,EAAmB;AACnB,mBAAI,CAAC1H,OAAL,GAAe,KAAf;AACA,gBAAMkN,QAAQ,GAAG,OAAI,CAACgH,eAAtB;AACA,mBAAOxM,IAAI,CAAC5E,MAAL,CAAY,UAAC6E,IAAD;AAAA,qBAAe,CAACuF,QAAQ,CAACtK,IAAT,CAAc,UAAApB,KAAK;AAAA,uBAAIA,KAAK,CAACvF,EAAN,KAAa0L,IAAI,CAAC1L,EAAtB;AAAA,eAAnB,CAAhB;AAAA,aAAZ,CAAP;AACH,WAJD,CArBmB,CAAvB,CAHW,CA8BX;;AACA,eAAK6B,YAAL,CACI,gBADJ,EAEI,KAAKmO,eAAL,CAAqBjO,SAArB,CAA+B,UAAA0J,IAAI,EAAI;AACnC,mBAAI,CAAC5G,MAAL,GAAc4G,IAAd;;AACA,mBAAI,CAAC4M,MAAL;AACH,WAHD,CAFJ;AAOA,eAAKlK,eAAL,GAAuB,KAAK/M,QAAL,CAAcqG,YAAd,CAA2BD,QAAlD;AACA,eAAK2Q,KAAL,GAAa,CAAC;AAAEnY,cAAE,EAAE,EAAN;AAAU2F,gBAAI,EAAE;AAAhB,WAAD,EAA4CgL,MAA5C,CACT,KAAKvP,QAAL,CAAcqG,YAAd,CAA2B6Q,WAA3B,IAA0C,EADjC,CAAb;AAGA,eAAKF,WAAL,GAAmB,KAAKD,KAAL,CAAW,CAAX,CAAnB;AACA,eAAKJ,OAAL,CAAa3I,IAAb,CAAkB,EAAlB;AACH;AAED;;;;iCACgB7J,K,EAAc;AAC1B,eAAK0S,eAAL,CAAqB/M,IAArB,CAA0B3F,KAA1B;AACA,eAAK0S,eAAL,GAAuB,0FAAO,KAAKA,eAAZ,EAA6B,IAA7B,CAAvB;AACH;AAED;;;;oCACmB1S,K,EAAc;AAC7B,eAAK0S,eAAL,GAAuB,KAAKA,eAAL,CAAqBpR,MAArB,CAA4B,UAAAQ,OAAO;AAAA,mBAAIA,OAAO,CAACrH,EAAR,KAAeuF,KAAK,CAACvF,EAAzB;AAAA,WAAnC,CAAvB;AACH;AAED;;;;6BACYyL,I,EAAe;AACvB,eAAK3H,KAAL,CAAWO,IAAX,CAAgB;AAAE+F,kBAAM,EAAE,MAAV;AAAkBvB,oBAAQ,EAAE4C;AAA5B,WAAhB;AACH;;;iCAEgB;AACb,cAAMnG,GAAG,GAAG,EAAZ;AACA,cAAMM,OAAO,GAA4B;AACrCb,gBAAI,EAAE,KAAKlB,KAAL,CAAWkB,IADoB;AAErCC,oBAAQ,EAAE,KAAKnB,KAAL,CAAWmB,QAFgB;AAGrCa,gBAAI,EAAE,KAAKhC,KAAL,CAAWgC;AAHoB,WAAzC;AAKA,eAAKoS,eAAL,CAAqB9I,OAArB,CAA6B,UAAA5J,KAAK;AAAA,mBAAKD,GAAG,CAACC,KAAK,CAACvF,EAAP,CAAH,GAAgBuF,KAAK,CAACU,SAAN,CAAgBL,OAAhB,CAArB;AAAA,WAAlC;AACA,eAAKf,MAAL,CAAYsK,OAAZ,CAAoB,UAAA5J,KAAK;AAAA,mBAAKD,GAAG,CAACC,KAAK,CAACvF,EAAP,CAAH,GAAgBuF,KAAK,CAACU,SAAN,CAAgBL,OAAhB,CAArB;AAAA,WAAzB;AACA,eAAKsS,WAAL,GAAmB5S,GAAnB;AACH;;;4BA5FmB;AAChB,iBAAO,KAAKlE,QAAL,CAAcqG,YAAd,CAA2BC,SAAlC;AACH;AAED;;;;4BACmB;AACf,iBAAO,CAAC,CAAC,KAAK7D,KAAL,CAAW6M,QAApB;AACH;;;4BAEkB;AACf,iBAAO,CAAC,CAAC,KAAK7M,KAAL,CAAWiM,QAApB;AACH;;;;MArC0C,2E;;;uBAAlCkI,yB,EAAyB,gJ,EAAA,gEAyCtB,wEAzCsB,C;AAyCP,K;;;YAzClBA,yB;AAAyB,2C;AAAA;AAAA;AAAA,O;AAAA,0F;AAAA,e;AAAA,a;AAAA,0yB;AAAA;AAAA;ACjCtC;;AACI;;AAAqB;;AAA6C;;AAClE;;AACI;;AACJ;;AACJ;;AACA;;AACI;;AACI;;AACI;;AAyBA;;AACI;;AAyBJ;;AACJ;;AACA;;AAuDJ;;AACJ;;AACA;;AAQA;;AAQA;;;;;;AAtIyB;;AAAA;;AAEP;;AAAA;;AAMQ;;AAAA;;AA0BI;;AAAA,yFAAiC,UAAjC,EAAiC,GAAjC;;AA2BM;;AAAA;;;;;;;;;sED7BvBA,yB,EAAyB;cALrC,uDAKqC;eAL3B;AACPtV,kBAAQ,EAAE,sBADH;AAEPC,qBAAW,EAAE,qCAFN;AAGPC,mBAAS,EAAE,CAAC,qCAAD;AAHJ,S;AAK2B,Q;;;;;;kBAyC7B,oD;mBAAO,wE;;;;;gBAvCX;;;;;;;;;;;;;;;;;;;;AEnCL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QA2Ca2V,kB;;;;;;;AAiBT,kCACYC,QADZ,EAEYC,KAFZ,EAGYC,MAHZ,EAIYC,OAJZ,EAKYC,MALZ,EAMYC,SANZ,EAOYC,QAPZ,EAQYC,SARZ,EASYC,UATZ,EAUYC,aAVZ,EAWYC,QAXZ,EAYYC,MAZZ,EAaYC,SAbZ,EAcYC,OAdZ,EAeYC,UAfZ,EAgBYC,SAhBZ,EAiBYC,KAjBZ,EAkBYC,eAlBZ,EAmBYC,oBAnBZ,EAmB2D;AAAA;;AAAA;;AAEvD;AApBQ,gBAAAlB,QAAA,GAAAA,QAAA;AACA,gBAAAC,KAAA,GAAAA,KAAA;AACA,gBAAAC,MAAA,GAAAA,MAAA;AACA,gBAAAC,OAAA,GAAAA,OAAA;AACA,gBAAAC,MAAA,GAAAA,MAAA;AACA,gBAAAC,SAAA,GAAAA,SAAA;AACA,gBAAAC,QAAA,GAAAA,QAAA;AACA,gBAAAC,SAAA,GAAAA,SAAA;AACA,gBAAAC,UAAA,GAAAA,UAAA;AACA,gBAAAC,aAAA,GAAAA,aAAA;AACA,gBAAAC,QAAA,GAAAA,QAAA;AACA,gBAAAC,MAAA,GAAAA,MAAA;AACA,gBAAAC,SAAA,GAAAA,SAAA;AACA,gBAAAC,OAAA,GAAAA,OAAA;AACA,gBAAAC,UAAA,GAAAA,UAAA;AACA,gBAAAC,SAAA,GAAAA,SAAA;AACA,gBAAAC,KAAA,GAAAA,KAAA;AACA,gBAAAC,eAAA,GAAAA,eAAA;AACA,gBAAAC,oBAAA,GAAAA,oBAAA;AAnCZ;;AACQ,gBAAAC,YAAA,GAAyB,EAAzB;AACR;;AACU,gBAAAC,SAAA,GAEN,EAFM;AAGV;;AACU,gBAAAC,UAAA,GAAiD,EAAjD;AA+BN,gBAAKZ,aAAL,CAAmBa,MAAnB,GAA4B,QAAKX,MAAL,CAAYW,MAAZ,GAAqB,QAAKV,SAAL,CAAeU,MAAf,GAC3C,QAAKT,OAAL,CAAaS,MAAb,GAAsB,QAAKR,UAAL,CAAgBQ,MAAhB,GAAyB,QAAKN,KAAL,CAAWM,MAAX,GAC/C,QAAKZ,QAAL,CAAcY,MAAd,kCAFN;;AAGA,gBAAKC,GAAL,CAAS,QAAT,EAAmB,IAAnB;;AACA,gBAAKA,GAAL,CAAS,OAAT,EAAkB,MAAlB;;AACA,gBAAKA,GAAL,CAAS,SAAT,EAAoB,EAApB;;AACA,gBAAKvB,QAAL,CAAcwB,QAAd,CAAuB/R,IAAvB,CAA4B,6DAAM,UAAAC,CAAC;AAAA,iBAAIA,CAAJ;AAAA,SAAP,CAA5B,EAA2CnG,SAA3C,CAAqD,YAAM;AACvD,kBAAK0W,KAAL,CAAWwB,GAAX,CAAe,YAAM;AACjB,oBAAKC,OAAL,GAAe,IAAf;;AACA,oBAAKC,GAAL,CAAS,KAAT;;AACA,oBAAKC,UAAL;;AACA,oBAAKC,eAAL;AACH,WALD;AAMH,SAPD;;AATuD;AAiB1D;AAzCD;;;;;;AA+FA;;;;gCAIetS,G,EAAW;AACtB,iBAAO,KAAK8Q,SAAL,CAAeyB,GAAf,CAAmBvS,GAAnB,CAAP;AACH;AAED;;;;;AA8CA;;;;;;;;+BASIzD,I,EACAqO,O,EAOC;AAAA;;AAAA,cANDU,MAMC,uEANgB,IAMhB;AAAA,cALDkH,SAKC;AAAA,cAJDjH,IAIC,uEAJuB;AACpBhP,gBAAI,EAAE,MADc;AAEpB,qBAAO,gBAFa;AAGpB8O,mBAAO,EAAE;AAHW,WAIvB;;AAED,cAAMoH,YAAY,GAAG,KAAKjB,SAAL,CAAe7U,IAAf,CAAoBiO,OAApB,EAA6BU,MAA7B,EAAqC;AACtDoH,sBAAU,EAAE,CAACnW,IAAD,CAD0C;AAEtDU,oBAAQ,EAAE;AAF4C,WAArC,CAArB;;AAIA,eAAKnD,YAAL,CACI,gBADJ,EAEI2Y,YAAY,CAACE,cAAb,GAA8B3Y,SAA9B,CAAwC,YAAM;AAC1C,mBAAI,CAACU,KAAL,CAAW,gBAAX;;AACA,mBAAI,CAACA,KAAL,CAAW,QAAX;AACH,WAHD,CAFJ;;AAOA,cAAI4Q,MAAJ,EAAY;AACRkH,qBAAS,GAAGA,SAAS,IAAK;AAAA,qBAAMC,YAAY,CAACG,OAAb,EAAN;AAAA,aAA1B;;AACA,iBAAK9Y,YAAL,CACI,QADJ,EAEI2Y,YAAY,CAACI,QAAb,GAAwB7Y,SAAxB,CAAkC;AAAA,qBAAMwY,SAAS,EAAf;AAAA,aAAlC,CAFJ;AAIH;AACJ;AAED;;;;;;;;;sCAMqBM,G,EAAaxH,M,EAAiBkH,S,EAAsB;AACrE,cAAMjH,IAAI,GAAoB;AAC1BhP,gBAAI,EAAE,MADoB;AAE1B,qBAAO,gBAFmB;AAG1B8O,mBAAO,EAAE;AAHiB,WAA9B;AAKA0H,iBAAO,CAACC,KAAR,CAAcF,GAAd;AACA,eAAKG,MAAL,CAAY,SAAZ,EAAuBH,GAAvB,EAA4BxH,MAA5B,EAAoCkH,SAApC,EAA+CjH,IAA/C;AACH;AAED;;;;;;;;;oCAMmBuH,G,EAAaxH,M,EAAiBkH,S,EAAsB;AACnE,cAAMjH,IAAI,GAAoB;AAC1BhP,gBAAI,EAAE,MADoB;AAE1B,qBAAO,gBAFmB;AAG1B8O,mBAAO,EAAE;AAHiB,WAA9B;AAKA0H,iBAAO,CAACG,KAAR,CAAcJ,GAAd;AACA,eAAKG,MAAL,CAAY,OAAZ,EAAqBH,GAArB,EAA0BxH,MAA1B,EAAkCkH,SAAlC,EAA6CjH,IAA7C;AACH;AAED;;;;;;;;;mCAMkBuH,G,EAAaxH,M,EAAiBkH,S,EAAsB;AAClE,cAAMjH,IAAI,GAAoB;AAC1BhP,gBAAI,EAAE,MADoB;AAE1B,qBAAO,gBAFmB;AAG1B8O,mBAAO,EAAE;AAHiB,WAA9B;AAKA0H,iBAAO,CAACI,IAAR,CAAaL,GAAb;AACA,eAAKG,MAAL,CAAY,MAAZ,EAAoBH,GAApB,EAAyBxH,MAAzB,EAAiCkH,SAAjC,EAA4CjH,IAA5C;AACH;AAED;;;;;;;;;mCAMkBuH,G,EAAaxH,M,EAAiBkH,S,EAAsB;AAClEO,iBAAO,CAACK,IAAR,CAAaN,GAAb;AACA,eAAKG,MAAL,CAAY,MAAZ,EAAoBH,GAApB,EAAyBxH,MAAzB,EAAiCkH,SAAjC;AACH;AAED;;;;;;;;;;;4BASIjW,I,EACAuW,G,EACAO,I,EAEsB;AAAA,cADtBC,MACsB,uEADE,OACF;AAAA,cAAtBC,KAAsB,uEAAL,KAAK;;AAEtB,eAAKzC,SAAL,CAAesB,GAAf,CAAmB7V,IAAnB,EAAyBuW,GAAzB,EAA8BO,IAA9B,EAAoCC,MAApC,EAA4CC,KAA5C;AACH;AAED;;;;;;;4BAIoB3V,I,EAAY;AAC5B,iBAAO,KAAKiU,SAAL,CAAejU,IAAf,KAAwB,KAAKiU,SAAL,CAAejU,IAAf,aAAgC,oDAAxD,GACA,KAAKiU,SAAL,CAAejU,IAAf,EAA4C4V,QAA5C,EADA,GAED,IAFN;AAGH;AAED;;;;;;;;+BAKuB5V,I,EAAY;AAC/B,iBAAO,KAAKkU,UAAL,CAAgBlU,IAAhB,IAAwB,KAAKkU,UAAL,CAAgBlU,IAAhB,CAAxB,GAAgD,IAAvD;AACH;AAED;;;;;;;;4BAKoBA,I,EAAcgD,K,EAAQ;AACtC,cAAI,CAAC,KAAKiR,SAAL,CAAejU,IAAf,CAAL,EAA2B;AACvB,iBAAKiU,SAAL,CAAejU,IAAf,IAAuB,IAAI,oDAAJ,CAAuBgD,KAAvB,CAAvB;AACA,iBAAKkR,UAAL,CAAgBlU,IAAhB,IAAwB,KAAKiU,SAAL,CAAejU,IAAf,EAAqB6V,YAArB,EAAxB;AACH,WAHD,MAGO;AACH,iBAAK5B,SAAL,CAAejU,IAAf,EAAqByJ,IAArB,CAA0BzG,KAA1B;AACH;AACJ;AAED;;;;0CAC0B;AAAA;;AACtB;AACA,eAAKkQ,SAAL,CAAe/W,WAAf,CAA2BmG,IAA3B,CAAgC,6DAAM,UAAAC,CAAC;AAAA,mBAAIA,CAAJ;AAAA,WAAP,CAAhC,EAA+CnG,SAA/C,CAAyD;AAAA,mBAAM,OAAI,CAAC0Z,IAAL,EAAN;AAAA,WAAzD;AACH;AAED;;;;;;+BAGY;AAAA;;AACR,eAAKC,aAAL,GADQ,CAER;;AACA,eAAK3C,SAAL,CAAejX,WAAf,CAA2BmG,IAA3B,CAAgC,6DAAM,UAAAC,CAAC;AAAA,mBAAIA,CAAJ;AAAA,WAAP,CAAhC,EAA+CnG,SAA/C,CAAyD,YAAM;AAC3D,mBAAI,CAACoX,MAAL,CAAYsC,IAAZ;;AACA,mBAAI,CAACxC,aAAL,CAAmBwC,IAAnB,GAF2D,CAG3D;;;AACA,mBAAI,CAACxC,aAAL,CAAmBvJ,MAAnB,CAA0B,iBAA1B,EAA6CzH,IAA7C,CAAkD,6DAAM,UAAAC,CAAC;AAAA,qBAAIA,CAAJ;AAAA,aAAP,CAAlD,EAAiEnG,SAAjE,CAA2E,UAAAmG,CAAC,EAAI;AAC5E,qBAAI,CAACkR,SAAL,CAAeqC,IAAf;;AACA,qBAAI,CAACpC,OAAL,CAAaoC,IAAb;AACH,aAHD;;AAIA,mBAAI,CAACE,YAAL,CAAkBvM,IAAlB,CAAuB,IAAvB;AACH,WATD,EAHQ,CAaR;;;AACA,cAAIpM,MAAM,CAAC+X,KAAX,EAAkB;AACd/X,kBAAM,CAAC4Y,WAAP,GAAqB,IAArB;AACH;AACJ;AAED;;;;;;wCAGqB;AACjB,eAAKzB,GAAL,CAAS,QAAT,EAAmB,sBAAnB;AACA,cAAMpW,OAAO,GAA4B,KAAKuW,GAAL,CAAS,SAAT,KAAuB,EAAhE;AACAvW,iBAAO,CAAC8X,QAAR,GAAmB;AACflJ,mBAAO,EAAE,iCADM;AAEf3Q,iBAAK,EAAE;AAFQ,WAAnB;AAIA,eAAK+X,GAAL,CAAS,SAAT,EAAoBhW,OAApB,EAPiB,CAQjB;;AACA,cAAM+X,QAAQ,GAAqB,KAAKjD,SAAL,CAAeyB,GAAf,CAAmB,UAAnB,KAAkC,EAArE;AACA,cAAMyB,QAAQ,GAAGD,QAAQ,CAACC,QAAT,IAAqB1a,QAAQ,CAAC0a,QAA/C;AACA,cAAMlW,IAAI,GAAGiW,QAAQ,CAACE,MAAT,IAAmB3a,QAAQ,CAAC4a,QAAzC;AACA,cAAMC,IAAI,GAAGJ,QAAQ,CAACI,IAAT,IAAiB7a,QAAQ,CAAC6a,IAAvC;AACA,cAAMC,GAAG,GAAGL,QAAQ,CAACM,UAAT,aAAyBL,QAAzB,eAAsClW,IAAtC,cAA8CqW,IAA9C,IAAuD7a,QAAQ,CAACE,MAA5E;AACA,cAAM8H,KAAK,GAAGyS,QAAQ,CAACzS,KAAT,IAAkB,EAAhC;;AACA,cAAMgT,IAAI,GAAG,KAAKxD,SAAL,CAAeyB,GAAf,CAAmB,MAAnB,CAAb,CAfiB,CAgBjB;;;AACA,cAAMgC,MAAM,GAAmB;AAC3BC,iBAAK,EAAE,QADoB;AAE3B1W,gBAAI,YAAKA,IAAL,cAAaqW,IAAb,CAFuB;AAG3BM,oBAAQ,YAAKL,GAAL,0BAHmB;AAI3BM,qBAAS,YAAKN,GAAL,gBAJkB;AAK3BO,wBAAY,YAAKrb,QAAQ,CAACE,MAAd,SAAuB8H,KAAvB,qBALe;AAM3BsT,wBAAY,EAAE,CAACb,QAAQ,CAACc,WANG;AAO3BP,gBAAI,EAAJA;AAP2B,WAA/B;;AASA,eAAKtD,SAAL,CAAepX,KAAf,CAAqB2a,MAArB;;AACAvY,iBAAO,CAAC8X,QAAR,GAAmB;AACflJ,mBAAO,EAAE,iCADM;AAEf3Q,iBAAK,EAAE;AAFQ,WAAnB;AAIA,eAAK+X,GAAL,CAAS,SAAT,EAAoBhW,OAApB;AACH;AAED;;;;;;qCAGqB;AAAA;;AACjB,cAAI,KAAK6U,MAAL,CAAYiE,SAAhB,EAA2B;AACvB,iBAAKhb,YAAL,CACI,cADJ,EAEI,KAAK+W,MAAL,CAAYxT,SAAZ,CAAsBrD,SAAtB,CAAgC,UAAA+B,KAAK,EAAI;AACrC,kBAAMmD,OAAO,gCAAyBnD,KAAK,CAACmD,OAAN,CAAc6V,IAAvC,CAAb;AACA,kBAAM1X,SAAS,kCAA2BtB,KAAK,CAACsB,SAAN,CAAgB0X,IAA3C,CAAf;;AACA,qBAAI,CAAC3C,GAAL,CAAS,OAAT,8BAAuClT,OAAvC,cAAkD7B,SAAlD;;AACA,qBAAI,CAAC2X,cAAL;AACH,aALD,CAFJ;AASA,iBAAKlb,YAAL,CACI,iBADJ,EAEI,KAAK+W,MAAL,CAAYoE,SAAZ,CAAsBjb,SAAtB,CAAgC,YAAM;AAClC,qBAAI,CAACoY,GAAL,CAAS,OAAT;;AACA,qBAAI,CAAC5P,UAAL,CACI,+CADJ,EAEI,SAFJ,EAGI;AAAA,uBAAMlJ,QAAQ,CAAC4b,MAAT,CAAgB,IAAhB,CAAN;AAAA,eAHJ;AAKH,aAPD,CAFJ;AAWAC,uBAAW,CAAC,YAAM;AACd,qBAAI,CAAC/C,GAAL,CAAS,OAAT;;AACA,qBAAI,CAACvB,MAAL,CAAYuE,cAAZ;AACH,aAHU,EAGR,IAAI,EAAJ,GAAS,IAHD,CAAX;AAIH;AACJ;AAED;;;;;;;yCAIyB;AAAA;;AACrB,cAAI,KAAKvE,MAAL,CAAYiE,SAAhB,EAA2B;AACvB,iBAAK1C,GAAL,CAAS,OAAT;;AACA,iBAAKvB,MAAL,CAAYmE,cAAZ,GAA6Btd,IAA7B,CAAkC,YAAM;AACpC,qBAAI,CAAC8K,UAAL,CAAgB,+CAAhB,EAAiE,SAAjE,EAA4E;AAAA,uBACxElJ,QAAQ,CAAC4b,MAAT,CAAgB,IAAhB,CADwE;AAAA,eAA5E;AAGH,aAJD;AAKH;AACJ;;;4BAvZmB;AAChB,iBAAO,KAAK/C,OAAL,IAAgB,KAAvB;AACH;;;4BAwCqB;AAClB,iBAAO,KAAKnB,SAAL,CAAeqE,QAAtB;AACH;AACD;;;;4BACuB;AACnB,iBAAO,EAAP;AACH;AACD;;;;4BACqB;AACjB,iBAAO,KAAKtE,QAAZ;AACH;AACD;;;;4BAC0B;AACtB,iBAAO,KAAKG,aAAZ;AACH;AACD;;;;4BACmB;AACf,iBAAO,KAAKE,MAAZ;AACH;AACD;;;;4BACsB;AAClB,iBAAO,KAAKC,SAAZ;AACH;AACD;;;;4BACoB;AAChB,iBAAO,KAAKC,OAAZ;AACH;AACD;;;;4BACqB;AACjB,iBAAO,KAAKH,QAAZ;AACH;AACD;;;;4BACuB;AACnB,iBAAO,KAAKI,UAAZ;AACH;AACD;;;;4BACkB;AACd,iBAAO,KAAKE,KAAZ;AACH;AACD;;;;4BAC2B;AACvB,iBAAO,KAAKC,eAAZ;AACH;AACD;;;;4BACgC;AAC5B,iBAAO,KAAKC,oBAAZ;AACH;AACD;;;;4BACsB;AAClB,iBAAO,KAAKX,SAAZ;AACH;;;4BAWiB;AACd,iBAAO,KAAKF,SAAL,CAAewE,QAAtB;AACH;AAED;;;;;;0BAGiB1U,K,EAAe;AAC5B,cAAM2U,YAAY,GAAG,KAAK3S,OAAL,CAAa,WAAb,CAArB;AACA,eAAKoP,GAAL,CAAS,OAAT,EAAkBpR,KAAlB;;AACA,eAAK+P,MAAL,CAAY6E,QAAZ,WAAwB5U,KAAK,GAAGA,KAAK,GAAG,KAAX,GAAmB,EAAhD,SAAqD2U,YAArD;AACH;AAED;;;;4BAGgB;AACZ,iBAAO,KAAK5E,MAAL,CAAY8E,QAAZ,EAAP;AACH;AAED;;;;4BACsB;AAClB;AACH;AAED;;;;4BAC6B;AACzB,iBAAO,KAAKzE,SAAL,CAAe3W,IAAf,CAAoBqb,YAApB,GAAmC,GAA1C;AACH;AAED;;;;4BACuB;AACnB,iBAAO,KAAK5E,SAAL,CAAe6E,cAAtB;AACH;AAED;;;;4BACkB;AACd,iBAAO,KAAKzE,aAAL,CAAmByE,cAA1B;AACH;AAED;;;;4BACmB;AACf,iBAAO,KAAKC,YAAL,IAAqB,KAAKC,OAAjC;AACH;;;;MA/JmC,4D;;;uBAA3BrF,kB,EAAkB,oH,EAAA,4G,EAAA,uH,EAAA,8G,EAAA,wH,EAAA,yH,EAAA,uH,EAAA,yH,EAAA,+H,EAAA,oJ,EAAA,qI,EAAA,+H,EAAA,wI,EAAA,kI,EAAA,wI,EAAA,gI,EAAA,iJ,EAAA,mJ,EAAA,6J;AAAA,K;;;aAAlBA,kB;AAAkB,eAAlBA,kBAAkB,K;AAAA,kBAFf;;;;;sEAEHA,kB,EAAkB;cAH9B,wDAG8B;eAHnB;AACRsF,oBAAU,EAAE;AADJ,S;AAGmB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3C/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAoBO,QAAMC,mBAAmB,GAAG,CAAC,MAAD,EAAS,OAAT,CAA5B;;QAIMC,a;;;;;;;AA0BT,6BAAYC,QAAZ,EAA+B;AAAA;;AAAA;;AAC3B;AAdJ;;AACgB,gBAAAlI,YAAA,GAAe,IAAI,4CAAJ,EAAf;AAChB;;AACU,gBAAAmI,MAAA,GAAiB,eAAjB;AACV;;AACU,gBAAAC,QAAA,GAAoB,EAApB;AACV;;AACU,gBAAAC,aAAA,GAAiC,EAAjC;AAQN,gBAAKne,EAAL,GAAUge,QAAQ,CAAChe,EAAT,IAAege,QAAQ,CAACI,OAAxB,IAAmCJ,QAAQ,CAACjX,KAA5C,IAAqD,EAA/D;AACA,gBAAKpB,IAAL,GAAYqY,QAAQ,CAACrY,IAAT,IAAiB,EAA7B;AACA,gBAAKoB,KAAL,GAAa,UAAGiX,QAAQ,CAACjX,KAAT,IAAkB,EAArB,EAA0BsJ,WAA1B,EAAb;AACA,gBAAK6N,QAAL,GAAgB,EAAhB;AAL2B;AAM9B;AA7BD;;;;;;AA8CA;;;;;2CAMInW,G,EACAY,K,EAAuC;AAEvC,cAAI,OAAOA,KAAP,KAAiB,OAAO,KAAKZ,GAAL,CAA5B,EAA8C;AAC1C,iBAAKmW,QAAL,CAAcnW,GAAd,IAA4BY,KAA5B;AACA,iBAAKtE,IAAL,CAAU,cAAV,EAA0B;AAAE0D,iBAAG,EAAHA,GAAF;AAAOY,mBAAK,EAALA;AAAP,aAA1B;AACH,WAHD,MAGO;AACH,kBAAM,IAAIhJ,KAAJ,oCAAqCgJ,KAArC,8BAA4DZ,GAA5D,QAAN;AACH;;AACD,iBAAO,IAAP;AACH;;;8CAEyB;AACtB,iBAAO,KAAKmW,QAAZ;AACA,eAAKA,QAAL,GAAgB,EAAhB;AACA,eAAK7Z,IAAL,CAAU,OAAV;AACH;AAED;;;;;;+BAGkC;AAAA;;AAAA,cAAtBiX,KAAsB,uEAAL,KAAK;;AAC9B,cAAI,CAAC,KAAKhR,WAAL,IAAoBgR,KAArB,KAA+B,KAAKla,QAAxC,EAAkD;AAC9C,gBAAMqH,IAAI,GAAG,KAAKgB,MAAL,EAAb;AACA,mBAAO,IAAIlK,OAAJ,CAAY,UAACC,OAAD,EAAU0F,MAAV,EAAqB;AACpC,kBAAMmZ,OAAO,GAAG,OAAI,CAACre,EAAL,GACV,OAAI,CAACoB,QAAL,CAAciX,MAAd,CAAqB,OAAI,CAACrY,EAA1B,EAA8ByI,IAA9B,CADU,GAEV,OAAI,CAACrH,QAAL,CAAcmF,GAAd,CAAkBkC,IAAlB,CAFN;AAGA4V,qBAAO,CAAC5e,IAAR,CACI,UAAC6e,CAAD,EAAO;AACH,uBAAI,CAACja,IAAL,CAAyB,YAAzB,EAAuCia,CAAvC;;AACA9e,uBAAO,CAAC8e,CAAD,CAAP;AACH,eAJL,EAKI,UAACpW,CAAD;AAAA,uBAAOhD,MAAM,CAACgD,CAAD,CAAb;AAAA,eALJ;AAOH,aAXM,CAAP;AAYH,WAdD,MAcO;AACH3I,mBAAO,CAAC2F,MAAR,CAAe,2BAAf;AACH;AACJ;AAED;;;;;;kCAGa;AACT,cAAI,KAAKlF,EAAT,EAAa;AACT,mBAAO,KAAKoB,QAAL,WAAqB,KAAKpB,EAA1B,CAAP;AACH;AACJ;AAED;;;;;;;;gCAKeue,S,EAAmBC,U,EAAmB;AACjD,cAAI,KAAKxe,EAAT,EAAa;AACT,mBAAO,KAAKoB,QAAL,CAAcqd,IAAd,CAAmB,KAAKze,EAAxB,EAA4Bue,SAA5B,EAAuCC,UAAvC,CAAP;AACH;AACJ;AACD;;;;;;iCAG+D;AAAA,cAA5BE,YAA4B,uEAAJ,IAAI;AAC3D,cAAMC,GAAG,qBAAa,IAAb,CAAT,CAD2D,CAE3D;;AACA,iBAAOA,GAAG,CAACvd,QAAX;AACA,iBAAOud,GAAG,CAACT,QAAX;AACA,iBAAOS,GAAG,CAAC7I,YAAX,CAL2D,CAM3D;;AACA,iBAAO6I,GAAG,CAACC,OAAX;AACA,iBAAOD,GAAG,CAACE,UAAX;AACA,iBAAOF,GAAG,CAACG,cAAX;AACA,iBAAOH,GAAG,CAACR,aAAX;AACA,iBAAOQ,GAAG,CAAChD,YAAX,CAX2D,CAY3D;;AACA,cAAM9b,IAAI,GAAGiI,MAAM,CAACjI,IAAP,CAAY8e,GAAZ,CAAb;;AACA,mCAAkB9e,IAAlB,2BAAwB;AAAnB,gBAAMkI,GAAG,YAAT;;AACD,gBAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAChB,kBAAMgX,OAAO,GAAG,KAAKZ,aAAL,CAAmBpW,GAAG,CAACiX,MAAJ,CAAW,CAAX,CAAnB,KAAqCjX,GAAG,CAACiX,MAAJ,CAAW,CAAX,CAArD;AACAL,iBAAG,CAACI,OAAD,CAAH,GAAeJ,GAAG,CAAC5W,GAAD,CAAlB;AACA,qBAAO4W,GAAG,CAAC5W,GAAD,CAAV;AACH,aAJD,MAIO,IAAI4W,GAAG,CAAC5W,GAAD,CAAH,KAAakX,SAAjB,EAA4B;AAC/B,qBAAON,GAAG,CAAC5W,GAAD,CAAV;AACH;AACJ;;AACD,iBAAO2W,YAAY,GAAG,MAAD,OAAC,CAAD,kBAAMC,GAAN,CAAC,EAAa,KAAKT,QAAlB,CAAH,GAAkCS,GAArD;AACH;AAED;;;;;;;;6BAKyBra,I,EAA0BuE,Q,EAAY;AAC3D,eAAKiN,YAAL,CAAkB1G,IAAlB,CAAuB;AAAE9K,gBAAI,EAAJA,IAAF;AAAQuE,oBAAQ,EAARA;AAAR,WAAvB;AACH;AAED;;;;;;gCAGY;AACR,iBAAO,IAAIkV,aAAJ,CAAkB,IAAlB,CAAP;AACH;AAED;;;;;;oCAGgB;AACZ,iBAAO,IAAIA,aAAJ,CAAkB,MAAD,OAAC,CAAD,kBAAM,IAAN,CAAC,EAAS;AAAE/d,cAAE,EAAE,IAAN;AAAY+G,iBAAK,EAAE;AAAnB,WAAT,CAAlB,CAAP;AACH;;;;AAhJD;4BACsB;AAClB,iBAAOgX,aAAa,CAACmB,YAAd,CAA2B,KAAKjB,MAAhC,CAAP;AACH;AAUD;;;;4BACsB;AAClB,eAAK,IAAMlW,GAAX,IAAkB,KAAKjD,OAAvB,EAAgC;AAC5B,gBAAI,KAAKA,OAAL,CAAaiD,GAAb,CAAJ,EAAuB;AACnB,qBAAO,IAAP;AACH;AACJ;;AACD,iBAAO,KAAP;AACH;AAED;;;;4BACkB;AACd,iBAAO0L,IAAI,CAAC0L,KAAL,CAAW1L,IAAI,CAACC,SAAL,CAAe,KAAKwK,QAApB,CAAX,CAAP;AACH;;;mCA3CwB5Z,I,EAAc8a,O,EAAoB;AACvDrB,uBAAa,CAACmB,YAAd,CAA2B5a,IAA3B,IAAmC8a,OAAnC;AACH;;;;MAN8B,4D;AAC/B;;;AACe,kBAAAF,YAAA,GAAqC,EAArC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCXNG,c;;;;;;;AA0BT,8BAAsBtG,SAAtB,EAAkD;AAAA;;AAAA;;AAC9C;AADkB,gBAAAA,SAAA,GAAAA,SAAA;AAnBtB;;AACU,gBAAAa,SAAA,GAAoE,EAApE;AACV;;AACU,gBAAAC,UAAA,GAAiD,EAAjD;AACV;;AACU,gBAAAyF,YAAA,GAAmD,EAAnD;AACV;;AACU,gBAAAC,SAAA,GAA6C,EAA7C;AACV;;AACU,gBAAAC,QAAA,GAAoC,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAC1CD,CAAC,KAAKC,CAAN,IAAYD,CAAS,CAACzf,EAAV,KAAkB0f,CAAS,CAAC1f,EADE;AAAA,SAApC;AAEV;;;AACU,gBAAA2f,YAAA,GAAkC,UAACF,CAAD;AAAA,iBAAO,CAAC,CAACA,CAAT;AAAA,SAAlC;;AASN,gBAAKG,KAAL,GAAa,MAAb;AACA,gBAAKC,UAAL,GAAkB,MAAlB;;AACA,gBAAK9F,GAAL,CAAS,MAAT,EAAiB,EAAjB;;AAJ8C;AAKjD;AAVD;;;;;;AAYA;;;+BAGc;AAAA;;AACV,cAAI,CAAC,KAAKD,MAAV,EAAkB;AACd,mBAAO,KAAK7X,OAAL,CAAa,MAAb,EAAqB;AAAA,qBAAM,OAAI,CAACwZ,IAAL,EAAN;AAAA,aAArB,CAAP;AACH;;AACD,eAAK3B,MAAL,CAAYhY,WAAZ,CAAwBmG,IAAxB,CAA6B,6DAAM,UAACC,CAAD;AAAA,mBAAOA,CAAP;AAAA,WAAN,CAA7B,EAA8CnG,SAA9C,CAAwD,YAAM;AAC1D,mBAAI,CAAC+d,IAAL,GAAYrgB,IAAZ,CACI,UAACyI,CAAD;AAAA,qBAAO,OAAI,CAACyT,YAAL,CAAkBvM,IAAlB,CAAuB,IAAvB,CAAP;AAAA,aADJ,EAEI,UAAC5K,GAAD,EAAS;AACL,qBAAI,CAACsV,MAAL,CAAYrV,WAAZ,6BACyB,OAAI,CAACmb,KAD9B,8BAEQpb,GAAG,CAACub,QAAJ,IAAgBvb,GAAG,CAACmO,OAApB,IAA+BnO,GAFvC;;AAKA,qBAAI,CAACvC,OAAL,CAAa,MAAb,EAAqB;AAAA,uBAAM,OAAI,CAACwZ,IAAL,EAAN;AAAA,eAArB,EAAwC,IAAxC;AACH,aATL;AAWH,WAZD;AAaH;AAED;;;;;;;gCAIsC;AAAA,cAAzBuE,MAAyB,uEAAP,KAAO;AAClC,cAAMzd,QAAQ,GAAG,KAAKuX,MAAL,GACXkG,MAAM,GACF,KAAKlG,MAAL,CAAYmG,eADV,GAEF,KAAKnG,MAAL,CAAYvX,QAHL,GAIX,YAJN;AAKA,2BAAUA,QAAV,SAAqB,KAAKsd,UAA1B;AACH;AACD;;;;;AAKA;;;;gCAIe9X,G,EAAa;AACxB,iBAAO,KAAK+R,MAAL,GAAc,KAAKA,MAAL,CAAYnP,OAAZ,eAA2B,KAAKiV,KAAL,CAAWvP,WAAX,EAA3B,cAAuDtI,GAAvD,EAAd,GAA8E,IAArF;AACH;AAED;;;;;;;4BAIoBpC,I,EAAY;AAC5B,cAAI,CAAC,KAAKkU,UAAL,CAAgBlU,IAAhB,CAAL,EAA4B;AACxB,iBAAKoU,GAAL,CAAYpU,IAAZ,EAAkB,IAAlB;AACH;;AACD,iBAAQ,KAAKiU,SAAL,CAAejU,IAAf,EAA4C4V,QAA5C,EAAR;AACH;AAED;;;;;;;;+BAKuB5V,I,EAAY;AAC/B,cAAI,CAAC,KAAKkU,UAAL,CAAgBlU,IAAhB,CAAL,EAA4B;AACxB,iBAAKoU,GAAL,CAAYpU,IAAZ,EAAkB,IAAlB;AACH;;AACD,iBAAO,KAAKkU,UAAL,CAAgBlU,IAAhB,CAAP;AACH;AAED;;;;;;;;4BAKuBA,I,EAAcgD,K,EAAQ;AACzC,cAAI,CAAC,KAAKiR,SAAL,CAAejU,IAAf,CAAL,EAA2B;AACvB,iBAAKiU,SAAL,CAAejU,IAAf,IAAuB,IAAI,oDAAJ,CAAuBgD,KAAvB,CAAvB;AACA,iBAAKkR,UAAL,CAAgBlU,IAAhB,IAAwB,KAAKiU,SAAL,CAAejU,IAAf,EAAqB6V,YAArB,EAAxB;AACH,WAHD,MAGO;AACH,iBAAK5B,SAAL,CAAejU,IAAf,EAAqByJ,IAArB,CAA0BzG,KAA1B;AACH;AACJ;AAED;;;;;;;iCAI8D;AAAA,cAAhDuX,SAAgD,uEAAjB,KAAKP,YAAY;AAC1D,cAAMlU,IAAI,GAAG,KAAK6O,GAAL,CAAS,MAAT,KAAoB,EAAjC;AACA,iBAAO7O,IAAI,CAAC1F,MAAL,CAAY,UAAC0Z,CAAD,EAAI3Y,CAAJ,EAAU;AACzB,gBAAIoZ,SAAS,CAACpZ,CAAD,CAAb,EAAkB;AACd2Y,eAAC,CAACvU,IAAF,CAAOpE,CAAP;AACH;;AACD,mBAAO2Y,CAAP;AACH,WALM,EAKJ,EALI,CAAP;AAMH;AAED;;;;;;;6BAIYzf,E,EAAU;AAClB,cAAMyL,IAAI,GAAG,KAAK6O,GAAL,CAAS,MAAT,KAAoB,EAAjC;AACA,iBAAO7O,IAAI,CAAC9E,IAAL,CAAU,UAACG,CAAD;AAAA,mBAAOA,CAAC,CAAC9G,EAAF,KAASA,EAAT,IAAe8G,CAAC,CAACC,KAAF,KAAY/G,EAAlC;AAAA,WAAV,CAAP;AACH;AAED;;;;;;;gCAI0D;AAAA;;AAAA,cAA7CmgB,YAA6C,uEAArB;AAAEC,uBAAW,EAAE;AAAf,WAAqB;AACtD,cAAIJ,MAAM,GAAG,KAAb;AACA,cAAIK,KAAK,GAAG,IAAZ;AACA;;AACA,cAAIF,YAAJ,EAAkB;AACdH,kBAAM,GAAG,CAAC,CAACG,YAAY,CAACH,MAAxB;AACA,mBAAOG,YAAY,CAACH,MAApB;AACAK,iBAAK,GAAGF,YAAY,CAACE,KAAb,IAAsB,IAA9B;AACA,mBAAOF,YAAY,CAACE,KAApB;AACH;;AACD,cAAMpT,KAAK,GAAG,sFAAckT,YAAd,CAAd;AACA,cAAMpY,GAAG,mBAAYkF,KAAZ,CAAT;;AACA,cAAI,CAAC,KAAKsS,SAAL,CAAexX,GAAf,CAAL,EAA0B;AACtB,iBAAKwX,SAAL,CAAexX,GAAf,IAAsB,IAAIxI,OAAJ,CAAY,UAACC,OAAD,EAAU0F,MAAV,EAAqB;AACnD,kBAAMiX,GAAG,aAAM,OAAI,CAAC9S,KAAL,CAAW2W,MAAX,CAAN,SAA2B/S,KAAK,GAAG,MAAMA,KAAT,GAAiB,EAAjD,CAAT;AACA,kBAAIqT,MAAM,GAAoB,EAA9B;;AACA,qBAAI,CAACC,IAAL,CAAUjG,GAAV,CAAc6B,GAAd,EAAmBpa,SAAnB,CACI,UAACuc,CAAD,EAAoC;AAChCgC,sBAAM,GACFhC,CAAC,IAAIA,CAAC,YAAY1H,KAAlB,GACM0H,CAAC,CAAChZ,GAAF,CAAM,UAACwB,CAAD;AAAA,yBAAO,OAAI,CAAC0Z,OAAL,CAAa1Z,CAAb,CAAP;AAAA,iBAAN,CADN,GAEMwX,CAAC,IAAI,EAAEA,CAAC,YAAY1H,KAAf,CAAL,IAA8B0H,CAAC,CAACmC,OAAhC,GACCnC,CAAC,CAACmC,OADH,GAEA,EALV;AAMH,eARL,EASI,UAAC/gB,CAAD,EAAO;AACHwF,sBAAM,CAACxF,CAAD,CAAN;AACA,uBAAI,CAAC6f,SAAL,CAAemB,QAAf,GAA0B,IAA1B;AACH,eAZL,EAaI,YAAM;AACF,oBACI,CAAC,CAACzT,KAAD,IAAWkT,YAAY,IAAIA,YAAY,CAACC,WAAzC,KACAE,MAAM,CAACrb,MAAP,GAAgB,CADhB,IAEAqb,MAAM,CAAC,CAAD,CAAN,YAAqB,6DAHzB,EAIE;AACE,yBAAI,CAACvG,GAAL,CAAS,MAAT,EAAiB,OAAI,CAAC4G,UAAL,CAAgB,OAAI,CAACrG,GAAL,CAAS,MAAT,CAAhB,EAAkCgG,MAAlC,CAAjB;AACH;;AACD9gB,uBAAO,CAAC8gB,MAAD,CAAP;;AACA,uBAAI,CAACre,OAAL,CAAa8F,GAAb,EAAkB;AAAA,yBAAO,OAAI,CAACwX,SAAL,CAAexX,GAAf,IAAsB,IAA7B;AAAA,iBAAlB,EAAsDsY,KAAtD;AACH,eAvBL;AAyBH,aA5BqB,CAAtB;AA6BH;;AACD,iBAAO,KAAKd,SAAL,CAAexX,GAAf,CAAP;AACH;AAED;;;;;;;;6BAKY/H,E,EAAsC;AAAA;;AAAA,cAA1BmgB,YAA0B,uEAAF,EAAE;AAC9C,cAAIH,MAAM,GAAG,KAAb;AACA;;AACA,cAAIG,YAAJ,EAAkB;AACdH,kBAAM,GAAG,CAAC,CAACG,YAAY,CAACH,MAAxB;AACA,mBAAOG,YAAY,CAACH,MAApB;AACH;;AACD,cAAM/S,KAAK,GAAG,sFAAckT,YAAd,CAAd;AACA,cAAMpY,GAAG,kBAAW/H,EAAX,cAAiBiN,KAAjB,CAAT;AACA;;AACA,cAAI,CAAC,KAAKsS,SAAL,CAAexX,GAAf,CAAL,EAA0B;AACtB,iBAAKwX,SAAL,CAAexX,GAAf,IAAsB,IAAIxI,OAAJ,CAAe,UAACC,OAAD,EAAU0F,MAAV,EAAqB;AACtD,kBAAMiX,GAAG,aAAM,OAAI,CAAC9S,KAAL,CAAW2W,MAAX,CAAN,cAA4BhgB,EAA5B,SAAiCiN,KAAK,GAAG,MAAMA,KAAT,GAAiB,EAAvD,CAAT;AACA,kBAAIqT,MAAM,GAAM,IAAhB;;AACA,qBAAI,CAACC,IAAL,CAAUjG,GAAV,CAAc6B,GAAd,EAAmBpa,SAAnB,CACI,UAACuc,CAAD;AAAA,uBAAQgC,MAAM,GAAG,OAAI,CAACE,OAAL,CAAalC,CAAb,CAAjB;AAAA,eADJ,EAEI,UAAC5e,CAAD,EAAO;AACHwF,sBAAM,CAACxF,CAAD,CAAN;AACA,uBAAI,CAAC6f,SAAL,CAAemB,QAAf,GAA0B,IAA1B;AACH,eALL,EAMI,YAAM;AACFlhB,uBAAO,CAAC8gB,MAAD,CAAP;;AACA,uBAAI,CAACre,OAAL,CAAa8F,GAAb,EAAkB;AAAA,yBAAO,OAAI,CAACwX,SAAL,CAAexX,GAAf,IAAsB,IAA7B;AAAA,iBAAlB,EAAsD,IAAtD;AACH,eATL;AAWH,aAdqB,CAAtB;AAeH;;AACD,iBAAO,KAAKwX,SAAL,CAAexX,GAAf,CAAP;AACH;AAED;;;;;;;;4BAKWyB,S,EAA8C;AAAA;;AAAA,cAA1B2W,YAA0B,uEAAF,EAAE;;AACrD;AACA,cAAI,CAAC,KAAKZ,SAAL,CAAemB,QAApB,EAA8B;AAC1B,iBAAKnB,SAAL,CAAemB,QAAf,GAA0B,IAAInhB,OAAJ,CAAe,UAACC,OAAD,EAAU0F,MAAV,EAAqB;AAC1D,kBAAM+H,KAAK,GAAG,sFAAckT,YAAd,CAAd;AACA,kBAAMhE,GAAG,aAAM,OAAI,CAAC9S,KAAL,CAAW8W,YAAY,CAACH,MAAxB,CAAN,SAAwC/S,KAAK,GAAG,MAAMA,KAAT,GAAiB,EAA9D,CAAT;AACA,kBAAIqT,MAAM,GAAM,IAAhB;;AACA,qBAAI,CAACC,IAAL,CAAUK,IAAV,CAAezE,GAAf,EAAoB3S,SAApB,EAA+BzH,SAA/B,CACI,UAACuc,CAAD;AAAA,uBAAQgC,MAAM,GAAG,OAAI,CAACE,OAAL,CAAalC,CAAb,CAAjB;AAAA,eADJ,EAEI,UAAC5e,CAAD,EAAO;AACHwF,sBAAM,CAACxF,CAAD,CAAN;;AACA,uBAAI,CAACmhB,cAAL,kBAA8B,OAAI,CAACjB,KAAL,CAAWvP,WAAX,EAA9B;;AACA,uBAAI,CAACkP,SAAL,CAAemB,QAAf,GAA0B,IAA1B;AACH,eANL,EAOI,YAAM;AACFlhB,uBAAO,CAAC8gB,MAAD,CAAP;;AACA,uBAAI,CAACvG,GAAL,CAAS,MAAT,EAAiB,OAAI,CAAC4G,UAAL,CAAgB,OAAI,CAACrG,GAAL,CAAS,MAAT,CAAhB,EAAkC,CAACgG,MAAD,CAAlC,CAAjB;;AACA,uBAAI,CAACO,cAAL,kBAA8B,OAAI,CAACjB,KAAL,CAAWvP,WAAX,EAA9B;;AACA,uBAAI,CAACkP,SAAL,CAAemB,QAAf,GAA0B,IAA1B;AACH,eAZL;AAcH,aAlByB,CAA1B;AAmBH;;AACD,iBAAO,KAAKnB,SAAL,CAAemB,QAAtB;AACH;AAED;;;;;;;;;;6BAQI1gB,E,EACAue,S,EAE+B;AAAA;;AAAA,cAD/B/U,SAC+B,uEADV,EACU;AAAA,cAA/BsX,MAA+B,uEAAN,MAAM;AAE/B,cAAM7T,KAAK,GAAG,sFAAczD,SAAd,CAAd;AACA,cAAMzB,GAAG,kBAAW/H,EAAX,cAAiBue,SAAjB,cAA8BtR,KAA9B,CAAT;AACA;;AACA,cAAI,CAAC,KAAKsS,SAAL,CAAexX,GAAf,CAAL,EAA0B;AACtB,iBAAKwX,SAAL,CAAexX,GAAf,IAAsB,IAAIxI,OAAJ,CAAe,UAACC,OAAD,EAAU0F,MAAV,EAAqB;AACtD,kBAAM6b,SAAS,GAAG,MAAH,OAAG,CAAH,kBAAQvX,SAAR,CAAG,EAAc;AAAExJ,kBAAE,EAAFA,EAAF;AAAMghB,qBAAK,EAAEzC;AAAb,eAAd,CAAlB;AACA,kBAAMpC,GAAG,aAAM,OAAI,CAAC8E,SAAX,cAAwBjhB,EAAxB,cAA8Bue,SAA9B,CAAT;AACA,kBAAI+B,MAAJ;AACA,kBAAMta,OAAO,GACT8a,MAAM,KAAK,MAAX,GACM,OAAI,CAACP,IAAL,CAAUK,IAAV,CAAezE,GAAf,EAAoB4E,SAApB,CADN,GAEM,OAAI,CAACR,IAAL,CAAUjG,GAAV,WAAiB6B,GAAjB,SAAuBlP,KAAK,GAAG,MAAMA,KAAT,GAAiB,EAA7C,EAHV;AAIAjH,qBAAO,CAACjE,SAAR,CACI,UAACuc,CAAD;AAAA,uBAAQgC,MAAM,GAAGhC,CAAjB;AAAA,eADJ,EAEI,UAAC5e,CAAD,EAAO;AACHwF,sBAAM,CAACxF,CAAD,CAAN;;AACA,uBAAI,CAACmhB,cAAL,WACO,OAAI,CAACjB,KAAL,CAAWvP,WAAX,EADP,mBACwCkO,SADxC,cAEIve,EAFJ;;AAIA,uBAAO,OAAI,CAACuf,SAAL,CAAexX,GAAf,CAAP;AACH,eATL,EAUI,YAAM;AACFvI,uBAAO,CAAC8gB,MAAD,CAAP;;AACA,uBAAI,CAACO,cAAL,WACO,OAAI,CAACjB,KAAL,CAAWvP,WAAX,EADP,mBACwCkO,SADxC,eAEIve,EAFJ;;AAIA,uBAAI,CAACiC,OAAL,CAAa8F,GAAb,EAAkB;AAAA,yBAAM,OAAO,OAAI,CAACwX,SAAL,CAAexX,GAAf,CAAb;AAAA,iBAAlB,EAAoD,IAApD;AACH,eAjBL;AAmBH,aA3BqB,CAAtB;AA4BH;;AACD,iBAAO,KAAKwX,SAAL,CAAexX,GAAf,CAAP;AACH;AAED;;;;;;;;;6BAOI/H,E,EAEoB;AAAA;;AAAA,cADpBmgB,YACoB,uEADI,EACJ;AAAA,cAApBe,KAAoB,uEAAJ,IAAI;AAEpB,cAAMnZ,GAAG,kBAAW/H,EAAE,IAAI,EAAjB,cAAuB,sFAAcmgB,YAAd,KAA+B,EAAtD,CAAT;AACA,eAAKgB,QAAL,CAAcnhB,EAAd,EAAkBmgB,YAAlB;AACA,eAAKvG,SAAL,CAAe7R,GAAf,IAAsB,IAAI,4CAAJ,EAAtB;AACA,eAAK8R,UAAL,CAAgB9R,GAAhB,IAAuB,KAAK6R,SAAL,CAAe7R,GAAf,EAAoByT,YAApB,EAAvB;AACA,cAAM4F,GAAG,GAAG,KAAKxH,SAAL,CAAe7R,GAAf,CAAZ;AACA,cAAMkF,KAAK,GAAG,MAAH,OAAG,CAAH,kBAASkT,YAAY,IAAI,EAAzB,CAAG,EAAyB;AAAEkB,iBAAK,EAAE;AAAT,WAAzB,CAAd;;AACA,cAAIrhB,EAAJ,EAAQ;AACJ,iBAAKshB,IAAL,CAAUthB,EAAV,EAAciN,KAAd,EAAqBxN,IAArB,CACI,UAAC6e,CAAD;AAAA,qBAAO8C,GAAG,CAAChS,IAAJ,CAASkP,CAAT,CAAP;AAAA,aADJ,EAEI,UAAC5e,CAAD;AAAA,qBAAO0hB,GAAG,CAACnG,KAAJ,CAAUvb,CAAV,CAAP;AAAA,aAFJ;AAIA,iBAAK6hB,QAAL,CACIxZ,GADJ,EAEI,YAAM;AACF,qBAAI,CAACuZ,IAAL,CAAUthB,EAAV,EAAciN,KAAd,EAAqBxN,IAArB,CACI,UAAC6e,CAAD;AAAA,uBAAO8C,GAAG,CAAChS,IAAJ,CAASkP,CAAT,CAAP;AAAA,eADJ,EAEI,UAAC5e,CAAD;AAAA,uBAAO0hB,GAAG,CAACnG,KAAJ,CAAUvb,CAAV,CAAP;AAAA,eAFJ;AAIH,aAPL,EAQIwhB,KARJ;AAUH,WAfD,MAeO;AACH,iBAAKjU,KAAL,CAAWA,KAAX,EAAkBxN,IAAlB,CACI,UAAC6e,CAAD;AAAA,qBAAO8C,GAAG,CAAChS,IAAJ,CAASkP,CAAT,CAAP;AAAA,aADJ,EAEI,UAAC5e,CAAD;AAAA,qBAAO0hB,GAAG,CAACnG,KAAJ,CAAUvb,CAAV,CAAP;AAAA,aAFJ;AAIA,iBAAK6hB,QAAL,CACIxZ,GADJ,EAEI,YAAM;AACF,qBAAI,CAACkF,KAAL,CAAWA,KAAX,EAAkBxN,IAAlB,CACI,UAAC6e,CAAD;AAAA,uBAAO8C,GAAG,CAAChS,IAAJ,CAASkP,CAAT,CAAP;AAAA,eADJ,EAEI,UAAC5e,CAAD;AAAA,uBAAO0hB,GAAG,CAACnG,KAAJ,CAAUvb,CAAV,CAAP;AAAA,eAFJ;AAIH,aAPL,EAQIwhB,KARJ;AAUH;;AACD,iBAAO,KAAKrH,UAAL,CAAgB9R,GAAhB,CAAP;AACH;AAED;;;;;;;;iCAKgB/H,E,EAAyC;AAAA,cAA5BmgB,YAA4B,uEAAJ,EAAI;AACrD,cAAMpY,GAAG,kBAAW/H,EAAE,IAAI,EAAjB,cAAuB,sFAAcmgB,YAAd,KAA+B,EAAtD,CAAT;AACA;;AACA,cAAI,KAAKvG,SAAL,CAAe7R,GAAf,CAAJ,EAAyB;AACrB,iBAAK6R,SAAL,CAAe7R,GAAf,EAAoByZ,QAApB;;AACA,iBAAK5H,SAAL,CAAe7R,GAAf,IAAsB,IAAtB;AACA,iBAAK8R,UAAL,CAAgB9R,GAAhB,IAAuB,IAAvB;AACH;AACJ;AAED;;;;;;;;;+BAMc/H,E,EAAYwJ,S,EAA8C;AAAA;;AAAA,cAA1B2W,YAA0B,uEAAF,EAAE;AACpE,cAAMpY,GAAG,oBAAa/H,EAAb,CAAT;AACA;;AACA,cAAI,CAAC,KAAKuf,SAAL,CAAexX,GAAf,CAAL,EAA0B;AACtB,iBAAKwX,SAAL,CAAexX,GAAf,IAAsB,IAAIxI,OAAJ,CAAe,UAACC,OAAD,EAAU0F,MAAV,EAAqB;AACtD,kBAAM+H,KAAK,GAAG,sFAAckT,YAAd,CAAd;AACA,kBAAMhE,GAAG,aAAM,OAAI,CAAC9S,KAAL,CAAW8W,YAAY,CAACH,MAAxB,CAAN,cAAyChgB,EAAzC,SAA8CiN,KAAK,GAAG,MAAMA,KAAT,GAAiB,EAApE,CAAT;AACA,kBAAIqT,MAAM,GAAM,IAAhB;;AACA,qBAAI,CAACC,IAAL,CAAUkB,GAAV,CAActF,GAAd,EAAmB3S,SAAnB,EAA8BzH,SAA9B,CACI,UAACuc,CAAD;AAAA,uBAAQgC,MAAM,GAAG,OAAI,CAACE,OAAL,CAAalC,CAAb,CAAjB;AAAA,eADJ,EAEI,UAAC5e,CAAD,EAAO;AACHwF,sBAAM,CAACxF,CAAD,CAAN;;AACA,uBAAI,CAACmhB,cAAL,kBAA8B,OAAI,CAACjB,KAAL,CAAWvP,WAAX,EAA9B,cAAiErQ,EAAjE;;AACA,uBAAI,CAACuf,SAAL,CAAexX,GAAf,IAAsB,IAAtB;AACH,eANL,EAOI,YAAM;AACFvI,uBAAO,CAAC8gB,MAAD,CAAP;;AACA,uBAAI,CAACvG,GAAL,CACI,MADJ,EAEI,OAAI,CAAC4G,UAAL,CAAgB,OAAI,CAACjf,UAAL,CAAgB,OAAI,CAAC4Y,GAAL,CAAS,MAAT,CAAhB,EAAkC;AAAEta,oBAAE,EAAFA;AAAF,iBAAlC,CAAhB,EAAkE,CAC9DsgB,MAD8D,CAAlE,CAFJ;;AAMA,uBAAI,CAACO,cAAL,kBAA8B,OAAI,CAACjB,KAAL,CAAWvP,WAAX,EAA9B,eAAkErQ,EAAlE;;AACA,uBAAI,CAACuf,SAAL,CAAexX,GAAf,IAAsB,IAAtB;AACH,eAjBL;AAmBH,aAvBqB,CAAtB;AAwBH;;AACD,iBAAO,KAAKwX,SAAL,CAAexX,GAAf,CAAP;AACH;AAED;;;;;;;gCAIc/H,E,EAAU;AAAA;;AACpB,cAAM+H,GAAG,oBAAa/H,EAAb,CAAT;AACA;;AACA,cAAI,CAAC,KAAKuf,SAAL,CAAexX,GAAf,CAAL,EAA0B;AACtB,iBAAKwX,SAAL,CAAexX,GAAf,IAAsB,IAAIxI,OAAJ,CAAkB,UAACC,OAAD,EAAU0F,MAAV,EAAqB;AACzD,kBAAMiX,GAAG,aAAM,OAAI,CAAC9S,KAAL,EAAN,cAAsBrJ,EAAtB,CAAT;;AACA,qBAAI,CAACugB,IAAL,WAAiBpE,GAAjB,EAAsBpa,SAAtB,CACI,UAACmG,CAAD;AAAA,uBAAO,IAAP;AAAA,eADJ,EAEI,UAACxI,CAAD;AAAA,uBAAOwF,MAAM,CAACxF,CAAD,CAAb;AAAA,eAFJ,EAGI,YAAM;AACF,uBAAI,CAACqa,GAAL,CAAS,MAAT,EAAiB,OAAI,CAACrY,UAAL,CAAgB,OAAI,CAAC4Y,GAAL,CAAS,MAAT,CAAhB,EAAkC;AAAEta,oBAAE,EAAFA;AAAF,iBAAlC,CAAjB;;AACAR,uBAAO;AACV,eANL;AAQH,aAVqB,CAAtB;AAWH;;AACD,iBAAO,KAAK+f,SAAL,CAAexX,GAAf,CAAP;AACH;AAED;;;;;;;;;gCAOI/H,E,EACA2E,I,EAC6C;AAAA,cAA7CL,IAA6C,uEAAP,OAAO;AAE7C,cAAMoc,QAAQ,GAAG,KAAKF,OAAL,CAAa7b,IAAb,CAAjB;AACA,eAAKoV,GAAL,CAAS,MAAT,EAAiB,KAAK4G,UAAL,CAAgB,KAAKrG,GAAL,CAAS,MAAT,CAAhB,EAAkC,CAACoG,QAAD,CAAlC,CAAjB;AACA,iBAAQA,QAAgB,CAAC1gB,EAAzB;AACH;AAED;;;;;;;;;mCAOIA,E,EACA0hB,U,EAC6C;AAAA,cAA7Cpd,IAA6C,uEAAP,OAAO;AAC7C;AAEJ;;;;;;+BAGoB;;;;;;;;;;;;;;AAAoB;AAExC;;;;;;;uCAIyB+O,M,EAAgBsO,K,EAAgB;AACrD,cAAI,KAAK7H,MAAL,IAAe,KAAKA,MAAL,CAAY8H,SAA/B,EAA0C,CACtC;AACH;AACJ;AAED;;;;;;;gCAIkBC,Q,EAAiB;AAC/B,iBAAOA,QAAP;AACH;AAED;;;;;;;;;mCAOIC,Q,EACArW,I,EACkD;AAAA,cAAlDsW,SAAkD,uEAAb,KAAKvC,QAAQ;;AAElD;AACA,cAAI,CAAC/T,IAAD,IAASA,IAAI,CAACxG,MAAL,KAAgB,CAA7B,EAAgC;AAC5B,mBAAO6c,QAAP;AACH;;AACD,cAAME,QAAQ,GAAQ,EAAtB;AACA,cAAMC,UAAU,gCAAOxW,IAAP,sBAAgBqW,QAAhB,EAAhB;AACA;;AACA,cAAI,CAACC,SAAL,EAAgB;AACZA,qBAAS,GAAG,KAAKvC,QAAjB;AACH;;AAXiD,sDAY/ByC,UAZ+B;AAAA;;AAAA;AAAA;AAAA,kBAYvCvW,IAZuC;AAa9C,kBAAMwW,KAAK,GAAGF,QAAQ,CAACrb,IAAT,CAAc,UAACG,CAAD;AAAA,uBAAOib,SAAS,CAACjb,CAAD,EAAI4E,IAAJ,CAAhB;AAAA,eAAd,CAAd;AACA;;AACA,kBAAI,CAACwW,KAAL,EAAY;AACRF,wBAAQ,CAAC9W,IAAT,CAAcQ,IAAd;AACH;AAjB6C;;AAYlD,mEAA+B;AAAA;AAM9B;AAlBiD;AAAA;AAAA;AAAA;AAAA;;AAmBlD,iBAAOsW,QAAP;AACH;AAED;;;;;;;;;mCAMqBvW,I,EAAWC,I,EAASqW,S,EAAqC;AAC1E,cAAMC,QAAQ,GAAG,EAAjB;AACA;;AACA,cAAI,CAACD,SAAL,EAAgB;AACZA,qBAAS,GAAG,KAAKvC,QAAjB;AACH;;AACD/T,cAAI,CAAC0D,OAAL,CAAa,UAACrI,CAAD;AAAA,mBAAQib,SAAS,CAACrW,IAAD,EAAO5E,CAAP,CAAT,GAAqB,IAArB,GAA4Bkb,QAAQ,CAAC9W,IAAT,CAAcpE,CAAd,CAApC;AAAA,WAAb;AACA,iBAAOkb,QAAP;AACH;;;4BA1foB;AACjB,iBAAO,KAAKjJ,SAAL,CAAewH,IAAtB;AACH;;;4BA4CsB;AACnB,iBAAO,KAAKV,UAAZ;AACH;;;;MAtE6D,4D;;;;;;;;;;;;;;;;;ACflE;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAYasC,O;;;;;;;AAsDT,uBAAYnE,QAAZ,EAA+B;AAAA;;AAAA;;AAC3B,sCAAMA,QAAN;AANJ;;AACQ,gBAAAoE,QAAA,GAA4B,EAA5B;AACR;;AACU,gBAAAnE,MAAA,GAAiB,SAAjB;AAIN,YAAMoE,SAAS,GAAG,QAAKjhB,QAAL,CAAc0Y,MAAd,CAAqB9S,KAAvC;AACA,gBAAK0N,OAAL,GAAesJ,QAAQ,CAACtJ,OAAT,IAAoB,QAAK1U,EAAzB,IAA+B,EAA9C;AACA,gBAAKkG,KAAL,GAAa8X,QAAQ,CAAC9X,KAAT,IAAkB8X,QAAQ,CAACsE,OAA3B,IAAsCtE,QAAQ,CAACuE,OAA/C,IAA0D,EAAvE;AACA,YAAI3V,KAAK,GAAG,kCAAK,CACboR,QAAQ,CAACjZ,IAAT,IAAiBiZ,QAAQ,CAACwE,WAAT,GAAuB,IAAxC,IAAgDxE,QAAQ,CAACpR,KAAzD,IAAkEoR,QAAQ,CAACyE,KAD9D,CAAL,CAEVrX,OAFU,CAEF,GAFE,CAAZ;;AAGA,YAAI,CAAC,QAAKpL,EAAV,EAAc;AACV4M,eAAK,GAAGA,KAAK,CAACS,MAAN,CAAaC,IAAI,CAACC,IAAL,CAAUX,KAAK,CAACS,MAAN,KAAiB,CAA3B,IAAgC,CAA7C,CAAR;AACH;;AACD,gBAAKtI,IAAL,GAAY6H,KAAK,CAACvB,OAAN,EAAZ;AACA,gBAAKrG,QAAL,GACIsI,IAAI,CAACoV,GAAL,CACI,CADJ,EAEI1E,QAAQ,CAAChZ,QAAT,IACI,kCAAK,CAACgZ,QAAQ,CAAC2E,SAAT,GAAqB,IAArB,IAA6B3E,QAAQ,CAAC1X,GAAtC,IAA6C0X,QAAQ,CAAC4E,GAAvD,CAAL,CAAiElV,IAAjE,CACId,KADJ,EAEI,GAFJ,CAHR,KAOK,EART;AASA,gBAAK1F,IAAL,GACI,CAAC8W,QAAQ,CAAC9W,IAAT,YAAyBY,MAAzB,GAAkCkW,QAAQ,CAAC9W,IAAT,CAAckM,OAAhD,GAA0D4K,QAAQ,CAAC9W,IAApE,KACA8W,QAAQ,CAAC6E,WADT,IAEA,EAHJ;AAIA,gBAAKve,IAAL,GACI0Z,QAAQ,CAAC8E,YAAT,IACA9E,QAAQ,CAAC1Z,IADT,KAEC0Z,QAAQ,CAAC+E,QAAT,GAAoB,UAApB,GAAiC,IAFlC,KAGA,UAJJ;AAKA,gBAAK/Z,YAAL,GAAoB,CAAC,CAACgV,QAAQ,CAAChV,YAA/B;AACA,gBAAKga,eAAL,GAAuB,CAAChF,QAAQ,CAACpX,SAAT,IAAsBoX,QAAQ,CAACiF,UAA/B,IAA6C,EAA9C,EAAkD3d,GAAlD,CAAsD,UAACwB,CAAD;AAAA,iBACzEA,CAAC,YAAYgB,MAAb,GAAsBhB,CAAC,CAACC,KAAF,IAAWD,CAAC,CAAC9G,EAAnC,GAAwC8G,CADiC;AAAA,SAAtD,CAAvB;AAGA,YAAMhB,SAAS,GAAGkY,QAAQ,CAAClY,SAAT,IAAsBkY,QAAQ,CAACkF,SAA/B,IAA4Cb,SAAS,CAACpb,OAAtD,IAAiE,EAAnF;AACA,gBAAKkc,eAAL,GACInF,QAAQ,CAACmF,eAAT,IACArd,SAAS,CAACiB,KADV,IAEAiX,QAAQ,CAACoF,UAFT,IAGApF,QAAQ,CAAClY,SAJb;AAKA,YAAM6N,OAAO,GAAGqK,QAAQ,CAACrK,OAAT,IAAoBqK,QAAQ,CAACqF,SAA7B,IAA0Cvd,SAA1D;AACA,gBAAKwd,aAAL,GAAqBtF,QAAQ,CAACsF,aAAT,IAA0B3P,OAAO,CAAC5M,KAAlC,IAA2C,EAAhE;AACA,gBAAKwc,SAAL,GAAiBvF,QAAQ,CAACwF,aAAT,IAA0BxF,QAAQ,CAAC3c,QAAnC,IAA+C,EAAhE;AACA,gBAAKgF,OAAL,GAAe2X,QAAQ,CAAC3X,OAAT,IAAoB,QAAKrB,QAAL,GAAgB,KAAK,EAAxD;AACA,gBAAKrD,KAAL,GAAaqc,QAAQ,CAACrc,KAAT,IAAkB,CAA/B;AACA,gBAAKwT,SAAL,GAAiB6I,QAAQ,CAAC7I,SAAT,IAAsB,CAAvC;AACA,gBAAKlF,UAAL,GAAkB+N,QAAQ,CAAC/N,UAAT,GACZ,MAAD,OAAC,CAAD,kBACQ+N,QAAQ,CAAC/N,UADjB,CAAC,EAC0B;AACtBrD,eAAK,EAAEoR,QAAQ,CAAC/N,UAAT,CAAoBrD,KADL;AAEtBtG,aAAG,EAAE0X,QAAQ,CAAC/N,UAAT,CAAoB3J;AAFH,SAD1B,CADY,GAMZ,EANN;;AAOA,YAAI,QAAK2J,UAAL,CAAgB3J,GAAhB,IAAuB,QAAK2J,UAAL,CAAgB3J,GAAhB,GAAsB,IAAImd,IAAJ,GAAWC,OAAX,EAAjD,EAAuE;AAClE,kBAAazT,UAAb,GAA0B,MAAH,OAAG,CAAH,kBACjB,QAAKA,UADY,CAAG,EACL;AAClBrD,iBAAK,EAAE,QAAKqD,UAAL,CAAgBrD,KAAhB,GAAwB,IADb;AAElBtG,eAAG,EAAE,QAAK2J,UAAL,CAAgB3J,GAAhB,GAAsB;AAFT,WADK,CAA1B;AAKJ;;AACD,gBAAKwD,KAAL,GAAakU,QAAQ,CAAClU,KAAT,IAAkB,EAA/B;AACA,gBAAKE,eAAL,GAAuBgU,QAAQ,CAAChU,eAAT,IAA4BgU,QAAQ,CAAClG,cAArC,IAAuD,EAA9E;AACA,gBAAK5N,kBAAL,GAA0B8T,QAAQ,CAAC9T,kBAAT,IAA+B,EAAzD;AACA,gBAAKqK,eAAL,GAAuByJ,QAAQ,CAACzJ,eAAT,IAA4ByJ,QAAQ,CAACpK,MAArC,IAA+C,EAAtE;AACA,gBAAK+P,UAAL,GAAkB3F,QAAQ,CAAC2F,UAAT,IAAuB3F,QAAQ,CAAC4F,QAAhC,IAA4C,EAA9D;AACA,gBAAKC,YAAL,GAAoB7F,QAAQ,CAAC6F,YAAT,IAAyB,EAA7C;;AACA,YAAI7F,QAAQ,CAAC6E,WAAT,IAAwB,CAAC,QAAK/Y,KAAL,CAAWnD,IAAX,CAAgB,UAACG,CAAD;AAAA,iBAAOA,CAAC,CAACxC,IAAF,KAAW,aAAlB;AAAA,SAAhB,CAA7B,EAA+E;AAC3E,kBAAKwF,KAAL,gCACO,QAAKA,KADZ,IAEI;AACIxF,gBAAI,EAAE,aADV;AAEIS,gBAAI,EAAE,CAAC,CAFX;AAGI4N,mBAAO,EAAEqL,QAAQ,CAAC6E,WAHtB;AAII7P,kBAAM,EAAE,QAAKmQ;AAJjB,WAFJ;AASH;;AACD,gBAAKf,QAAL,GAAgB;AACZrd,cAAI,EAAE6H,KAAK,CAACpG,MAAN,CAAa,aAAb,CADM;AAEZmG,cAAI,YAAKC,KAAK,CAACpG,MAAN,CAAa,OAAb,CAAL,gBAAgC,kCAAK,CAACoG,KAAD,CAAL,CAC/BrG,GAD+B,CAC3B,QAAKvB,QADsB,EACZ,GADY,EAE/BwB,MAF+B,CAExB,OAFwB,CAAhC,CAFQ;AAKZoG,eAAK,EAAEA,KAAK,CAACpG,MAAN,CAAa,OAAb,CALK;AAMZF,aAAG,EAAE,kCAAK,CAACsG,KAAD,CAAL,CAAarG,GAAb,CAAiB,QAAKvB,QAAtB,EAAgC,GAAhC,EAAqCwB,MAArC,CAA4C,OAA5C,CANO;AAOZxB,kBAAQ,EAAE,6FAAiB,QAAKA,QAAtB;AAPE,SAAhB;AASA,gBAAK0B,SAAL,GAAiB,mFACbsX,QAAQ,CAAC3Y,QAAT,IAAqB2Y,QAAQ,CAAC9Q,OAA9B,IAAyC8Q,QAAQ,CAAC8F,WAAlD,IAAiE,EADpD,CAAjB;;AAGA,YAAI9F,QAAQ,CAAC+F,OAAT,IAAoB/F,QAAQ,CAAC+F,OAAT,KAAqB,WAA7C,EAA0D;AACtD,kBAAKrd,SAAL,CAAeyI,OAAf,CAAuB,UAACnP,EAAD;AAAA,mBAAS,QAAKuU,eAAL,CAAqBvU,EAArB,IAA2B,UAApC;AAAA,WAAvB;AACH,SA3F0B,CA4F3B;;;AACA,YAAI,QAAKoB,QAAL,CAAc0Y,MAAd,IAAwB,QAAK1Y,QAAL,CAAc0Y,MAAd,CAAqB9S,KAAjD,EAAwD;AACpD,cAAIgX,QAAQ,CAACpX,SAAb,EAAwB;AACpBoX,oBAAQ,CAACpX,SAAT,CAAmBuI,OAAnB,CAA2B,UAAC6U,CAAD,EAAO;AAC9B,kBAAI,CAAC,QAAK5iB,QAAL,CAAc0Y,MAAd,CAAqB9S,KAArB,CAA2BL,IAA3B,CAAgCqd,CAAC,CAACjd,KAAlC,CAAL,EAA+C;AAC3C,wBAAK3F,QAAL,CAAc0Y,MAAd,CAAqB9S,KAArB,CAA2Bid,OAA3B,CAAmC,QAAKjkB,EAAxC,EAA4CgkB,CAA5C,EAA+C,OAA/C;AACH;AACJ,aAJD;AAKH;;AACD,cAAIle,SAAJ,EAAe;AACX,gBAAI,CAAC,QAAK1E,QAAL,CAAc0Y,MAAd,CAAqB9S,KAArB,CAA2BL,IAA3B,CAAgCb,SAAS,CAACiB,KAA1C,CAAL,EAAuD;AACnD,sBAAK3F,QAAL,CAAc0Y,MAAd,CAAqB9S,KAArB,CAA2Bid,OAA3B,CAAmC,QAAKjkB,EAAxC,EAA4C8F,SAA5C,EAAuD,OAAvD;AACH;AACJ;AACJ;;AACD,gBAAKqB,QAAL,GAAgB,CAAC6W,QAAQ,CAAC7W,QAAT,YAA6ByP,KAA7B,GAAqCoH,QAAQ,CAAC7W,QAA9C,GAAyD,EAA1D,EAA8D7B,GAA9D,CACZ,UAACwB,CAAD;AAAA,iBAAO,IAAI,4EAAJ,CAAkBA,CAAlB,CAAP;AAAA,SADY,CAAhB;AAGA,gBAAKod,KAAL,GACIlG,QAAQ,CAACkG,KAAT,YAA0BtN,KAA1B,GACMoH,QAAQ,CAACkG,KADf,GAEM,mFAAO,oFAAQpc,MAAM,CAACjI,IAAP,CAAYme,QAAQ,CAACkG,KAAT,IAAkB,EAA9B,EAAkC5e,GAAlC,CAAsC,UAACwB,CAAD;AAAA,iBAAOkX,QAAQ,CAACkG,KAAT,CAAepd,CAAf,CAAP;AAAA,SAAtC,CAAR,CAAP,CAHV;AA9G2B;AAkH9B;AAED;;;;;;AAoJA;;;;;2CAK0BiB,G,EAA2BY,K,EAAsC;AACvF,iGAAgCZ,GAAhC,EAA4CY,KAA5C;AACH;AAED;;;;;;gCAGY;AACR,iBAAO,IAAIwZ,OAAJ,CAAY,IAAZ,CAAP;AACH;AAED;;;;;;oCAGgB;AACZ,iBAAO,IAAIA,OAAJ,CAAY,MAAD,OAAC,CAAD,kBACX,KAAK1Y,MAAL,EADW,CAAC,EACC;AAChBzJ,cAAE,EAAE,IADY;AAEhB+G,iBAAK,EAAE,IAFS;AAGhB2N,mBAAO,EAAE;AAHO,WADD,CAAZ,CAAP;AAMH;AAED;;;;;;iCAGyD;AAAA;;AAAA,cAA5BgK,YAA4B,uEAAJ,IAAI;;AACrD,cAAM/Z,IAAI,uEAAgB+Z,YAAhB,CAAV;;AACA,cAAM3Z,IAAI,GAAG,kCAAK,CAACJ,IAAI,CAACI,IAAN,CAAlB;AACAJ,cAAI,CAAC6d,WAAL,GAAmBzd,IAAI,CAACwL,IAAL,EAAnB;AACA5L,cAAI,CAACge,SAAL,GAAiB5d,IAAI,CAACwB,GAAL,CAAS5B,IAAI,CAACK,QAAL,IAAiB,EAA1B,EAA8B,GAA9B,EAAmCuL,IAAnC,EAAjB;AACA5L,cAAI,CAACmB,SAAL,GACI,KAAKA,SAAL,YAA0B,sDAA1B,GACM,KAAKA,SAAL,CAAe2D,MAAf,EADN,GAEM;AACI1C,iBAAK,EACD,OAAO,KAAKjB,SAAZ,KAA0B,QAA1B,GACM,KAAKA,SADX,GAEM,KAAKqd;AAJnB,WAHV;AASAxe,cAAI,CAACwf,YAAL,GAAoBxf,IAAI,CAAC+B,SAAL,CAAepB,GAAf,CAAmB,UAACC,KAAD;AAAA,mBAAW,IAAX;AAAA,WAAnB,CAApB;;AACA,cAAIZ,IAAI,CAACuC,IAAL,IAAa,CAACvC,IAAI,CAACmF,KAAL,CAAWnD,IAAX,CAAgB,UAAC+L,IAAD;AAAA,mBAAUA,IAAI,CAACC,OAAL,KAAiBhO,IAAI,CAACuC,IAAhC;AAAA,WAAhB,CAAlB,EAAyE;AACrEvC,gBAAI,CAACmF,KAAL,CAAWoB,IAAX,CAAgB;AACZ5G,kBAAI,EAAE,aADM;AAEZqO,qBAAO,EAAEhO,IAAI,CAACuC,IAFF;AAGZ8L,oBAAM,EAAE,KAAK5R,QAAL,CAAc0Y,MAAd,CAAqB9S,KAArB,CAA2BC,OAA3B,CAAmCF,KAH/B;AAIZhC,kBAAI,EAAE,kCAAK,GAAGsG,OAAR;AAJM,aAAhB;AAMA1G,gBAAI,CAACmF,KAAL,CAAWsa,IAAX,CAAgB,UAAC3E,CAAD,EAAIC,CAAJ;AAAA,qBAAUA,CAAC,CAAC3a,IAAF,GAAS0a,CAAC,CAAC1a,IAArB;AAAA,aAAhB;AACH;;AACDJ,cAAI,CAACmB,SAAL,GAAiB,KAAK1E,QAAL,CAAc0Y,MAAd,CAAqB9S,KAArB,CAA2BL,IAA3B,CAAgChC,IAAI,CAACwe,eAArC,KAAyD;AACtEpc,iBAAK,EAAEpC,IAAI,CAACwe;AAD0D,WAA1E;AAGA,iBAAOxe,IAAI,CAACwe,eAAZ;AACAxe,cAAI,CAACiC,SAAL,GAAiBjC,IAAI,CAACqe,eAAL,CAAqB1d,GAArB,CAAyB,UAACoQ,IAAD,EAAU;AAChD,mBAAO,OAAI,CAACtU,QAAL,CAAc0Y,MAAd,CAAqB9S,KAArB,CAA2BL,IAA3B,CAAgC+O,IAAhC,KAAyC;AAAE3O,mBAAK,EAAE2O;AAAT,aAAhD;AACH,WAFgB,CAAjB;AAGA/Q,cAAI,CAACiC,SAAL,GAAiB,mFAAO,CAACjC,IAAI,CAACmB,SAAN,EAAiB6K,MAAjB,CAAwBhM,IAAI,CAACiC,SAA7B,CAAP,EAAgD,OAAhD,CAAjB;AACAjC,cAAI,CAACkf,YAAL,GAAoB,CAAClf,IAAI,CAACmB,SAAL,CAAeiB,KAAhB,CAApB;AACApC,cAAI,CAACU,QAAL,GAAgBV,IAAI,CAAC+B,SAArB;AACA/B,cAAI,CAAC0f,QAAL,GAAgB,KAAKtf,IAArB;AACAJ,cAAI,CAAC2f,SAAL,GAAiB,KAAK/e,KAAL,GAAa,KAAKA,KAAL,CAAWwB,KAAxB,GAAgC,EAAjD;AACA,iBAAOpC,IAAI,CAACqe,eAAZ;AACA,iBAAOre,IAAI,CAAC+B,SAAZ;AACA,iBAAO/B,IAAI,CAACI,IAAZ;AACA,iBAAOJ,IAAI,CAACK,QAAZ;AACA,iBAAOL,IAAI,CAAC4f,OAAZ;AACA,iBAAO5f,IAAI,CAACoC,KAAZ;AACA,iBAAOpC,IAAI,CAACgB,IAAZ;AACA,iBAAOhB,IAAP;AACH;;;4BA9NkB;AAAA,sDACK,KAAK+B,SADV;AAAA;;AAAA;AACf,mEAAoC;AAAA,kBAAzBK,KAAyB;;AAChC,kBAAI,CAAC,KAAKwN,eAAL,CAAqBxN,KAArB,KAA+B,EAAhC,EAAoCyd,OAApC,CAA4C,SAA5C,KAA0D,CAA9D,EAAiE;AAC7D,uBAAO,IAAP;AACH;AACJ;AALc;AAAA;AAAA;AAAA;AAAA;;AAMf,iBAAO,KAAP;AACH;AAED;;;;4BACmB;AAAA,sDACK,KAAK9d,SADV;AAAA;;AAAA;AACf,mEAAoC;AAAA,kBAAzBK,KAAyB;;AAChC,kBACI,KAAKwN,eAAL,CAAqBxN,KAArB,MACC,KAAKwN,eAAL,CAAqBxN,KAArB,EAA4Byd,OAA5B,CAAoC,WAApC,KAAoD,CAApD,IACG,KAAKjQ,eAAL,CAAqBxN,KAArB,EAA4Byd,OAA5B,CAAoC,SAApC,KAAkD,CAFtD,CADJ,EAIE;AACE,uBAAO,KAAP;AACH;AACJ;AATc;AAAA;AAAA;AAAA;AAAA;;AAUf,iBAAO,IAAP;AACH;AAED;;;;4BACoB;AAAA,sDACI,KAAK9d,SADT;AAAA;;AAAA;AAChB,mEAAoC;AAAA,kBAAzBK,KAAyB;;AAChC,kBACI,KAAKwN,eAAL,CAAqBxN,KAArB,KACA,KAAKwN,eAAL,CAAqBxN,KAArB,EAA4Byd,OAA5B,CAAoC,WAApC,KAAoD,CAFxD,EAGE;AACE,uBAAO,IAAP;AACH;AACJ;AARe;AAAA;AAAA;AAAA;AAAA;;AAShB,iBAAO,KAAP;AACH;AAED;;;;4BACuB;AACnB,iBAAO,KAAK5d,SAAL,CAAeb,MAAf,CAAsB,UAAC0Z,CAAD,EAAIgF,CAAJ;AAAA,mBAAUhF,CAAC,IAAIgF,CAAC,CAACC,QAAjB;AAAA,WAAtB,EAAiD,KAAjD,CAAP;AACH;AAED;;;;4BACoB;AAAA;;AAChB,iBAAO,KAAKtjB,QAAL,IAAiB,KAAKA,QAAL,CAAc0Y,MAA/B,IAAyC,KAAK1Y,QAAL,CAAc0Y,MAAd,CAAqB9S,KAA9D,GACD,KAAKgc,eAAL,CAAqB1d,GAArB,CACI,UAACoQ,IAAD;AAAA,mBACI,OAAI,CAACtU,QAAL,CAAc0Y,MAAd,CAAqB9S,KAArB,CAA2BL,IAA3B,CAAgC+O,IAAhC,KACA,IAAI,sDAAJ,CAAS;AAAE1V,gBAAE,EAAE0V,IAAN;AAAY/P,kBAAI,EAAE+P,IAAlB;AAAwB3O,mBAAK,EAAE2O;AAA/B,aAAT,CAFJ;AAAA,WADJ,CADC,GAMD,EANN;AAOH;AAED;;;;4BACoB;AAChB,iBAAO,KAAKtU,QAAL,IACH,KAAKA,QAAL,CAAc0Y,MADX,IAEH,KAAK1Y,QAAL,CAAc0Y,MAAd,CAAqB9S,KAFlB,IAGH,KAAKmc,eAHF,GAID,KAAK/hB,QAAL,CAAc0Y,MAAd,CAAqB9S,KAArB,CAA2BL,IAA3B,CAAgC,KAAKwc,eAArC,CAJC,GAKD,IALN;AAMH;AAED;;;;4BACkB;AACd,iBAAO,KAAK/hB,QAAL,IACH,KAAKA,QAAL,CAAc0Y,MADX,IAEH,KAAK1Y,QAAL,CAAc0Y,MAAd,CAAqB9S,KAFlB,IAGH,KAAKsc,aAHF,GAID,KAAKliB,QAAL,CAAc0Y,MAAd,CAAqB9S,KAArB,CAA2BL,IAA3B,CAAgC,KAAK2c,aAArC,CAJC,GAKD,IALN;AAMH;AAED;;;;4BACiB;AACb,cAAM7T,GAAG,GAAG,kCAAK,EAAjB;AACA,cAAM1K,IAAI,GAAG,kCAAK,CAAC,KAAKA,IAAN,CAAlB;;AACA,cAAI0K,GAAG,CAACjC,QAAJ,CAAazI,IAAI,CAAC4J,QAAL,CAAc,EAAd,EAAkB,GAAlB,CAAb,EAAqC,GAArC,CAAJ,EAA+C;AAC3C,mBAAO,QAAP;AACH,WAFD,MAEO,IAAIc,GAAG,CAACjC,QAAJ,CAAazI,IAAb,EAAmB,GAAnB,CAAJ,EAA6B;AAChC,mBAAO,UAAP;AACH,WAFM,MAEA,IAAI0K,GAAG,CAACjC,QAAJ,CAAazI,IAAI,CAACwB,GAAL,CAAS,EAAT,EAAa,GAAb,CAAb,EAAgC,GAAhC,CAAJ,EAA0C;AAC7C,mBAAO,SAAP;AACH,WAFM,MAEA,IAAIkJ,GAAG,CAACjC,QAAJ,CAAazI,IAAI,CAACwB,GAAL,CAAS,KAAKvB,QAAd,EAAwB,GAAxB,CAAb,EAA2C,GAA3C,CAAJ,EAAqD;AACxD,mBAAO,aAAP;AACH;;AACD,iBAAO,MAAP;AACH;AAED;;;;4BACsB;AAClB,cAAM0N,IAAI,GAAG,CAAC,KAAK5I,KAAL,IAAc,EAAf,EAAmBnD,IAAnB,CAAwB,UAACG,CAAD;AAAA,mBAAOA,CAAC,CAACxC,IAAF,KAAW,aAAlB;AAAA,WAAxB,CAAb;AACA,iBAAOoO,IAAI,GAAGA,IAAI,CAACC,OAAR,GAAkB,EAA7B;AACH;AAED;;;;4BACgB;AACZ,iBAAO,KAAKvR,QAAL,IACH,KAAKA,QAAL,CAAc0Y,MADX,IAEH,KAAK1Y,QAAL,CAAc0Y,MAAd,CAAqB3U,MAFlB,IAGH,KAAKuB,SAHF,IAIH,KAAKA,SAAL,CAAezB,MAAf,GAAwB,CAJrB,GAKD,KAAK7D,QAAL,CAAc0Y,MAAd,CAAqB3U,MAArB,CAA4BwB,IAA5B,CAAiC,KAAKD,SAAL,CAAe,CAAf,CAAjC,CALC,GAMD,IANN;AAOH;AAED;;;;4BACqB;AAAA;;AACjB,iBAAO,KAAKtF,QAAL,IACH,KAAKA,QAAL,CAAc0Y,MADX,IAEH,KAAK1Y,QAAL,CAAc0Y,MAAd,CAAqB3U,MAFlB,IAGH,KAAKuB,SAHF,GAID,KAAKA,SAAL,CAAepB,GAAf,CACI,UAACwB,CAAD;AAAA,mBACI,OAAI,CAAC1F,QAAL,CAAc0Y,MAAd,CAAqB3U,MAArB,CAA4BwB,IAA5B,CAAiCG,CAAjC,KAAuC,IAAI,yDAAJ,CAAU;AAAE9G,gBAAE,EAAE8G,CAAN;AAASnB,kBAAI,EAAEmB,CAAf;AAAkBC,mBAAK,EAAED;AAAzB,aAAV,CAD3C;AAAA,WADJ,CAJC,GAQD,EARN;AASH;AAED;;;;4BACsB;AAClB,iBAAO,KAAKsb,QAAL,CAAcrd,IAArB;AACH;AACD;;;;4BACsB;AAClB,iBAAO,KAAKqd,QAAL,CAAczV,IAArB;AACH;AACD;;;;4BACqB;AACjB,iBAAO,KAAKyV,QAAL,CAAcxV,KAArB;AACH;AACD;;;;4BACmB;AACf,iBAAO,KAAKwV,QAAL,CAAc9b,GAArB;AACH;AACD;;;;4BACwB;AACpB,iBAAO,KAAK8b,QAAL,CAAcpd,QAArB;AACH;AACD;;;;4BACmB;AACf,iBAAO,KAAKod,QAAL,CAAcuC,WAAd,IAA6B,KAAKpB,SAAlC,IAA+C,iBAAtD;AACH;AACD;;;;4BACgB;AACZ,iBAAO,KAAKnB,QAAL,CAAc7a,KAArB;AACH;;;;MA5TwB,6D;;;;;;;;;;;;;;;;;ACZ7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAsBA,QAAMqd,MAAM,GAAG,CAAf;AACA,QAAMC,IAAI,GAAG,EAAb;AACA,QAAMC,GAAG,GAAG,KAAKD,IAAjB;AACA,QAAME,IAAI,GAAG,IAAID,GAAjB;AACA,QAAME,KAAK,GAAG,KAAKF,GAAnB;AAEA,QAAMG,YAAY,GAAmC;AACjDC,WAAK,EAAEF,KAD0C;AAEjDG,YAAM,EAAEH,KAFyC;AAGjDI,UAAI,EAAEL,IAH2C;AAIjDM,WAAK,EAAEN,IAJ0C;AAKjDO,SAAG,EAAER,GAL4C;AAMjDS,UAAI,EAAET,GAN2C;AAOjDhX,UAAI,EAAE+W,IAP2C;AAQjDW,WAAK,EAAEX,IAR0C;AASjDxX,YAAM,EAAEuX,MATyC;AAUjDa,aAAO,EAAEb;AAVwC,KAArD;AAaA,QAAIc,aAAa,GAAG,CAApB;AACA,QAAIC,YAAY,GAAG,kCAAK,GAAG7X,IAAR,CAAa,CAAb,EAAgBT,MAAhB,CAAuB,CAAvB,EAA0BsB,QAA1B,CAAmC,CAAnC,EAAsC,GAAtC,EAA2CvD,OAA3C,CAAmD,GAAnD,CAAnB;AAEA;;;;;AAIO,aAASwa,2BAAT,CAAqCjZ,IAArC,EAAmD;AACtDgZ,kBAAY,GAAG,kCAAK,CAAChZ,IAAD,CAAL,CAAYvB,OAAZ,CAAoB,GAApB,CAAf;AACH;AAED;;;;;;AAIO,aAASya,mBAAT,GAAqD;AAAA,UAAxBC,QAAwB,uEAAJ,EAAI;AACxD,UAAM9lB,EAAE,qBAAc0lB,aAAa,EAA3B,CAAR;AACAC,kBAAY,GAAGA,YAAY,CAACpf,GAAb,CAAiB+G,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,CAAhB,GAAoB,CAA/B,IAAoC,EAArD,EAAyD,GAAzD,CAAf;AACA,UAAMnZ,KAAK,GAAG+Y,YAAY,CAACta,OAAb,EAAd;AACA,UAAMrG,QAAQ,GAAGsI,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,CAAhB,GAAoB,CAA/B,IAAoC,EAArD;AACAJ,kBAAY,GAAGA,YAAY,CAACpf,GAAb,CAAiB+G,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,CAA3B,IAAgC,EAAjD,EAAqD,GAArD,CAAf;AACA,aAAO,MAAP,OAAO,CAAP;AACI/lB,UAAE,EAAFA,EADJ;AAEI0U,eAAO,EAAE,oFAAQpH,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,QAA3B,CAAR,EAA8C,CAA9C,CAFb;AAGI7f,aAAK,YAAK,+CAAe8f,WAAf,EAAL,aAHT;AAIIpf,iBAAS,EAAEgQ,KAAK,CAACtJ,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,CAAhB,GAAoB,CAA/B,CAAD,CAAL,CACNlP,IADM,CACD,CADC,EAENvR,GAFM,CAEF,UAACwB,CAAD;AAAA,iBAAO,gFAAP;AAAA,SAFE,CAJf;AAOIhB,iBAAS,EAAE,gFAPf;AAQI0c,mBAAW,EAAE,kCAAK,CAAC5V,KAAD,CAAL,CAAa2D,IAAb,EARjB;AASIoS,iBAAS,EAAE,kCAAK,CAAC/V,KAAD,CAAL,CAAarG,GAAb,CAAiBvB,QAAjB,EAA2B,GAA3B,EAAgCuL,IAAhC,EATf;AAUIsS,mBAAW,EAAE,4CAAYoD,SAAZ,EAVjB;AAWInc,aAAK,EAAE,CAAC;AAAExF,cAAI,EAAE,OAAR;AAAiBqO,iBAAO,EAAE,4CAAYsT,SAAZ;AAA1B,SAAD,CAXX;AAYI5kB,gBAAQ,EAAE,8CAAc6kB,IAAd,EAZd;AAaIld,oBAAY,EAAEsE,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,KAA3B,IAAoC,CAApC,KAA0C,CAb5D;AAcI5e,gBAAQ,EAAE,EAdd;AAeI9B,gBAAQ,EAAE;AAfd,OAAO,EAgBAygB,QAhBA,CAAP;AAkBH;AAOD;;;;;;;AAKO,aAASK,mBAAT,CAA6B1a,IAA7B,EAAmE;AAAA,UAArB2a,QAAqB,uEAAF,EAAE;;AACtE;AACA,UAAI,CAAC3a,IAAL,EAAW;AACP,eAAO,CACH;AACImB,eAAK,EAAE,CADX;AAEItG,aAAG,EAAE,kCAAK,GAAG8E,OAAR,CAAgB,GAAhB,EAAqBC,OAArB,KAAiC;AAF1C,SADG,CAAP;AAMH;;AACD,UAAMgb,KAAK,GAAmB,EAA9B;AACA,UAAIzZ,KAAK,GAAG,kCAAK,CAAC,CAAD,CAAjB;AACAnB,UAAI,CAAC2Y,IAAL,CAAU,UAAC3E,CAAD,EAAIC,CAAJ;AAAA,eAAUD,CAAC,CAAC1a,IAAF,GAAS2a,CAAC,CAAC3a,IAArB;AAAA,OAAV;;AAZsE,kDAahD0G,IAbgD;AAAA;;AAAA;AAatE,+DAA4B;AAAA,cAAjBvH,OAAiB;AACxB,cAAMoiB,SAAS,GAAG,kCAAK,CAACpiB,OAAO,CAACa,IAAT,CAAvB;AACA,cAAMwhB,OAAO,GAAGD,SAAS,CAAC/f,GAAV,CAAcrC,OAAO,CAACc,QAAtB,EAAgC,GAAhC,CAAhB;;AACA,cAAIshB,SAAS,CAACpY,OAAV,CAAkBtB,KAAlB,CAAJ,EAA8B;AAC1B,gBAAMc,IAAI,GAAGJ,IAAI,CAACG,GAAL,CAAS6Y,SAAS,CAAC5Y,IAAV,CAAed,KAAf,EAAsB,GAAtB,CAAT,CAAb;AACA;;AACA,gBAAIc,IAAI,IAAI0Y,QAAZ,EAAsB;AAClBC,mBAAK,CAACnb,IAAN,CAAW;AAAE0B,qBAAK,EAAEA,KAAK,CAACvB,OAAN,EAAT;AAA0B/E,mBAAG,EAAEggB,SAAS,CAACjb,OAAV;AAA/B,eAAX;AACH;;AACDuB,iBAAK,GAAG2Z,OAAR;AACH,WAPD,MAOO,IAAI3Z,KAAK,CAACxB,OAAN,CAAc,GAAd,EAAmBC,OAAnB,OAAiCib,SAAS,CAAClb,OAAV,CAAkB,GAAlB,EAAuBC,OAAvB,EAArC,EAAuE;AAC1EuB,iBAAK,GAAG2Z,OAAR;AACH;AACJ;AA1BqE;AAAA;AAAA;AAAA;AAAA;;AA2BtEF,WAAK,CAACnb,IAAN,CAAW;AACP0B,aAAK,EAAEA,KAAK,CAACvB,OAAN,EADA;AAEP/E,WAAG,EAAE,kCAAK,GAAG8E,OAAR,CAAgB,GAAhB,EAAqBC,OAArB,KAAiC;AAF/B,OAAX;AAIA,aAAOgb,KAAP;AACH;AAED;;;;;;;;AAMO,aAASG,sBAAT,CACH/a,IADG,EAGkB;AAAA,UADrB1G,IACqB,uEADN,kCAAK,GAAGsG,OAAR,EACM;AAAA,UAArB+a,QAAqB,uEAAF,EAAE;AAErB,UAAMC,KAAK,GAAGF,mBAAmB,CAAC1a,IAAD,EAAO2a,QAAP,CAAjC;AACA,UAAMzZ,IAAI,GAAG,kCAAK,CAAC5H,IAAD,CAAL,CAAYqG,OAAZ,CAAoB,GAApB,EAAyBqb,MAAzB,CAAgC,CAAhC,CAAb;;AAHqB,mDAIDJ,KAJC;AAAA;;AAAA;AAIrB,kEAA2B;AAAA,cAAhBrU,KAAgB;AACvB,cAAMpF,KAAK,GAAG,kCAAK,CAACoF,KAAK,CAACpF,KAAP,CAAL,CAAmBxB,OAAnB,CAA2B,GAA3B,CAAd;AACA,cAAM9E,GAAG,GAAG,kCAAK,CAAC0L,KAAK,CAAC1L,GAAP,CAAL,CAAiB8E,OAAjB,CAAyB,GAAzB,CAAZ;;AACA,cAAIwB,KAAK,CAACsB,OAAN,CAAcvB,IAAd,EAAoB,GAApB,CAAJ,EAA8B;AAC1B,mBAAOqF,KAAP;AACH,WAFD,MAEO,IAAIrF,IAAI,CAACa,QAAL,CAAclH,GAAd,EAAmB,GAAnB,CAAJ,EAA6B;AAChC,gBAAMtB,QAAQ,GAAGsB,GAAG,CAACoH,IAAJ,CAASf,IAAT,EAAe,GAAf,CAAjB;AACA;;AACA,gBAAI3H,QAAQ,IAAIohB,QAAhB,EAA0B;AACtB,qBAAOpU,KAAP;AACH;AACJ;AACJ;AAhBoB;AAAA;AAAA;AAAA;AAAA;;AAiBrB,aAAOqU,KAAK,CAACA,KAAK,CAACphB,MAAN,GAAe,CAAhB,CAAZ;AACH;AAED;;;;;;;AAKO,aAASyhB,mBAAT,CACHxiB,OADG,EAEHyiB,YAFG,EAGHC,UAHG,EAGiC;AAEpC,UAAI,CAAC1iB,OAAL,EAAc;AACV,cAAMvE,KAAK,CAAC,mBAAD,CAAX;AACH;;AACD,UAAI,CAACgnB,YAAL,EAAmB;AACfA,oBAAY,GAAG,EAAf;AACH;;AACD,UAAME,MAAM,GAAyB;AACjC7mB,UAAE,EAAE,IAAI,0DAAJ,CAAgBkE,OAAO,CAAClE,EAAR,IAAc,EAA9B,CAD6B;AAEjCyF,kBAAU,EAAE,IAAI,0DAAJ,CAAgBvB,OAAO,CAACuB,UAAxB,EAAoC,EAApC,CAFqB;AAGjCiB,iBAAS,EAAE,IAAI,0DAAJ,CAAgBxC,OAAO,CAACwC,SAAxB,EAAmC,EAAnC,CAHsB;AAIjC3B,YAAI,EAAE,IAAI,0DAAJ,CAAgBb,OAAO,CAACa,IAAxB,EAA8B,CAAC,0DAAWqS,QAAZ,CAA9B,CAJ2B;AAKjCpS,gBAAQ,EAAE,IAAI,0DAAJ,CAAgBd,OAAO,CAACc,QAAxB,CALuB;AAMjCc,iBAAS,EAAE,IAAI,0DAAJ,CAAgB5B,OAAO,CAAC4B,SAAR,IAAqB6gB,YAArC,EAAmD,CAAC,0DAAWvP,QAAZ,CAAnD,CANsB;AAOjC+L,uBAAe,EAAE,IAAI,0DAAJ,CAAgBjf,OAAO,CAACif,eAAR,IAA2BwD,YAAY,CAAC5f,KAAxD,EAA+D,CAC5E,0DAAWqQ,QADiE,CAA/D,CAPgB;AAUjCxQ,iBAAS,EAAE,IAAI,0DAAJ,CAAgB1C,OAAO,CAAC0C,SAAxB,EAAmC,EAAnC,CAVsB;AAWjCV,aAAK,EAAE,IAAI,0DAAJ,CAAgBhC,OAAO,CAACgC,KAAR,IAAiB,EAAjC,EAAqC,CAAC,0DAAWkR,QAAZ,CAArC,CAX0B;AAYjC9S,YAAI,EAAE,IAAI,0DAAJ,CAAgBJ,OAAO,CAACI,IAAxB,CAZ2B;AAajC4C,YAAI,EAAE,IAAI,0DAAJ,CAAgBhD,OAAO,CAACgD,IAAxB,CAb2B;AAcjC4C,aAAK,EAAE,IAAI,0DAAJ,CAAgB5F,OAAO,CAAC4F,KAAxB,CAd0B;AAejCE,uBAAe,EAAE,IAAI,0DAAJ,CAAgB9F,OAAO,CAAC8F,eAAxB,CAfgB;AAgBjCE,0BAAkB,EAAE,IAAI,0DAAJ,CAAgBhG,OAAO,CAACgG,kBAAxB,CAhBa;AAiBjC/C,gBAAQ,EAAE,IAAI,0DAAJ,CACNjD,OAAO,CAACiD,QAAR,CAAiB7B,GAAjB,CACI,UAAC8B,KAAD;AAAA,iBAAW,IAAI,4EAAJ,CAAkB,MAAD,OAAC,CAAD,kBAAMA,KAAN,CAAC,EAAU;AAAE0F,wBAAY,EAAE5I,OAAO,CAACa;AAAxB,WAAV,CAAlB,CAAX;AAAA,SADJ,CADM,CAjBuB;AAsBjCkL,kBAAU,EAAE,IAAI,0DAAJ,CAAgB/L,OAAO,CAAC+L,UAAxB,CAtBqB;AAuBjC5J,eAAO,EAAE,IAAI,0DAAJ,CAAgB,CAAC,CAACnC,OAAO,CAACmC,OAA1B,CAvBwB;AAwBjC2C,oBAAY,EAAE,IAAI,0DAAJ,CAAgB,CAAC,CAAC9E,OAAO,CAAC8E,YAA1B,CAxBmB;AAyBjC8d,mBAAW,EAAE,IAAI,0DAAJ,CAAgB,IAAhB;AAzBoB,OAArC;AA2BAD,YAAM,CAAC7hB,QAAP,CAAgB+hB,aAAhB,CAA8B,CAAC,0DAAW3P,QAAZ,EAAsB,sGAAgByP,MAAM,CAAC9hB,IAAvB,CAAtB,CAA9B;AACA;;AACA,UAAIb,OAAO,CAAClE,EAAZ,EAAgB;AACZ6mB,cAAM,CAAC/gB,SAAP,CAAiBkhB,OAAjB;AACA;;AACA,YAAI,kCAAK,CAAC9iB,OAAO,CAACa,IAAT,CAAL,CAAoByI,QAApB,CAA6B,kCAAK,EAAlC,EAAsC,GAAtC,CAAJ,EAAgD;AAC5CqZ,gBAAM,CAAC9hB,IAAP,CAAYiiB,OAAZ;AACH;AACJ,OAND,MAMO;AACHH,cAAM,CAAC9hB,IAAP,CAAYgiB,aAAZ,CAA0B,CAAC,0DAAW3P,QAAZ,EAAsB6P,QAAtB,CAA1B;AACH;;AACD,UAAMC,iBAAiB,GAAG,CACtB,IADsB,EAEtB,YAFsB,EAGtB,WAHsB,EAItB,OAJsB,EAKtB,iBALsB,EAMtB,oBANsB,EAOtB,iBAPsB,4BAQnBN,UARmB,GASxB7gB,MATwB,CASjB,UAACT,GAAD,EAAMyC,GAAN,EAAc;AACnB;AACA,YAAI8e,MAAM,CAAC9e,GAAD,CAAV,EAAiB;AACbzC,aAAG,CAACyC,GAAD,CAAH,GAAW8e,MAAM,CAAC9e,GAAD,CAAjB;AACH;;AACD,eAAOzC,GAAP;AACH,OAfyB,EAevB,EAfuB,CAA1B,CA9CoC,CA8DpC;;AACA,UAAMmD,IAAI,GAAG,IAAI,wDAAJ,CAAcye,iBAAd,CAAb,CA/DoC,CAgEpC;;AACA,UAAIze,IAAI,IAAIvE,OAAZ,EAAqB;AACjB,YAAIijB,IAAI,GAA0B,EAAlC;AACArf,cAAM,CAACjI,IAAP,CAAY4I,IAAI,CAACC,QAAjB,EAA2ByG,OAA3B,CAAmC,UAACpH,GAAD,EAAc;AAC7C,cAAI7D,OAAO,CAACkjB,cAAR,CAAuBrf,GAAvB,CAAJ,EAAiC;AAC7Bof,gBAAI,kBAAWpf,GAAX,EAAJ,GAAwBU,IAAI,CAACC,QAAL,CAAcX,GAAd,EAAmB+D,YAAnB,CAAgC/J,SAAhC,CAA0C,UAAC4G,KAAD,EAAW;AACzEzE,qBAAO,CAAC4S,kBAAR,CAA2B/O,GAA3B,EAAgCY,KAAhC;AACH,aAFuB,CAAxB;AAGH;AACJ,SAND;AAOAwe,YAAI,CAACE,iBAAL,GAAyB5e,IAAI,CAACC,QAAL,CAAcjD,UAAd,CAAyBqG,YAAzB,CAAsC/J,SAAtC,CACrB,UAAC0J,IAAD,EAAmB;AACfhD,cAAI,CAACC,QAAL,CAAchC,SAAd,CAAwBgD,QAAxB,CAAiC+B,IAAI,CAACnG,GAAL,CAAS,UAACC,KAAD;AAAA,mBAAWA,KAAK,CAACwB,KAAjB;AAAA,WAAT,CAAjC;AACH,SAHoB,CAAzB;;AAKA,YAAI0B,IAAI,CAACC,QAAL,CAAc5C,SAAlB,EAA6B;AACzBqhB,cAAI,CAACG,gBAAL,GAAwB7e,IAAI,CAACC,QAAL,CAAc5C,SAAd,CAAwBgG,YAAxB,CAAqC/J,SAArC,CAA+C,UAAC8D,IAAD,EAAgB;AACnF4C,gBAAI,CAACC,QAAL,CAAcya,eAAd,CAA8BzZ,QAA9B,CAAuC7D,IAAI,CAACkB,KAA5C;AACH,WAFuB,CAAxB;AAGH;;AACDogB,YAAI,CAACjjB,OAAL,GAAeA,OAAO,CAAC4R,YAAR,CAAqB/T,SAArB,CAA+B,UAAC+B,KAAD,EAAW;AACrD;AACA,cAAIA,KAAK,CAACQ,IAAN,KAAe,YAAnB,EAAiC;AAC7B,iBAAK,IAAMyD,GAAX,IAAkBof,IAAlB,EAAwB;AACpB;AACA,kBAAIA,IAAI,CAACpf,GAAD,CAAJ,YAAqB,iDAAzB,EAAuC;AACnCof,oBAAI,CAACpf,GAAD,CAAJ,CAAUwf,WAAV;AACH;AACJ;AACJ;AACJ,SAVc,CAAf;AAWH;;AACD,aAAO9e,IAAP;AACH;AAGD;;;;;;AAIO,aAASwe,QAAT,CAAkBO,OAAlB,EAA4C;AAC/C,UAAI/X,GAAG,GAAG,kCAAK,GAAGrE,OAAR,CAAgB,GAAhB,CAAV;AACAqE,SAAG,GAAGA,GAAG,CAACpC,MAAJ,CAAWC,IAAI,CAACqH,KAAL,CAAWlF,GAAG,CAACpC,MAAJ,KAAe,CAA1B,IAA+B,CAA1C,CAAN;AACA,UAAMtI,IAAI,GAAG,kCAAK,CAACyiB,OAAO,CAAC7e,KAAT,CAAlB;AACA,aAAO5D,IAAI,CAACyI,QAAL,CAAciC,GAAd,EAAmB,GAAnB,IAA0B;AAAE1K,YAAI,EAAE;AAAR,OAA1B,GAAuE,IAA9E;AACH;AAED;;;;;;;;;AAOO,aAAS0iB,aAAT,CAAuB7hB,OAAvB,EAAgD;AACnD,UAAI,CAACA,OAAL,EAAc;AACV,cAAMjG,KAAK,CAAC,8CAAD,CAAX;AACH;;AACD,UAAM+nB,oBAAoB,GAAe;AACrCvD,oBAAY,EAAE,IADuB;AAErCwD,YAAI,EAAE;AAF+B,OAAzC;AAIA;;AACA,UAAI/hB,OAAO,CAACL,KAAZ,EAAmB;AAAA,qCACJjB,IADI;AAEX,cACIsB,OAAO,CAACgiB,KAAR,CAAcR,cAAd,CAA6B9iB,IAA7B,KACAsB,OAAO,CAACgiB,KAAR,CAActjB,IAAd,aAA+BsS,KAD/B,IAEAhR,OAAO,CAACL,KAAR,CAAcsiB,KAAd,CAAoBlhB,IAApB,CAAyB,UAACmhB,IAAD;AAAA,mBAAUA,IAAI,KAAKxjB,IAAnB;AAAA,WAAzB,CAHJ,EAIE;AAAA,yDAC2BsB,OAAO,CAACgiB,KAAR,CAActjB,IAAd,CAD3B;AAAA;;AAAA;AACE,wEAA8C;AAAA,oBAAnCyjB,UAAmC;;AAC1C;AACA,oBACIC,UAAU,CAAC;AACPtS,sBAAI,EAAE9P,OAAO,CAAC8P,IADP;AAEPnQ,uBAAK,EAAEK,OAAO,CAACL,KAFR;AAGPoH,sBAAI,EAAE/G,OAAO,CAAC+G,IAHP;AAIP2D,4BAAU,EAAE1K,OAAO,CAAC0K,UAJb;AAKPtL,0BAAQ,EAAEY,OAAO,CAACZ,QALX;AAMP4iB,uBAAK,EAAEG,UAAU,CAACE;AANX,iBAAD,CADd,EASE;AACE,sBAAMC,OAAO,GAAGH,UAAU,CAACH,KAA3B;AACA,sBAAMK,UAAU,GAAGF,UAAU,CAACE,UAA9B;AACAP,sCAAoB,CAACC,IAArB,GAA4B,KAA5B;AACA;;AACA,sBAAIM,UAAU,CAACE,UAAf,EAA2B;AACvBT,wCAAoB,CAACS,UAArB,GAAkCC,eAAe,CAC7CH,UAAU,CAACE,UADkC,CAAjD;AAGH;AACD;;;AACA,sBAAIF,UAAU,CAACI,UAAf,EAA2B;AACvBX,wCAAoB,CAACW,UAArB,GAAkCD,eAAe,CAC7CH,UAAU,CAACI,UADkC,CAAjD;AAGH,mBAfH,CAgBE;AACA;AACA;AACA;;AACA;;;AACA,sBAAIH,OAAO,CAAC/D,YAAR,KAAyBlF,SAA7B,EAAwC;AACpCyI,wCAAoB,CAACvD,YAArB,GAAoC+D,OAAO,CAAC/D,YAA5C;AACH;;AACD;AACH;AACJ;AAtCH;AAAA;AAAA;AAAA;AAAA;AAuCD;AACD;;;AACA,cAAI,CAACuD,oBAAoB,CAACC,IAA1B,EAAgC;AAC5B;AACH;AAjDU;;AACf,aAAK,IAAMrjB,IAAX,IAAmBsB,OAAO,CAACgiB,KAA3B,EAAkC;AAAA,4BAAvBtjB,IAAuB;;AAAA,gCA+C1B;AAEP;AACJ;;AACD,aAAOojB,oBAAP;AACH;AAED;;;;;;;;;AAOA,aAASM,UAAT,CAAoBpiB,OAApB,EAA8C;AAC1C;AACA,UAAIA,OAAO,CAACgiB,KAAZ,EAAmB;AACf,YAAMjb,IAAI,GAAG,kCAAK,CAAC/G,OAAO,CAAC+G,IAAT,CAAlB;AACA,YAAMyE,MAAM,GAAGxL,OAAO,CAAC0K,UAAR,GAAqB,kCAAK,CAAC1K,OAAO,CAAC0K,UAAT,CAA1B,GAAiD,kCAAK,EAArE;AACA,YAAMiB,KAAK,GAAGzJ,MAAM,CAACjI,IAAP,CAAY+F,OAAO,CAACgiB,KAApB,EAA2B3iB,MAAzC;AACA,YAAIqjB,OAAO,GAAG,CAAd;;AAJe;AAKV,cAAMvgB,GAAG,oBAAT;AACD,cAAIwgB,OAAO,GAAG,CAAd;AACA,cAAMC,SAAS,GACX5iB,OAAO,CAACgiB,KAAR,CAAc7f,GAAd,aAA8B6O,KAA9B,GACOhR,OAAO,CAACgiB,KAAR,CAAc7f,GAAd,CADP,GAEM,CAACnC,OAAO,CAACgiB,KAAR,CAAc7f,GAAd,CAAD,CAHV;;AAIA,kBAAQA,GAAR;AACI,iBAAK,QAAL;AACI;AACA,kBAAInC,OAAO,CAAC8P,IAAR,IAAgB9P,OAAO,CAAC8P,IAAR,CAAa+S,MAAjC,EAAyC;AACrCF,uBAAO,GAAG,CAAV;AACAC,yBAAS,CAACrZ,OAAV,CAAkB,UAACrI,CAAD;AAAA,yBACdlB,OAAO,CAAC8P,IAAR,CAAa+S,MAAb,CAAoB9hB,IAApB,CAAyB,UAAC+hB,CAAD;AAAA,2BAAOA,CAAC,KAAK5hB,CAAb;AAAA,mBAAzB,IAA2CyhB,OAAO,EAAlD,GAAuD,IADzC;AAAA,iBAAlB;AAGA;;AACA,oBAAIA,OAAO,GAAG,CAAd,EAAiB;AACbD,yBAAO;AACV;AACJ;;AACD;;AACJ,iBAAK,WAAL;AACI;AACA,kBAAI1iB,OAAO,CAAC8P,IAAR,IAAgB9P,OAAO,CAAC8P,IAAR,CAAarU,QAAjC,EAA2C;AACvCknB,uBAAO,GAAG,CAAV;AACAC,yBAAS,CAACrZ,OAAV,CAAkB,UAACrI,CAAD;AAAA,yBACd,CAAClB,OAAO,CAAC8P,IAAR,CAAaiT,aAAb,CAA2BhjB,IAA3B,IAAmC,EAApC,EAAwC6e,OAAxC,CAAgD1d,CAAhD,KAAsD,CAAtD,GACMyhB,OAAO,EADb,GAEM,IAHQ;AAAA,iBAAlB;AAKA;;AACA,oBAAIA,OAAO,IAAI3iB,OAAO,CAACgiB,KAAR,CAAc7f,GAAd,EAAmB9C,MAAlC,EAA0C;AACtCqjB,yBAAO;AACV;AACJ;;AACD;;AACJ,iBAAK,WAAL;AACI;AACA,kBAAI1iB,OAAO,CAAC+G,IAAZ,EAAkB;AACd,oBAAM3H,QAAQ,GAAGojB,eAAe,CAACI,SAAS,CAAC,CAAD,CAAV,CAAhC;AACA,oBAAMI,KAAK,GAAG,kCAAK,GAAGriB,GAAR,CAAYvB,QAAZ,EAAsB,GAAtB,CAAd;AACA,oBAAI6jB,KAAK,GAAGlc,IAAI,CAACa,QAAL,CAAcob,KAAd,EAAqB,GAArB,CAAZ;AACA;;AACA,oBAAIxX,MAAJ,EAAY;AACRyX,uBAAK,GAAGA,KAAK,IAAIzX,MAAM,CAAC5D,QAAP,CAAgBob,KAAhB,EAAuB,GAAvB,CAAjB;AACH;;AACDN,uBAAO,IAAIO,KAAK,GAAG,CAAH,GAAO,CAAvB;AACH;;AACD;;AACJ,iBAAK,UAAL;AACI;AACA,kBAAIjjB,OAAO,CAAC+G,IAAZ,EAAkB;AACd,oBAAM3H,SAAQ,GAAGojB,eAAe,CAACI,SAAS,CAAC,CAAD,CAAV,CAAhC;;AACA,oBAAMI,MAAK,GAAG,kCAAK,GAAGriB,GAAR,CAAYvB,SAAZ,EAAsB,GAAtB,CAAd;;AACA2H,oBAAI,CAACuB,OAAL,CAAa0a,MAAb,EAAoB,GAApB,IAA2BN,OAAO,EAAlC,GAAuC,EAAvC;AACH;;AACD;;AACJ,iBAAK,YAAL;AACI;AACA,kBAAI1iB,OAAO,CAACZ,QAAZ,EAAsB;AAClB8jB,0CAA0B,CAACljB,OAAO,CAACZ,QAAT,EAAmBwjB,SAAS,CAAC,CAAD,CAA5B,CAA1B,GAA6DF,OAAO,EAApE,GAAyE,EAAzE;AACH;;AACD;;AACJ,iBAAK,YAAL;AACI;AACA,kBAAI1iB,OAAO,CAACZ,QAAZ,EAAsB;AAClB8jB,0CAA0B,CAACN,SAAS,CAAC,CAAD,CAAV,EAAe5iB,OAAO,CAACZ,QAAvB,CAA1B,GAA6DsjB,OAAO,EAApE,GAAyE,EAAzE;AACH;;AACD;AA7DR;AAXW;;AAKf,yCAAkBxgB,MAAM,CAACjI,IAAP,CAAY+F,OAAO,CAACgiB,KAApB,CAAlB,oCAA8C;AAAA;AAqE7C;;AACD,eAAOU,OAAO,IAAI/W,KAAlB;AACH;;AACD,aAAO,KAAP;AACH;AAED;;;;;;AAIO,aAASwX,YAAT,CAAsBC,SAAtB,EAAuD;AAC1D,aAAOlhB,MAAM,CAACmhB,MAAP,CAAcD,SAAd,EAAyBjjB,MAAzB,CAAgC,UAACmjB,GAAD,EAAMlX,KAAN,EAAgB;AACnD,YAAMmX,SAAS,GAAGnX,KAAK,CAACjM,MAAN,CAAa,UAACsiB,UAAD,EAAae,EAAb,EAAoB;AAC/C,cAAIA,EAAE,CAACnB,UAAH,CAAcI,UAAd,IAA4BD,eAAe,CAACgB,EAAE,CAACnB,UAAH,CAAcI,UAAf,CAAf,GAA4Ca,GAA5E,EAAiF;AAC7E,mBAAOd,eAAe,CAACgB,EAAE,CAACnB,UAAH,CAAcI,UAAf,CAAtB;AACH,WAFD,MAEO;AACH,mBAAOA,UAAP;AACH;AACJ,SANiB,EAMf,CANe,CAAlB;;AAOA,YAAIc,SAAS,GAAGD,GAAhB,EAAqB;AACjB,iBAAOC,SAAP;AACH,SAFD,MAEO;AACH,iBAAOD,GAAP;AACH;AACJ,OAbM,EAaJ,CAbI,CAAP;AAcH;AAED;;;;;;;AAKO,aAASJ,0BAAT,CACHO,UADG,EAEHC,UAFG,EAEwB;AAE3B,UAAMC,KAAK,GAAW,OAAOF,UAAP,KAAsB,QAAtB,GAAiCjB,eAAe,CAACiB,UAAD,CAAhD,GAA+DA,UAArF;AACA,UAAM5C,MAAM,GACR,OAAO6C,UAAP,KAAsB,QAAtB,GAAiClB,eAAe,CAACkB,UAAD,CAAhD,GAA+DA,UADnE;AAEA,aAAOC,KAAK,IAAI9C,MAAhB;AACH;AAED;;;;;;AAIO,aAAS2B,eAAT,CAAyBoB,GAAzB,EAAoC;AACvC,UAAMC,KAAK,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAd;AACA,aAAO,CAACD,KAAK,CAAC,CAAD,CAAN,GAAYxE,YAAY,CAACwE,KAAK,CAAC,CAAD,CAAN,CAA/B;AACH;AAED;;;;;;;;AAMO,aAASE,kBAAT,CACHC,QADG,EAEHpZ,QAFG,EAGHqZ,WAHG,EAI6B;AAAA,UAAhC9kB,IAAgC,uEAAjB,kCAAK,GAAGsG,OAAR,EAAiB;AAEhC,UAAMye,UAAU,GAAG3D,mBAAmB,CAACyD,QAAD,CAAtC;AACA,UAAMna,GAAG,GAAG,kCAAK,CAAC1K,IAAD,CAAjB;AACA,UAAMglB,cAAc,GAAGD,UAAU,CAACnjB,IAAX,CAAgB,UAACqjB,IAAD,EAAU;AAC7C,YAAMpd,KAAK,GAAG,kCAAK,CAACod,IAAI,CAACpd,KAAN,CAAnB;AACA,YAAMtG,GAAG,GAAG,kCAAK,CAAC0jB,IAAI,CAAC1jB,GAAN,CAAjB;AACA,eAAOsG,KAAK,CAACsB,OAAN,CAAcuB,GAAd,KAAuBA,GAAG,CAACvB,OAAJ,CAAYtB,KAAZ,EAAmB,GAAnB,KAA2B6C,GAAG,CAACjC,QAAJ,CAAalH,GAAb,EAAkB,GAAlB,CAAzD;AACH,OAJsB,CAAvB;AAKA,UAAMsG,KAAK,GAAG,kCAAK,CAACmd,cAAc,CAACnd,KAAhB,CAAnB;AACA,UAAMtG,GAAG,GAAG,kCAAK,CAACyjB,cAAc,CAACzjB,GAAhB,CAAjB;AACA,UAAM2jB,cAAc,GAAGxa,GAAG,CAACvB,OAAJ,CAAYtB,KAAZ,EAAmB,GAAnB,KAA2B6C,GAAG,CAACjC,QAAJ,CAAalH,GAAb,EAAkB,GAAlB,CAAlD;AACA,UAAM4jB,qBAAqB,GAAG,6FAC1BD,cAAc,GAAG3jB,GAAG,CAACoH,IAAJ,CAAS+B,GAAT,EAAc,GAAd,CAAH,GAAwB7C,KAAK,CAACc,IAAN,CAAW+B,GAAX,EAAgB,GAAhB,CADZ,EAE1B,IAF0B,CAA9B;AAIA,UAAM0a,aAAa,GAAG,CAACF,cAAD,IAAmB,CAACrd,KAAK,CAACnG,MAAN,CAAagJ,GAAb,EAAkB,GAAlB,CAA1C;AACA,UAAM2a,UAAU,GAAGH,cAAc,IAAI,CAAC3jB,GAAG,CAACG,MAAJ,CAAWgJ,GAAX,EAAgB,GAAhB,CAAtC;AACA,aAAO;AACHmE,cAAM,EAAE,CAACpD,QAAD,GACF,cADE,GAEFyZ,cAAc,GACdJ,WAAW,GACP,sBADO,GAEP,WAHU,GAId,qBAPH;AAQHQ,uBAAe,EAAED,UAAU,GACrB,mBADqB,GAErBH,cAAc,wBACA3jB,GAAG,CAACE,MAAJ,CAAW,8FAAX,CADA,cACkC0jB,qBADlC,SAEdC,aAAa,GACb,mBADa,qBAEFvd,KAAK,CAACpG,MAAN,CAAa,8FAAb,CAFE,cAEkC0jB,qBAFlC;AAZhB,OAAP;AAgBH;;;;;;;;;;;;;;;;;AC1gBD;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUaI,e;;;;;;;AACT,+BAAsBvR,SAAtB,EAAkD;AAAA;;AAAA;;AAC9C,sCAAMA,SAAN;AADkB,gBAAAA,SAAA,GAAAA,SAAA;;AAElB,+DAAQwR,UAAR,CAAmB,SAAnB;;AACA,gBAAK3K,KAAL,GAAa,UAAb;AACA,gBAAKC,UAAL,GAAkB,UAAlB;;AACA,gBAAKL,QAAL,GAAgB,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAU,CAAC,CAACD,CAAC,CAACzf,EAAF,IAAQ,EAAT,EAAawqB,aAAb,CAA2B9K,CAAC,CAAC1f,EAA7B,CAAD,IAAqC,CAAC,CAACyf,CAAC,CAAC/K,OAAF,IAAa,EAAd,EAAkB8V,aAAlB,CAAgC9K,CAAC,CAAChL,OAAlC,CAAhD;AAAA,SAAhB;;AAL8C;AAMjD;;;;+BAEa1U,E,EAAY6mB,M,EAAkB;AACxC,iBAAO,KAAKpI,IAAL,CAAUze,EAAV,EAAc,QAAd,EAAwB6mB,MAAxB,CAAP;AACH;;;gCAEc7mB,E,EAAY6mB,M,EAAkB;AACzC,iBAAO,KAAKpI,IAAL,CAAUze,EAAV,EAAc,mBAAd,EAAmC6mB,MAAnC,CAAP;AACH;;;gCAEiB7I,Q,EAAiB;AAC/B,iBAAO,IAAI,sDAAJ,CAAYA,QAAZ,CAAP;AACH;;;;MAnBgC,4D;;;uBAAxBsM,e,EAAe,yH;AAAA,K;;;aAAfA,e;AAAe,eAAfA,eAAe,K;AAAA,kBAFZ;;;;;sEAEHA,e,EAAe;cAH3B,wDAG2B;eAHhB;AACRzM,oBAAU,EAAE;AADJ,S;AAGgB,Q;;;;;;;;;;;;;;;;;;;;;;ACV5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASa4M,yB;;;;;;;AAET,yCAAsB1R,SAAtB,EAAkD;AAAA;;AAAA;;AAC9C,sCAAMA,SAAN;AADkB,gBAAAA,SAAA,GAAAA,SAAA;AAElB,gBAAK6G,KAAL,GAAa,yBAAb;AACA,gBAAKC,UAAL,GAAkB,oBAAlB;AAH8C;AAIjD;;;;gCAEW;AACR,gBAAMlgB,KAAK,CAAC,uEAAD,CAAX;AACH;;;+BAEU;AACP,gBAAMA,KAAK,CAAC,sEAAD,CAAX;AACH;;;oCAEkBkiB,Q,EAAe;AAC9B,iBAAO,IAAI,yEAAJ,CAAqBA,QAArB,CAAP;AACH;;;+BAEanW,I,EAAwB;AAClC,iBAAOA,IAAI,YAAY,yEAAhB,GAAmCA,IAAI,CAACjC,MAAL,EAAnC,GAAmDiC,IAA1D;AACH;;;;MAtB0C,4D;;;uBAAlC+e,yB,EAAyB,yH;AAAA,K;;;aAAzBA,yB;AAAyB,eAAzBA,yBAAyB,K;AAAA,kBAFtB;;;;;sEAEHA,yB,EAAyB;cAHrC,wDAGqC;eAH1B;AACR5M,oBAAU,EAAE;AADJ,S;AAG0B,Q;;;;;;;;;;;;;;;;;;;;;;ACVtC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAGa6M,gB;;;;;;;AAkBT,gCAAY/lB,IAAZ,EAA2B;AAAA;;AAAA;;AACvB,sCAAMA,IAAN;AACA,gBAAKwH,KAAL,GAAa,CAACxH,IAAI,CAACwH,KAAL,IAAc,EAAf,EAAmB7G,GAAnB,CAAuB,UAAAoG,IAAI;AAAA,iBACpCA,IAAI,CAACS,KAAL,GAAa,IAAIue,gBAAJ,CAAqBhf,IAArB,CAAb,GAA0C,IAAI,iEAAJ,CAAiBA,IAAjB,CADN;AAAA,SAA3B,CAAb;AAGA,6BAAe/G,IAAI,WAAJ,KAAiB,MAAjB,IAA2BA,IAAI,WAAJ,KAAiB,IAA3D;AACA,gBAAKkjB,KAAL,GAAaljB,IAAI,CAACkjB,KAAL,IAAcljB,IAAI,CAACkjB,KAAL,CAAW5iB,MAAzB,sBAAuCN,IAAI,CAACkjB,KAA5C,IAAsD,EAAnE;AACC,gBAAa1R,WAAb,GAA2B,QAAKA,WAAL,IAAoB,QAAKhK,KAAL,CAAWlH,MAA1D;AACA,gBAAa0lB,aAAb,GAA6B,CAAC,CAAChmB,IAAI,CAACgmB,aAAP,IAAwB,kBAArD;AARsB;AAS1B;;;;;AAED;;;iCAGa;AACT,cAAMhM,GAAG,+EAAT;;AACAA,aAAG,CAACxS,KAAJ,GAAYwS,GAAG,CAACxS,KAAJ,CAAU7G,GAAV,CAAc,UAACoG,IAAD;AAAA,mBAAwBA,IAAI,CAACjC,MAAL,EAAxB;AAAA,WAAd,CAAZ;AACAkV,aAAG,CAACgM,aAAJ,GAAoB,CAAC,CAAChM,GAAG,CAACgM,aAAN,IAAuBhM,GAAG,WAA9C;AACA,iBAAOA,GAAP;AACH;;;4BA7B2B;AACxB,iBACI,KAAKgM,aAAL,IACA,KAAKxe,KAAL,CAAWpG,MAAX,CACI,UAAC6kB,OAAD,EAAUlf,IAAV;AAAA,mBAAmBkf,OAAO,IAAIlf,IAAI,CAACmD,iBAAnC;AAAA,WADJ,EAEI,KAFJ,CAFJ;AAOH;;;;MAhBiC,iE;;;;;;;;;;;;;;;;;ACMtC;AAAA;;;AAAA;AAAA;AAAA;;QAAagc,Y;;;AAqDT,4BAAYlmB,IAAZ,EAA2B;AAAA;;AApB3B;AACQ,aAAAmmB,OAAA,GAAU,CAAV;AAoBJ,aAAKC,WAAL,kBAA2Bzd,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,SAA3B,CAA3B;AACA,aAAK/lB,EAAL,GAAU2E,IAAI,CAAC3E,EAAL,IAAW,EAArB;AACA,aAAK2F,IAAL,GAAYhB,IAAI,CAACgB,IAAL,IAAa,EAAzB;AACA,aAAKP,SAAL,GAAiB;AACb4lB,oBAAU,EAAE,CAACrmB,IAAI,CAACS,SAAL,GAAiBT,IAAI,CAACS,SAAL,CAAe4lB,UAAhC,GAA6CrmB,IAAI,CAACsmB,cAAnD,KAAsE,CAAC,CADtE;AAEbC,kBAAQ,EAAE,CAACvmB,IAAI,CAACS,SAAL,GAAiBT,IAAI,CAACS,SAAL,CAAe8lB,QAAhC,GAA2CvmB,IAAI,CAACwmB,YAAjD,KAAkE,CAAC;AAFhE,SAAjB;AAIA,aAAKtI,WAAL,GAAmBle,IAAI,CAACke,WAAL,IAAoB,EAAvC;AACA,aAAKuI,YAAL,GAAoBzmB,IAAI,CAACymB,YAAL,IAAqBzmB,IAAI,CAAC0mB,MAA9C;AACA,aAAKpc,UAAL,GAAkBtK,IAAI,CAACsK,UAAL,IAAmBtK,IAAI,CAAC2mB,KAAxB,IAAiC,CAAnD;AACA,aAAKC,aAAL,GAAqB5mB,IAAI,CAAC4mB,aAA1B;AACA,aAAKC,gBAAL,GAAwBle,IAAI,CAACoV,GAAL,CAAS,CAAT,EAAY/d,IAAI,CAAC6mB,gBAAL,IAAyB,CAArC,CAAxB;AACA,aAAKC,gBAAL,GAAwBne,IAAI,CAACoV,GAAL,CAAS,CAAT,EAAY/d,IAAI,CAAC8mB,gBAAL,IAAyB,GAArC,CAAxB;AACA,aAAKC,iBAAL,GAAyB/mB,IAAI,CAACgnB,YAAL,IAAqBhnB,IAAI,CAAC+mB,iBAA1B,IAA+C/mB,IAAI,CAACinB,UAA7E;AACA,aAAKjB,aAAL,GAAqB,CAAC,CAAChmB,IAAI,CAACgmB,aAA5B;AACA,aAAKkB,UAAL,GAAkBlnB,IAAI,CAACknB,UAAL,IAAmB,EAArC;AACA,aAAKC,aAAL,GAAqBnnB,IAAI,CAACmnB,aAA1B;AACA,aAAK3V,WAAL,GAAmBxR,IAAI,CAACwR,WAAL,IAAoB,CAAvC;AACA,aAAK4V,YAAL,GAAoB,CAAC,CAACpnB,IAAI,CAAConB,YAAP,IAAuBpnB,IAAI,CAACgjB,IAAhD;AACA,aAAKmD,OAAL,GAAenmB,IAAI,CAACmmB,OAAL,IAAgBnmB,IAAI,CAACkH,MAArB,IAA+B,CAA9C;AACA,aAAKmgB,OAAL,GAAernB,IAAI,CAACqnB,OAApB;AACH;;;;oCAEkC;AAAA,cAAlBngB,MAAkB,uEAAD,CAAC;;AAC/B,cAAIA,MAAM,IAAI,KAAKif,OAAnB,EAA4B;AACxB,gBAAIjf,MAAM,GAAG,KAAK2f,gBAAlB,EAAoC;AAChC3f,oBAAM,GAAG,CAAT;AACH;AACJ,WAJD,MAIO;AACH,gBAAIA,MAAM,GAAG,KAAK2f,gBAAlB,EAAoC;AAChC3f,oBAAM,GAAG,KAAK2f,gBAAd;AACH;AACJ;;AACD,eAAKV,OAAL,GAAexd,IAAI,CAACoV,GAAL,CAAS,CAAT,EAAYpV,IAAI,CAAC4b,GAAL,CAAS,KAAKuC,gBAAd,EAAgC5f,MAAhC,CAAZ,CAAf;AACH;AAED;;;;;;;qCAIsC;AAAA,cAApBA,MAAoB,uEAAH,CAAG;AAClCA,gBAAM,GAAGyB,IAAI,CAACoV,GAAL,CAAS,CAAT,EAAY7W,MAAZ,CAAT;AACA,eAAKif,OAAL,IAAgBjf,MAAhB;;AACA,cAAI,KAAKif,OAAL,GAAe,CAAnB,EAAsB;AAClB,iBAAKA,OAAL,GAAe,CAAf;AACH,WAFD,MAEO,IAAI,KAAKA,OAAL,GAAe,KAAKU,gBAAxB,EAA0C;AAC7C,iBAAKV,OAAL,GAAe,KAAKU,gBAApB;AACH,WAFM,MAEA,IAAI,KAAKV,OAAL,GAAe,KAAKW,gBAAxB,EAA0C;AAC7C,iBAAKX,OAAL,GAAe,KAAKW,gBAApB;AACH;AACJ;AAED;;;;;;;0CAI2C;AAAA,cAApB5f,MAAoB,uEAAH,CAAG;AACvCA,gBAAM,GAAGyB,IAAI,CAACoV,GAAL,CAAS,CAAT,EAAY7W,MAAZ,CAAT;AACA,eAAKif,OAAL,IAAgBjf,MAAhB;;AACA,cAAI,KAAKif,OAAL,GAAe,CAAnB,EAAsB;AAClB,iBAAKA,OAAL,GAAe,CAAf;AACH,WAFD,MAEO,IAAI,KAAKA,OAAL,GAAe,KAAKU,gBAAxB,EAA0C;AAC7C,iBAAKV,OAAL,GAAe,CAAf;AACH;AACJ;AAED;;;;;;iCAGa;AACT,cAAMnM,GAAG,qBAAa,IAAb,CAAT,CADS,CAET;;AACA,iBAAOA,GAAG,CAACT,QAAX;AACA,iBAAOS,GAAG,CAACR,aAAX,CAJS,CAKT;;AACAQ,aAAG,CAAC2M,KAAJ,GAAY3M,GAAG,CAAC1P,UAAhB;AACA0P,aAAG,CAACgJ,IAAJ,GAAWhJ,GAAG,CAACoN,YAAf;AACApN,aAAG,CAACiN,UAAJ,GAAiBjN,GAAG,CAAC+M,iBAArB;AACA,cAAM7rB,IAAI,GAAGiI,MAAM,CAACjI,IAAP,CAAY8e,GAAZ,CAAb;;AACA,qCAAkB9e,IAAlB,8BAAwB;AAAnB,gBAAMkI,GAAG,cAAT;;AACD,gBAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAChB,kBAAMgX,OAAO,GAAGhX,GAAG,CAACiX,MAAJ,CAAW,CAAX,CAAhB;AACAL,iBAAG,CAACI,OAAD,CAAH,GAAeJ,GAAG,CAAC5W,GAAD,CAAlB;AACA,qBAAO4W,GAAG,CAAC5W,GAAD,CAAV;AACH,aAJD,MAIO,IAAI4W,GAAG,CAAC5W,GAAD,CAAH,KAAakX,SAAjB,EAA4B;AAC/B,qBAAON,GAAG,CAAC5W,GAAD,CAAV;AACH;AACJ;;AACD,iBAAO4W,GAAP;AACH;;;4BAxG2B;AACxB,iBAAO,KAAKgM,aAAZ;AACH;AAED;;;;4BACiB;AACb,iBAAO,KAAKG,OAAL,IAAgB,CAAvB;AACH;AAED;;;;4BACgB;AACZ,iBAAQ,KAAKA,OAAL,GAAe,KAAK7b,UAArB,IAAoC,CAA3C;AACH;;;;;;;;;;;;;;;;;;;;;AC3DL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUagd,oB;;;;;;;AACT,oCAAsBlT,SAAtB,EAAkD;AAAA;;AAAA;;AAC9C,sCAAMA,SAAN;AADkB,gBAAAA,SAAA,GAAAA,SAAA;AAElB,gBAAK6G,KAAL,GAAa,eAAb;AACA,gBAAKC,UAAL,GAAkB,eAAlB;AAH8C;AAIjD;;;;gCAEW;AACR,gBAAMlgB,KAAK,CAAC,yDAAD,CAAX;AACH;;;+BAEU;AACP,gBAAMA,KAAK,CAAC,wDAAD,CAAX;AACH;;;oCAEkBkiB,Q,EAAe;AAC9B,iBAAO,IAAI,iEAAJ,CAAiBA,QAAjB,CAAP;AACH;;;+BAEanW,I,EAAoB;AAC9B,iBAAOA,IAAI,YAAY,iEAAhB,GAA+BA,IAAI,CAACjC,MAAL,EAA/B,GAA+CiC,IAAtD;AACH;;;;MArBqC,4D;;;uBAA7BugB,oB,EAAoB,yH;AAAA,K;;;aAApBA,oB;AAAoB,eAApBA,oBAAoB,K;AAAA,kBAFjB;;;;;sEAEHA,oB,EAAoB;cAHhC,wDAGgC;eAHrB;AACRpO,oBAAU,EAAE;AADJ,S;AAGqB,Q;;;;;;;;;;;;;;;;;;;;;;ACXjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAWaqO,mB;;;;;;;AACT,mCAAsBnT,SAAtB,EAAkD;AAAA;;AAAA;;AAC9C,sCAAMA,SAAN;AADkB,gBAAAA,SAAA,GAAAA,SAAA;AAElB,gBAAK6G,KAAL,GAAa,eAAb;AACA,gBAAKC,UAAL,GAAkB,MAAlB;AAH8C;AAIjD;AAED;;;;;;;;oCAIsBnU,I,EAAe;AACjC,iBAAOA,IAAI,CAACS,KAAL,GAAa,IAAI,yEAAJ,CAAqBT,IAArB,CAAb,GAA0C,IAAI,iEAAJ,CAAiBA,IAAjB,CAAjD;AACH;;;;MAboC,4D;;;uBAA5BwgB,mB,EAAmB,yH;AAAA,K;;;aAAnBA,mB;AAAmB,eAAnBA,mBAAmB,K;AAAA,kBAFhB;;;;;sEAEHA,mB,EAAmB;cAH/B,wDAG+B;eAHpB;AACRrO,oBAAU,EAAE;AADJ,S;AAGoB,Q;;;;;;;;;;;;;;;;;;;;;;ACXhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAmBasO,a;;;AA0CT,6BAAYxnB,IAAZ,EAA2B;AAAA;;AAjC3B;AACS,aAAAmI,YAAA,GAAuB,kCAAK,GAChC1B,OAD2B,CACnB,GADmB,EAE3BC,OAF2B,EAAvB;AAGT;;AACS,aAAA0B,aAAA,GAAwB,CAAxB;AACT;;AACS,aAAAzF,WAAA,GAAsB,EAAtB;AACT;;AACS,aAAAjG,QAAA,GAAmB,EAAnB;AAOT;;AACS,aAAA8K,KAAA,GAAsD,EAAtD;AAOT;;AACQ,aAAA+R,QAAA,GAAoB,EAApB;AACR;;AACU,aAAAC,aAAA,GAAiC,EAAjC;AAON,aAAKne,EAAL,GAAU2E,IAAI,CAAC3E,EAAL,oBAAoBsN,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,SAA3B,CAApB,CAAV;AACA,aAAK7hB,OAAL,GAAeS,IAAI,CAACT,OAApB;AACA,aAAK6I,aAAL,GAAqBpI,IAAI,CAACoI,aAAL,IAAsBpI,IAAI,CAACiI,KAA3B,IAAoC,CAAzD;AACA,aAAKE,YAAL,GAAoBnI,IAAI,CAACmI,YAAzB;AACA,aAAKxF,WAAL,GAAmB3C,IAAI,CAAC2C,WAAL,IAAoB3C,IAAI,CAACtD,QAA5C;AACA,aAAKA,QAAL,GAAgBsD,IAAI,CAACtD,QAAL,IAAiB,EAAjC;AACA,aAAKuS,MAAL,GAAcjP,IAAI,CAACiP,MAAL,IAAe,UAA7B;AACA,aAAKhB,WAAL,GAAmBjO,IAAI,CAACiO,WAAL,IAAoBjO,IAAI,CAAC/E,IAA5C;AACA,aAAKkK,KAAL,GAAanF,IAAI,CAACmF,KAAlB;AACA,aAAKsiB,OAAL,GAAeznB,IAAI,CAACynB,OAAL,YAAwBxV,KAAxB,GAAgC,CAAC,CAACjS,IAAI,CAACynB,OAAL,CAAannB,MAA/C,GAAwDN,IAAI,CAACynB,OAA5E;AACA,aAAKC,MAAL,GAAc1nB,IAAI,CAAC0nB,MAAL,YAAuBzV,KAAvB,GAA+B,CAAC,CAACjS,IAAI,CAAC0nB,MAAL,CAAYpnB,MAA7C,GAAsDN,IAAI,CAAC0nB,MAAzE;AACA,aAAKzkB,MAAL,GAAcjD,IAAI,CAACiD,MAAL,IAAe,KAA7B;AACA,aAAKuE,KAAL,GAAa,CAACxH,IAAI,CAACwH,KAAL,IAAc,EAAf,EACR7G,GADQ,CACJ,UAAAoG,IAAI;AAAA,iBAAKA,IAAI,CAACS,KAAL,GAAa,IAAI,yEAAJ,CAAqBT,IAArB,CAAb,GAA0C,IAAI,iEAAJ,CAAiBA,IAAjB,CAA/C;AAAA,SADA,EAER7E,MAFQ,CAED,UAAA6E,IAAI;AAAA,iBAAI,CAAC,CAACA,IAAI,CAACG,MAAX;AAAA,SAFH,CAAb;AAGH;AAED;;;;;;AAkDA;;;;;4CAK2BlG,I,EAAsCgD,K,EAAU;AACvE,eAAKuV,QAAL,CAAcvY,IAAd,IAAsBgD,KAAtB;AACH;AAED;;;;8CAC6B;AACzB,iBAAO,KAAKuV,QAAZ;AACA,eAAKA,QAAL,GAAgB,EAAhB;AACH;AAED;;;;;;iCAG+D;AAAA,cAA5BQ,YAA4B,uEAAJ,IAAI;AAC3D,cAAMC,GAAG,qBAAa,IAAb,CAAT,CAD2D,CAE3D;;AACA,iBAAOA,GAAG,CAACT,QAAX;AACA,iBAAOS,GAAG,CAACR,aAAX,CAJ2D,CAK3D;;AACA,iBAAOQ,GAAG,CAACza,OAAX;AACA,iBAAOya,GAAG,CAAC5a,OAAX,CAP2D,CAS3D;;AACA,cAAMlE,IAAI,GAAGiI,MAAM,CAACjI,IAAP,CAAY8e,GAAZ,CAAb;;AACA,qCAAkB9e,IAAlB,8BAAwB;AAAnB,gBAAMkI,GAAG,cAAT;;AACD,gBAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAChB,kBAAMgX,OAAO,GAAG,KAAKZ,aAAL,CAAmBpW,GAAG,CAACiX,MAAJ,CAAW,CAAX,CAAnB,KAAqCjX,GAAG,CAACiX,MAAJ,CAAW,CAAX,CAArD;AACAL,iBAAG,CAACI,OAAD,CAAH,GAAeJ,GAAG,CAAC5W,GAAD,CAAlB;AACA,qBAAO4W,GAAG,CAAC5W,GAAD,CAAV;AACH,aAJD,MAIO,IAAI4W,GAAG,CAAC5W,GAAD,CAAH,KAAakX,SAAjB,EAA4B;AAC/B,qBAAON,GAAG,CAAC5W,GAAD,CAAV;AACH;AACJ;;AACD4W,aAAG,CAACxS,KAAJ,GAAYwS,GAAG,CAACxS,KAAJ,CAAU7G,GAAV,CAAc,UAACoG,IAAD;AAAA,mBAAwBA,IAAI,CAACjC,MAAL,EAAxB;AAAA,WAAd,CAAZ;AACA,iBAAOiV,YAAY,GAAG,MAAD,OAAC,CAAD,kBAAMC,GAAN,CAAC,EAAa,KAAKT,QAAlB,CAAH,GAAkCS,GAArD;AACH;;;4BAzFiB;AACd,iBAAO,kBAAK,KAAKT,QAAV,KAAwB,EAA/B;AACH;AAED;;;;4BACe;AACX,cAAI5Z,IAAI,GAAG,EAAX;AACA;;AACA,cAAI,KAAK8nB,OAAT,EAAkB9nB,IAAI,IAAI,SAAR;AAClB;;AACA,cAAI,KAAK+nB,MAAT,EAAiB;AACb;AACA,gBAAI/nB,IAAJ,EAAUA,IAAI,IAAI,KAAR;AACVA,gBAAI,IAAI,QAAR;AACH;;AACD,iBAAOA,IAAP;AACH;AAED;;;;4BACgB;AACZ,iBAAO,KAAK6H,KAAL,CAAWpG,MAAX,CAAkB,UAAC0I,KAAD,EAAQ/C,IAAR;AAAA,mBAAiB+C,KAAK,IAAI/C,IAAI,CAAC+C,KAAL,IAAc,CAAlB,CAAtB;AAAA,WAAlB,EAA8D,CAA9D,CAAP;AACH;AAED;;;;4BACqB;AACjB,iBAAO,KAAKtC,KAAL,CAAWpG,MAAX,CAAkB,UAAC0I,KAAD,EAAQ/C,IAAR;AAAA,mBAAiB+C,KAAK,IAAI/C,IAAI,CAACG,MAAL,IAAe,CAAnB,CAAtB;AAAA,WAAlB,EAA+D,CAA/D,CAAP;AACH;AAED;;;;4BAC0B;AACtB,cAAM9G,IAAI,GAAG,KAAKb,OAAL,GAAe,KAAKA,OAAL,CAAaa,IAA5B,GAAmC,KAAK+H,YAArD;AACA,iBAAO,kCAAK,CAAC/H,IAAD,CAAL,CACFwB,GADE,CACE,KAAKwG,aADP,EACsB,GADtB,EAEFvG,MAFE,CAEK,QAFL,CAAP;AAGH;AAED;;;;4BAC0B;AACtB,cAAMzB,IAAI,GAAG,KAAKb,OAAL,GAAe,KAAKA,OAAL,CAAaa,IAA5B,GAAmC,KAAK+H,YAArD;AACA,iBAAO,kCAAK,CAAC/H,IAAD,CAAL,CACFwB,GADE,CACE,KAAKwG,aADP,EACsB,GADtB,EAEFvG,MAFE,CAEK,aAFL,CAAP;AAGH;AAED;;;;4BACsB;AAClB,iBAAO,CAAC,CAACsB,MAAM,CAACjI,IAAP,CAAY,KAAKqe,QAAjB,EAA2BjZ,MAApC;AACH;;;;;;;;;;;;;;;;;;;;;AC7HL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAGaqnB,W;;;AAyCT,2BAAYtO,QAAZ,EAA+B;AAAA;;AAC3B,aAAKhe,EAAL,GAAUge,QAAQ,CAAChe,EAAT,IAAege,QAAQ,CAACuO,MAAxB,IAAkCvO,QAAQ,CAACwO,OAArD;AACA,aAAK7mB,IAAL,GAAYqY,QAAQ,CAACrY,IAAT,IAAiB,EAA7B;AACA,aAAK8mB,CAAL,GAASzO,QAAQ,CAACyO,CAAT,GACHnf,IAAI,CAACqH,KAAL,CAAW,KAAK+X,SAAL,CAAe1O,QAAQ,CAACyO,CAAxB,EAA2BzO,QAAQ,CAAC2O,KAAT,IAAkB,KAA7C,IAAsD,KAAjE,CADG,GAEH,IAFN;AAGA,aAAKC,CAAL,GAAS5O,QAAQ,CAAC4O,CAAT,GACHtf,IAAI,CAACqH,KAAL,CAAW,KAAK+X,SAAL,CAAe1O,QAAQ,CAAC4O,CAAxB,EAA2B5O,QAAQ,CAAC2O,KAAT,IAAkB,KAA7C,IAAsD,KAAjE,CADG,GAEH,IAFN;AAGA,aAAKplB,KAAL,GAAayW,QAAQ,CAACzW,KAAT,YAA0B,uEAA1B,GACPyW,QAAQ,CAACzW,KADF,GAEP,KAAKnG,QAAL,CAAc0Y,MAAd,CAAqBrS,YAArB,CAAkColB,WAAlC,CAA8C7O,QAAQ,CAACzW,KAAvD,CAFN;AAGA,aAAKulB,KAAL,GAAa,KAAKL,CAAL,KAAW,IAAX,IAAmB,KAAKG,CAAL,KAAW,IAA3C;AACA,aAAKG,UAAL,GAAkBzf,IAAI,CAACoV,GAAL,CAAS,CAAT,EAAYpV,IAAI,CAAC4b,GAAL,CAAS,EAAT,EAAalL,QAAQ,CAAC+O,UAAT,IAAuB,CAApC,CAAZ,CAAlB;AACA,aAAKC,OAAL,GAAe,KAAKhtB,EAAL,IAAW,KAAKA,EAAL,CAAQwkB,OAAR,CAAgB,OAAhB,MAA6B,CAAvD;AACA,aAAKyI,KAAL,GAAa,EAAE,KAAKtnB,IAAL,IAAa,KAAK4B,KAAlB,KAA4B,KAAKvH,EAAL,IAAW,KAAKysB,CAAhB,IAAqB,KAAKG,CAAtD,CAAF,CAAb;AACH;AApCD;;;;;;AAsCA;kCACkBjkB,K,EAAe+Z,G,EAAW;AACxC,iBAAO/Z,KAAK,IAAI+Z,GAAG,GAAG,GAAV,CAAZ;AACH;;;;AArCD;4BACsB;AAClB,iBAAO4J,WAAW,CAAClrB,QAAnB;AACH;AAED;;;;4BACkB;AAAA;;AACd,cAAMuG,GAAG,GAAG,KAAKvG,QAAL,CAAc0Y,MAAd,CAAqBrS,YAArB,CAAkCC,SAAlC,CAA4Cf,IAA5C,CAAiD,UAAAgB,GAAG;AAAA,mBAAIA,GAAG,CAAC3H,EAAJ,KAAW,OAAI,CAACuH,KAAL,CAAWgH,WAA1B;AAAA,WAApD,CAAZ;;AACA,iBAAO5G,GAAG,aAAMA,GAAG,CAAChC,IAAV,eAAmB,KAAK4B,KAAL,CAAW5B,IAA9B,IAAuC,KAAK4B,KAAL,CAAW5B,IAA5D;AACH;AAED;;;;4BAC8B;AAC1B,iBAAO,KAAKvE,QAAL,CAAc0Y,MAAd,CAAqBrS,YAArB,CAAkCD,QAAlC,CAA2CxH,EAA3C,KAAkD,KAAKuH,KAAL,CAAWgH,WAApE;AACH;;;mCAjBwB6Q,O,EAAoB;AACzCkN,qBAAW,CAAClrB,QAAZ,GAAuBge,OAAvB;AACH;;;;;;;;;;;;;;;;;;;;;AC7BL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUa8N,e;;;;;;;AACT,+BAAsBnU,SAAtB,EAAkD;AAAA;;AAAA;;AAC9C,sCAAMA,SAAN;AADkB,gBAAAA,SAAA,GAAAA,SAAA;;AAElB,oEAAYwR,UAAZ;;AACA,gBAAK3K,KAAL,GAAa,UAAb;AACA,gBAAKC,UAAL,GAAkB,QAAlB;AAJ8C;AAKjD;;;;8BAEiB;AACd,gBAAM,IAAIlgB,KAAJ,CAAU,yCAAV,CAAN;AACH;;;iCAEoB;AACjB,gBAAM,IAAIA,KAAJ,CAAU,yCAAV,CAAN;AACH;;;kCAEoB;AACjB,gBAAM,IAAIA,KAAJ,CAAU,yCAAV,CAAN;AACH;;;gCAEc+L,I,EAAe;AAC1B,iBAAO,IAAI,2DAAJ,CAAgBA,IAAhB,CAAP;AACH;;;;MAtBgC,4D;;;uBAAxBwhB,e,EAAe,yH;AAAA,K;;;aAAfA,e;AAAe,eAAfA,eAAe,K;AAAA,kBAFZ;;;;;sEAEHA,e,EAAe;cAH3B,wDAG2B;eAHhB;AACRrP,oBAAU,EAAE;AADJ,S;AAGgB,Q;;;;;;;;;;;;;;;;;;;;;;ACT5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAEO,aAASsP,oBAAT,CAA8BC,SAA9B,EAAkDC,eAAlD,EAA6EC,IAA7E,EAA2F;AAC9F,UAAMR,KAAK,GAAG,6FAAU,SAAV,IAAyB,CAAzB,KAA+B,CAA7C;;AACA,UAAIA,KAAK,KAAK,CAACM,SAAD,IAAcA,SAAS,CAACN,KAA7B,CAAT,EAA8C;AAC1C,eAAO,MAAP,OAAO,CAAP;AACIP,gBAAM,EAAEc,eAAe,CAAC,6FAAUA,eAAe,CAACpoB,MAA1B,CAAD,CAD3B;AAEIsC,eAAK,EAAE+lB,IAAI,CAAC,6FAAUA,IAAI,CAACroB,MAAf,CAAD;AAFf,SAAO,EAGAmoB,SAHA,CAAP;AAKH,OAND,MAMO;AACH,eAAO,MAAP,OAAO,CAAP;AACIX,WAAC,EAAE,6FAAU,GAAV,EAAe,GAAf,CADP;AAEIE,eAAK,EAAE,IAFX;AAGIC,WAAC,EAAE,6FAAU,GAAV,EAAe,GAAf,CAHP;AAIIrlB,eAAK,EAAE+lB,IAAI,CAAC,6FAAUA,IAAI,CAACroB,MAAf,CAAD,CAJf;AAKI8nB,oBAAU,EAAE,6FAAU,EAAV;AALhB,SAAO,EAMAK,SANA,CAAP;AAQH;AACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCuBYG,Q;;;;;;;AAkDT,wBAAYvP,QAAZ,EAA+B;AAAA;;AAAA;;AAC3B,sCAAMA,QAAN;AAJJ;;AACU,gBAAAC,MAAA,GAAiB,UAAjB;AAIN,YAAMnC,QAAQ,GAAGkC,QAAQ,CAAClC,QAAT,IAAqB,EAAtC;AACA,YAAM0R,SAAS,GAAG1R,QAAQ,CAAC2R,cAAT,IAA2B3R,QAA7C;AACA,gBAAKsC,OAAL,GAAeJ,QAAQ,CAACI,OAAT,IAAoBJ,QAAQ,CAAC8J,IAA5C;AACA,gBAAK4F,OAAL,GAAe,CAAC1P,QAAQ,CAAC2P,MAAT,IAAmBH,SAAS,CAACG,MAA7B,IAAuC,EAAxC,EAA4CroB,GAA5C,CAAgD,UAAAwB,CAAC;AAAA,iBAAK;AAAE9G,cAAE,EAAE8G,CAAC,CAAC8mB,QAAF,IAAc9mB,CAAC,CAAC9G,EAAtB;AAA0B2F,gBAAI,EAAEmB,CAAC,CAAC+mB,UAAF,IAAgB/mB,CAAC,CAACnB;AAAlD,WAAL;AAAA,SAAjD,CAAf;AACA,gBAAKmoB,WAAL,GAAmB,CAAC9P,QAAQ,CAAC+P,UAAT,IAAuBP,SAAS,CAACO,UAAjC,IAAgD,EAAjD,EAAqDzoB,GAArD,CAAyD,UAAAwB,CAAC;AAAA,iBAAK;AAAE9G,cAAE,EAAE8G,CAAC,CAAC8mB,QAAF,IAAc9mB,CAAC,CAAC9G,EAAtB;AAA0B2F,gBAAI,EAAEmB,CAAC,CAAC+mB,UAAF,IAAgB/mB,CAAC,CAACnB;AAAlD,WAAL;AAAA,SAA1D,CAAnB;AACA,gBAAKqoB,OAAL,GAAe,CAAChQ,QAAQ,CAACiQ,MAAT,IAAmBT,SAAS,CAACS,MAA7B,IAAwC,EAAzC,EAA6C3oB,GAA7C,CAAiD,UAAAwB,CAAC;AAAA,iBAAI,IAAI,0DAAJ,CAAkB,MAAD,OAAC,CAAD,kBAAMA,CAAN,CAAC,EAAM;AAAEyH,uBAAW,EAAE,QAAKvO;AAApB,WAAN,CAAlB,CAAJ;AAAA,SAAlD,CAAf;AACA,gBAAKkuB,MAAL,GAAclQ,QAAQ,CAACmQ,KAAT,IAAkBX,SAAS,CAACW,KAA5B,IAAqC,EAAnD;AACA,gBAAKC,QAAL,GAAgBpQ,QAAQ,CAACqQ,OAAT,IAAoBrQ,QAAQ,CAACsQ,gBAA7B,IAAiDd,SAAS,CAACc,gBAA3D,IAA+E,EAA/F;AACA,gBAAKC,QAAL,GAAgBvQ,QAAQ,CAACwQ,OAAT,IAAoBhB,SAAS,CAACgB,OAA9B,IAAyC,EAAzD;AACA,gBAAK3V,SAAL,GAAiBiD,QAAjB;AACA,gBAAK2S,cAAL,GAAsBzQ,QAAQ,CAAC0Q,aAAT,IAA0BlB,SAAS,CAACkB,aAApC,IAAqD,EAA3E;AACA,gBAAKnL,SAAL,GAAiBvF,QAAQ,CAAC3c,QAAT,IAAqBmsB,SAAS,CAACnsB,QAA/B,IAA2C;AAAEstB,mBAAS,EAAE,IAAb;AAAmBC,kBAAQ,EAAE;AAA7B,SAA5D;AACA,gBAAKC,YAAL,GAAoB,EAApB;;AACA,YAAI7Q,QAAQ,CAAC8Q,cAAb,EAA6B;AACzB,eAAK,IAAMC,GAAX,IAAkB/Q,QAAQ,CAAC8Q,cAA3B,EAA2C;AACvC,gBAAI9Q,QAAQ,CAAC8Q,cAAT,CAAwB1H,cAAxB,CAAuC2H,GAAvC,CAAJ,EAAiD;AAC7C,kBAAMC,YAAY,GAAGhR,QAAQ,CAAC8Q,cAAT,CAAwBC,GAAxB,KAAgC,EAArD;;AACA,mBAAK,IAAME,OAAX,IAAsBD,YAAtB,EAAoC;AAChC,oBAAIA,YAAY,CAAC5H,cAAb,CAA4B6H,OAA5B,CAAJ,EAA0C;AACtC,0BAAKJ,YAAL,CAAkB3jB,IAAlB,CAAuB;AACnBlL,sBAAE,EAAEgvB,YAAY,CAACC,OAAD,CADG;AAEnBtpB,wBAAI,EAAEspB,OAFa;AAGnBC,4BAAQ,EAAEH;AAHS,mBAAvB;AAKH;AACJ;AACJ;AACJ;AACJ;;AACD,gBAAKnvB,IAAL,GAAYoe,QAAQ,CAACpe,IAAT,IAAiB4tB,SAAS,CAAC5tB,IAA3B,IAAmCkc,QAAQ,CAAClc,IAA5C,IAAoD,EAAhE;AACA,gBAAKuvB,OAAL,GAAenR,QAAQ,CAACmR,OAAT,IAAoB3B,SAAS,CAAC2B,OAA9B,IAAyCrT,QAAQ,CAACqT,OAAlD,IAA6D,EAA5E;AACA,gBAAKC,eAAL,GAAuBpR,QAAQ,CAACoR,eAAT,IAA4B5B,SAAS,CAAC4B,eAAtC,IAAyDtT,QAAQ,CAACsT,eAAlE,IAAqF,IAA5G;AACA,gBAAKC,aAAL,GAAqBrR,QAAQ,CAACqR,aAAT,IAA0B7B,SAAS,CAAC6B,aAApC,IAAqDvT,QAAQ,CAACuT,aAA9D,IAA+E,EAApG;AACA,gBAAK7gB,wBAAL,GAAgCwP,QAAQ,CAACxP,wBAAT,IAAqCgf,SAAS,CAAChf,wBAA/C,IAA2EsN,QAAQ,CAACtN,wBAApF,IAAgH,CAAhJ;AACA,gBAAK3G,QAAL,GAAgBmW,QAAQ,CAACnW,QAAT,IAAqB2lB,SAAS,CAAC3lB,QAA/B,IAA2CiU,QAAQ,CAACjU,QAApD,IAAgE,KAAhF;AACA,gBAAKuP,QAAL,GAAgB4G,QAAQ,CAAC5G,QAAT,IAAqBoW,SAAS,CAACpW,QAA/B,IAA2C0E,QAAQ,CAAC1E,QAApD,IAAgE,EAAhF;AACA,gBAAKkY,QAAL,GAAgBtR,QAAQ,CAACsR,QAAT,IAAqB9B,SAAS,CAAC8B,QAA/B,IAA2CxT,QAAQ,CAACwT,QAApD,IAAgE,EAAhF;AACA,gBAAKtmB,YAAL,GAAoBgV,QAAQ,CAAChV,YAAT,IAAyBwkB,SAAS,CAACxkB,YAAnC,IAAmD8S,QAAQ,CAAC9S,YAA5D,IAA4E,KAAhG;AACA,gBAAKumB,WAAL,GAAmBvR,QAAQ,CAACuR,WAAT,IAAwB/B,SAAS,CAAC+B,WAAlC,IAAiDzT,QAAQ,CAACyT,WAA1D,IAAyE,EAA5F;AACA,gBAAKC,aAAL,GAAqBxR,QAAQ,CAACwR,aAAT,IAA0BhC,SAAS,CAACgC,aAApC,IAAqD1T,QAAQ,CAAC0T,aAA9D,IAA+E,EAApG;AAzC2B;AA0C9B;AAED;;;;;;AAYA;;;;gCAIeznB,G,EAAW;AACtB,cAAMlI,IAAI,GAAGkI,GAAG,CAAC2hB,KAAJ,CAAU,GAAV,CAAb;AACA,cAAM/gB,KAAK,GAAG,4FAAgB9I,IAAhB,EAAsB,KAAKgZ,SAA3B,CAAd;AACA,iBAAOlQ,KAAP;AACH;AAED;;;;;;;6BAIYhD,I,EAAY;AACpB,oCAAY,KAAKuoB,MAAL,CAAYvoB,IAAZ,KAAqB,EAAjC;AACH;AACD;;;;;;;AA+BA;;;;yCAIwBupB,Q,EAAgB;AACpC,iBAAO,CAAC,KAAKL,YAAL,IAAqB,EAAtB,EAA0BhoB,MAA1B,CAAiC,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACooB,QAAF,KAAeA,QAAnB;AAAA,WAAlC,CAAP;AACH;AAED;;;;;;+BAGiB;;;;;;;;0BACP,IAAIvvB,KAAJ,CAAU,qDAAV,C;;;;;;;;;AACT;AAED;;;;;;kCAGmB;;;;;;;;0BACT,IAAIA,KAAJ,CAAU,qDAAV,C;;;;;;;;;AACT;;;4BA/EgB;AACb,oCAAY,KAAK+tB,OAAL,IAAgB,EAA5B;AACH;AACD;;;;4BACqB;AACjB,oCAAY,KAAKI,WAAL,IAAoB,EAAhC;AACH;AACD;;;;4BACiB;AACb,oCAAY,KAAKE,OAAL,IAAgB,EAA5B;AACH;;;4BAqBoB;AAAA;;AACjB,iBAAOlmB,MAAM,CAACjI,IAAP,CAAY,KAAKquB,MAAjB,EAAyBrnB,MAAzB,CAAgC,UAAAC,CAAC;AAAA,mBAAI,OAAI,CAAConB,MAAL,CAAY9G,cAAZ,CAA2BtgB,CAA3B,CAAJ;AAAA,WAAjC,CAAP;AACH;AACD;;;;4BACkB;AACd,iBAAO,MAAP,OAAO,CAAP,EAAO,EAAM,KAAKsnB,QAAL,IAAiB,EAAvB,CAAP;AACH;AACD;;;;4BACkB;AACd,iBAAO,MAAP,OAAO,CAAP,EAAO,EAAM,KAAKG,QAAL,IAAiB,EAAvB,CAAP;AACH;AACD;;;;4BACwB;AACpB,iBAAO,MAAP,OAAO,CAAP,EAAO,EAAM,KAAKE,cAAL,IAAuB,EAA7B,CAAP;AACH;AACD;;;;4BACmB;AACf,iBAAO,MAAP,OAAO,CAAP,EAAO,EAAK,KAAKlL,SAAV,CAAP;AACH;AACD;;;;4BACgB;AACZ,oCAAY,KAAKkM,MAAL,IAAe,EAA3B;AACH;AACD;;;;4BACsB;AAClB,oCAAY,KAAKZ,YAAL,IAAqB,EAAjC;AACH;;;;MAxJyB,6D;;;;;;;;;;;;;;;;;AC1C9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;QACaa,a,GAgBT,uBAAY7rB,KAAZ,EAAwB;AAAA;;AACpB,WAAK7D,EAAL,GAAU6D,KAAK,CAAC7D,EAAN,IAAY6D,KAAK,CAACqrB,QAAlB,IAA8B,EAAxC;AACA,WAAK3gB,WAAL,GAAmB1K,KAAK,CAAC8rB,MAAN,IAAgB9rB,KAAK,CAAC0K,WAAtB,IAAqC,EAAxD;AACA,WAAK5I,IAAL,GAAY9B,KAAK,CAAC8B,IAAN,IAAc9B,KAAK,CAAC+rB,UAApB,IAAkC,EAA9C;AACA,UAAMC,UAAU,GAAG,KAAKlqB,IAAL,CAAU0K,WAAV,EAAnB;AACA,UAAMyf,GAAG,GAAGD,UAAU,CAACrL,OAAX,CAAmB,OAAnB,KAA+B,CAA/B,GAAmCqL,UAAU,CAACE,OAAX,CAAmB,aAAnB,EAAkC,EAAlC,CAAnC,GAA2EF,UAAU,CAAC7Q,MAAX,CAAkB,CAAlB,EAAqB,CAArB,EAAwBgR,WAAxB,EAAvF;AACA,WAAKC,UAAL,GAAkBpsB,KAAK,CAACosB,UAAN,IAAoBH,GAApB,IAA2B,EAA7C;AACA,WAAKI,OAAL,GAAersB,KAAK,CAACqsB,OAAN,IAAiB,EAAhC;AACA,WAAK5rB,IAAL,GAAYT,KAAK,CAACS,IAAN,IAAcT,KAAK,CAACssB,UAApB,IAAkC,KAA9C;AACA,WAAKrU,QAAL,GAAgBjY,KAAK,CAACiY,QAAtB;AACH,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCxBQrU,Y;;;;;;;AAMT,4BAAYuW,QAAZ,EAA+B;AAAA;;AAAA;;AAC3B,sCAAMA,QAAN;AAJJ;;AACU,gBAAAC,MAAA,GAAiB,cAAjB;AAIN,gBAAKpF,SAAL,GAAiBmF,QAAQ,CAAClC,QAAT,IAAqB,EAAtC;AAF2B;AAG9B;AAED;;;;;;;;gCAIe/T,G,EAAW;AACtB,cAAMlI,IAAI,GAAGkI,GAAG,CAAC2hB,KAAJ,CAAU,GAAV,CAAb;AACA,cAAM/gB,KAAK,GAAG,4FAAgB9I,IAAhB,EAAsB,KAAKgZ,SAA3B,CAAd;AACA,iBAAOlQ,KAAP;AACH;AAED;;;;;;+BAGiB;;;;;;;;0BACP,IAAIhJ,KAAJ,CAAU,yDAAV,C;;;;;;;;;AACT;AAED;;;;;;kCAGmB;;;;;;;;0BACT,IAAIA,KAAJ,CAAU,yDAAV,C;;;;;;;;;AACT;;;;MAjC6B,6D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCUrBywB,mB;;;;;;;AAMT,mCAAsBrX,SAAtB,EAAkD;AAAA;;AAAA;;AAC9C,sCAAMA,SAAN;AADkB,gBAAAA,SAAA,GAAAA,SAAA;;AAElB,yEAAawR,UAAb,CAAwB,cAAxB;;AACA,iEAASA,UAAT,CAAoB,UAApB;;AACA,gBAAK3K,KAAL,GAAa,cAAb;AACA,gBAAKC,UAAL,GAAkB,OAAlB;;AACA,gBAAK9F,GAAL,CAAS,WAAT,EAAsB,EAAtB;;AACA,gBAAKA,GAAL,CAAS,iBAAT,EAA4B,IAA5B;;AAP8C;AAQjD;AAED;;;;;;;4BAGiBvQ,S,EAAoB2W,Y,EAAsB;;;;;;;;0BACjD,IAAIxgB,KAAJ,CAAU,kDAAV,C;;;;;;;;;AACT;AAED;;;;;;+BAIIK,E,EACAwJ,S,EACA2W,Y,EAAsB;;;;;;;;0BAEhB,IAAIxgB,KAAJ,CAAU,qDAAV,C;;;;;;;;;AACT;AAED;;;;;;gCAGoBK,E,EAAU;;;;;;;;0BACpB,IAAIL,KAAJ,CAAU,qDAAV,C;;;;;;;;;AACT;AAED;;;;;;;+BAIcgwB,M,EAAc;AACxB,iBAAO,CAAC,KAAKjoB,SAAL,CAAef,IAAf,CAAoB,UAAAG,CAAC;AAAA,mBAAIA,CAAC,CAAC9G,EAAF,KAAS2vB,MAAb;AAAA,WAArB,KAA8C,EAA/C,EAAgE1B,MAAvE;AACH;AAED;;;;;;;gCAIelmB,G,EAAa;AACxB,iBAAO,KAAKP,QAAL,CAAcmD,OAAd,CAAsB5C,GAAtB,KAA8B,KAAKkR,aAAL,CAAmBtO,OAAnB,CAA2B5C,GAA3B,CAArC;AACH;AAED;;;;;AAwBA;;;;kCAIiB/H,E,EAAY2vB,M,EAAiB;AAC1C,cAAMhoB,GAAG,GAAG,KAAKD,SAAL,CAAef,IAAf,CAAoB,UAAAG,CAAC;AAAA,mBAAIA,CAAC,CAAC9G,EAAF,KAAS2vB,MAAb;AAAA,WAArB,KAA6C,KAAKnoB,QAA9D;;AACA,cAAIG,GAAG,IAAI3H,EAAX,EAAe;AACX,mBAAO2H,GAAG,CAACgmB,MAAJ,CAAW9mB,MAAX,CAAkB,UAAAC,CAAC;AAAA,qBAAI,UAAGA,CAAC,CAAC9G,EAAL,EAAUwkB,OAAV,CAAkBxkB,EAAlB,KAAyB,CAA7B;AAAA,aAAnB,CAAP;AACH;;AACD,iBAAO,EAAP;AACH;AAED;;;;;;;oCAImBqwB,G,EAAsB;AACrC,cAAM5kB,IAAI,GAAG4kB,GAAG,YAAYzZ,KAAf,GAAuByZ,GAAvB,GAA6B,CAACA,GAAD,CAA1C;AACA,cAAM1gB,QAAQ,GAAG,KAAKjI,SAAtB;;AAFqC,uDAGpB+D,IAHoB;AAAA;;AAAA;AAGrC,sEAAuB;AAAA,kBAAZzL,EAAY;;AAAA,2DACD2P,QADC;AAAA;;AAAA;AACnB,0EAA4B;AAAA,sBAAjBhI,GAAiB;;AAAA,+DACNA,GAAG,CAACsmB,MADE;AAAA;;AAAA;AACxB,8EAA8B;AAAA,0BAAnBc,GAAmB;;AAC1B,0BAAIA,GAAG,CAAC/uB,EAAJ,KAAWA,EAAf,EAAmB;AACf,+BAAO+uB,GAAP;AACH;AACJ;AALuB;AAAA;AAAA;AAAA;AAAA;AAM3B;AAPkB;AAAA;AAAA;AAAA;AAAA;AAQtB;AAXoC;AAAA;AAAA;AAAA;AAAA;;AAYrC,iBAAO,IAAP;AACH;AAED;;;;;;+BAGoB;;;;;;;;;;;AAChB;AACA,wBAAIttB,YAAJ,EAAkB;AACd,2BAAK6uB,gBAAL,GAAwB7uB,YAAY,CAAC8uB,OAAb,WAAwB,KAAKzW,MAAL,CAAYnU,IAApC,eAAxB;AACH;;AACK5B,2B,GAAmC,KAAK+V,MAAL,CAAYQ,GAAZ,CAAgB,SAAhB,KAA8B,E;AACvEvW,2BAAO,CAACysB,YAAR,GAAuB;AAAE7d,6BAAO,EAAE,2BAAX;AAAwC3Q,2BAAK,EAAE;AAA/C,qBAAvB;;AACA,2BAAM,KAAKyuB,gBAAL,EAAN;;;AACA1sB,2BAAO,CAACysB,YAAR,GAAuB;AAAE7d,6BAAO,EAAE,2BAAX;AAAwC3Q,2BAAK,EAAE;AAA/C,qBAAvB;AACA+B,2BAAO,CAAC2D,SAAR,GAAoB;AAAEiL,6BAAO,EAAE,uBAAX;AAAoC3Q,2BAAK,EAAE;AAA3C,qBAApB;AACA,yBAAK8X,MAAL,CAAYC,GAAZ,CAAgB,SAAhB,EAA2BhW,OAA3B;;AACA,2BAAM,KAAK2sB,aAAL,EAAN;;;AACA3sB,2BAAO,CAAC2D,SAAR,GAAoB;AAAEiL,6BAAO,EAAE,uBAAX;AAAoC3Q,2BAAK,EAAE;AAA3C,qBAApB;AACA+B,2BAAO,CAACkqB,MAAR,GAAiB;AAAEtb,6BAAO,EAAE,6BAAX;AAA0C3Q,2BAAK,EAAE;AAAjD,qBAAjB;AACA,yBAAK8X,MAAL,CAAYC,GAAZ,CAAgB,SAAhB,EAA2BhW,OAA3B;;AACA,2BAAM,KAAK4sB,UAAL,EAAN;;;AACA5sB,2BAAO,CAACkqB,MAAR,GAAiB;AAAEtb,6BAAO,EAAE,6BAAX;AAA0C3Q,2BAAK,EAAE;AAAjD,qBAAjB;AACA,yBAAK8X,MAAL,CAAYC,GAAZ,CAAgB,SAAhB,EAA2BhW,OAA3B;AACAA,2BAAO,CAACuU,WAAR,GAAsB;AAAE3F,6BAAO,EAAE,yBAAX;AAAsC3Q,2BAAK,EAAE;AAA7C,qBAAtB;AACA,yBAAK8X,MAAL,CAAYC,GAAZ,CAAgB,SAAhB,EAA2BhW,OAA3B;;AACA,2BAAM,KAAK6sB,cAAL,EAAN;;;AACA7sB,2BAAO,CAACuU,WAAR,GAAsB;AAAE3F,6BAAO,EAAE,yBAAX;AAAsC3Q,2BAAK,EAAE;AAA7C,qBAAtB;AACA,yBAAK8X,MAAL,CAAYC,GAAZ,CAAgB,SAAhB,EAA2BhW,OAA3B;AACA;;AACA,wBAAI,KAAK+V,MAAL,IAAe,KAAKA,MAAL,CAAY9S,KAA/B,EAAsC;AAClC,2BAAK8S,MAAL,CAAY9S,KAAZ,CAAkB0I,MAAlB,CAA+B,cAA/B,EACKzH,IADL,CACU,6DAAM,UAAAC,CAAC;AAAA,+BAAI,CAAC,CAACA,CAAC,CAAC7G,QAAR;AAAA,uBAAP,CADV,EAEKU,SAFL,CAEe,UAAA2T,IAAI,EAAI;AACf,4BAAMlO,QAAQ,GAAG,OAAI,CAACE,SAAL,CAAef,IAAf,CAAoB,UAAAgB,GAAG;AAAA,iCAAIA,GAAG,CAAC/H,IAAJ,KAAa8V,IAAI,CAACrU,QAAtB;AAAA,yBAAvB,CAAjB;;AACA,4BAAImG,QAAJ,EAAc;AACV,iCAAI,CAAC8oB,gBAAL,GAAwB9oB,QAAQ,CAACxH,EAAjC;;AACA,iCAAI,CAAC+Z,GAAL,CAAS,iBAAT,EAA4BvS,QAA5B;AACH,yBAHD,MAGO;AACH,iCAAI,CAAC8oB,gBAAL,GAAwB,OAAI,CAAC9oB,QAAL,CAAcxH,EAAtC;;AACA,iCAAI,CAAC+Z,GAAL,CAAS,iBAAT,EAA4B,OAAI,CAACvS,QAAjC;AACH;AACJ,uBAXL;AAYH;;;;;;;;;AACJ;AAED;;;;;;2CAG6B;;;;;;;;;;AACR,2BAAM,KAAKyF,KAAL,CAAW;AAAE4jB,0BAAI,EAAE,KAAR;AAAe7Q,4BAAM,EAAE;AAAvB,qBAAX,CAAN;;;AAAX8Q,4B;AACN,yBAAK7X,aAAL,GAAqB,IAAI,gEAAJ,CAAiB6X,QAAQ,CAAC,CAAD,CAAzB,CAArB;AACA,yBAAK/W,GAAL,CAAS,cAAT,EAAyB,KAAKd,aAA9B;;;;;;;;;AACH;AAED;;;;;;wCAG0B;;;;;;;;;;AACL,2BAAM,KAAKhM,KAAL,CAAW;AAAE4jB,0BAAI,EAAE,UAAR;AAAoB7Q,4BAAM,EAAE,IAA5B;AAAkC+Q,2BAAK,EAAE;AAAzC,qBAAX,CAAN;;;AAAXC,4B;AACAtpB,6B,GAAaspB,QAAsB,CAAC1rB,GAAvB,CACf,UAAAwB,CAAC;AAAA,6BAAI,IAAI,wDAAJ,CAAaA,CAAb,CAAJ;AAAA,qBADc,C;AAGnB,yBAAKiT,GAAL,CAAS,WAAT,EAAsBrS,SAAtB;AACA;;AACA,wBAAI,CAAC,KAAK4oB,gBAAN,IAA0B5oB,SAA1B,IAAuCA,SAAS,CAACzC,MAAV,GAAmB,CAA9D,EAAiE;AAC7D,2BAAKqrB,gBAAL,GAAwB5oB,SAAS,CAAC,CAAD,CAAT,CAAa1H,EAArC;AACH;;;;;;;;;AACJ;AAED;;;;;;qCAGuB;;;;;;;;;;AACF,2BAAM,KAAKiN,KAAL,CAAW;AAAE4jB,0BAAI,EAAE,OAAR;AAAiB7Q,4BAAM,EAAE;AAAzB,qBAAX,CAAN;;;AAAXiR,4B;AACAhD,0B,GAAUgD,QAAsB,CAAC3rB,GAAvB,CAA2B,UAAAwB,CAAC;AAAA,6BAAI,IAAI,0DAAJ,CAAkBA,CAAlB,CAAJ;AAAA,qBAA5B,C;AAChB,yBAAKiT,GAAL,CAAS,QAAT,EAAmBkU,MAAnB;;;;;;;;;AACH;AAED;;;;;;yCAG2B;;;;;;;;;;AACL,2BAAM,KAAKhhB,KAAL,CAAW;AAAE4jB,0BAAI,EAAE,MAAR;AAAgB7Q,4BAAM,EAAE;AAAxB,qBAAX,CAAN;;;AAAZkR,6B;AACA/Y,yB,GAAS+Y,SAAuB,CAAC5rB,GAAxB,CAA4B,UAAAwB,CAAC;AAAA,6BAAK;AAAE9G,0BAAE,EAAE8G,CAAC,CAAC9G,EAAR;AAAY2F,4BAAI,EAAEmB,CAAC,CAACnB;AAApB,uBAAL;AAAA,qBAA7B,C;AACf,yBAAKoU,GAAL,CAAS,aAAT,EAAwB5B,KAAxB;;;;;;;;;AACH;;;4BAzIkB;AAAA;;AACf,iBAAO,KAAKzQ,SAAL,CAAef,IAAf,CAAoB,UAAAG,CAAC;AAAA,mBAAIA,CAAC,CAAC9G,EAAF,KAAS,OAAI,CAACswB,gBAAlB;AAAA,WAArB,CAAP;AACH;AAED;;0BAKoB3oB,G,EAAe;AAC/B,cAAIA,GAAG,YAAY,wDAAnB,EAA6B;AACzB,iBAAK2oB,gBAAL,GAAwB3oB,GAAG,CAAC3H,EAA5B;AACH,WAFD,MAEO;AACH,iBAAKswB,gBAAL,GAAwB3oB,GAAxB;AACH;;AACD,eAAKoS,GAAL,CAAS,iBAAT,EAA4B,KAAKvS,QAAjC;AACH;AAED;;;;4BAbsB;AAClB,iBAAO,KAAK8S,GAAL,CAAS,aAAT,KAA2B,EAAlC;AACH;;;4BAYmB;AAChB,iBAAO,KAAKA,GAAL,CAAqB,WAArB,KAAqC,EAA5C;AACH;;;;MA/EoC,4D;;;uBAA5B8V,mB,EAAmB,yH;AAAA,K;;;aAAnBA,mB;AAAmB,eAAnBA,mBAAmB,K;AAAA,kBAFhB;;;;;sEAEHA,mB,EAAmB;cAH/B,wDAG+B;eAHpB;AACRvS,oBAAU,EAAE;AADJ,S;AAGoB,Q;;;;;;;;;;;;;;;;;;;;;;ACfhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAYasT,M;;;AAgBT,sBAAYnT,QAAZ,EAA+B;AAAA;;AAC3B,aAAK1Z,IAAL,GAAY0Z,QAAQ,CAAC1Z,IAAT,IAAiB,EAA7B;AACA,aAAKK,IAAL,GAAY,KAAKysB,SAAL,CAAepT,QAAQ,CAACrZ,IAAT,IAAiB,EAAhC,CAAZ;AACH;AAZD;;;;;;AAoBA;sCAC+C;AAAA,cAA5BgB,IAA4B,uEAAb,aAAa;AAC3C,0GAAaA,IAAb,EAAmB,6FAAU,KAAKhB,IAAf,CAAnB;AACH;AAED;;;;uCACiD;AAAA,cAA7BgB,IAA6B,uEAAd,cAAc;AAC7C,0GAAaA,IAAb,EAAmB8N,IAAI,CAACC,SAAL,CAAe,KAAK/O,IAApB,EAA0Bsa,SAA1B,EAAqC,CAArC,CAAnB;AACH;;;kCAEiBta,I,EAAW;AAAA;;AACzB,cAAIA,IAAI,CAACM,MAAL,GAAc,CAAd,IAAmB,KAAKX,IAAL,KAAc,UAArC,EAAiD;AAC7C,gBAAMuiB,MAAM,GAAG/e,MAAM,CAACjI,IAAP,CAAY8E,IAAI,CAAC,CAAD,CAAhB,CAAf;AACA,gBAAM0sB,UAAU,GAAGxK,MAAM,CAAClgB,IAAP,CAAY,UAAAoB,GAAG;AAAA,qBAAIA,GAAG,CAACsI,WAAJ,GAAkBihB,QAAlB,CAA2B,MAA3B,KAAsCvpB,GAAG,CAACsI,WAAJ,GAAkBihB,QAAlB,CAA2B,OAA3B,CAA1C;AAAA,aAAf,CAAnB;AACA,gBAAMC,WAAW,GAAG1K,MAAM,CAAClgB,IAAP,CAAY,UAAAoB,GAAG;AAAA,qBAAIA,GAAG,CAACsI,WAAJ,GAAkBihB,QAAlB,CAA2B,OAA3B,CAAJ;AAAA,aAAf,CAApB;AACA,gBAAME,UAAU,GAAG3K,MAAM,CAAClgB,IAAP,CAAY,UAAAoB,GAAG;AAAA,qBAAIA,GAAG,CAACsI,WAAJ,GAAkBihB,QAAlB,CAA2B,MAA3B,CAAJ;AAAA,aAAf,CAAnB;;AAJ6C,yDAK7B3sB,IAL6B;AAAA;;AAAA;AAK7C,wEAAqB;AAAA,oBAAZ8sB,GAAY;;AACjB;AACA,oBAAIJ,UAAU,IAAIE,WAAlB,EAA+B;AAAA;AAC3B,wBAAMG,IAAI,GAAG,OAAI,CAACtwB,QAAL,CAAc0Y,MAAd,CAAqB3U,MAArB,CAA4BwB,IAA5B,CAAiC8qB,GAAG,CAACJ,UAAD,CAAH,CAAgBhhB,WAAhB,EAAjC,CAAb;;AACA,wBAAM1I,GAAG,GAAG,OAAI,CAACvG,QAAL,CAAc0Y,MAAd,CAAqBrS,YAArB,CAAkCC,SAAlC,CAA4Cf,IAA5C,CAAiD,UAAAgB,GAAG;AAAA,6BAAIA,GAAG,CAAC3H,EAAJ,KAAW,CAAC,CAAC0xB,IAAI,IAAI,EAAT,EAAanqB,KAAb,IAAsB,EAAvB,EAA2BgH,WAA1C;AAAA,qBAApD,CAAZ;AACA;;;AACA,wBAAI5G,GAAJ,EAAS;AACL8pB,yBAAG,CAACF,WAAD,CAAH,GAAoB,IAAI,4DAAJ,CAAiB,OAAjB,CAAD,CAA4BI,SAA5B,CAAsCF,GAAG,CAACF,WAAD,CAAH,GAAmB,GAAzD,EAA8D5pB,GAAG,CAACE,QAAJ,IAAgB,KAA9E,CAAnB;AACH;AAN0B;AAO9B;AACD;;;AACA,oBAAI2pB,UAAJ,EAAgB;AACZC,qBAAG,CAACD,UAAD,CAAH,GAAkB,kCAAK,CAACC,GAAG,CAACD,UAAD,CAAJ,CAAL,CAAuBhrB,MAAvB,CAA8B,qBAA9B,CAAlB;AACH;;AAbgB,6DAcCqgB,MAdD;AAAA;;AAAA;AAcjB,4EAA0B;AAAA,wBAAjBrb,KAAiB;AACtBimB,uBAAG,CAACjmB,KAAD,CAAH,GAAa,OAAOimB,GAAG,CAACjmB,KAAD,CAAV,KAAsB,QAAtB,GAAiCimB,GAAG,CAACjmB,KAAD,CAAH,CAAWukB,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,CAAjC,GAAkE0B,GAAG,CAACjmB,KAAD,CAAlF;AACH;AAhBgB;AAAA;AAAA;AAAA;AAAA;AAiBpB;AAtB4C;AAAA;AAAA;AAAA;AAAA;AAuBhD,WAvBD,MAuBO,IAAI,KAAKlH,IAAL,KAAc,UAAlB,EAA8B;AAClCK,gBAAI,GAAGA,IAAI,CAACW,GAAL,CAAS,UAAAwB,CAAC,EAAI;AACjB,kBAAM5C,OAAO,GAAG,IAAI,+DAAJ,CAAY4C,CAAZ,EAAe2C,MAAf,EAAhB;AACA,qBAAOvF,OAAO,CAAClE,EAAf;AACA,qBAAOkE,OAAO,CAACwQ,OAAf;AACA,qBAAOxQ,OAAO,CAACI,IAAf;AACA,qBAAOJ,OAAO,CAACigB,YAAf;AACA,qBAAOjgB,OAAO,CAAC2f,YAAf;AACA,qBAAO3f,OAAO,CAACif,eAAf;AACA,qBAAOjf,OAAO,CAACggB,KAAf;AACA,qBAAOhgB,OAAO,CAACiD,QAAf;AACA,qBAAOjD,OAAO,CAACyf,UAAf;AACA,qBAAOzf,OAAO,CAACqQ,eAAf;AACArQ,qBAAO,CAAC4B,SAAR,GAAoB5B,OAAO,CAAC4B,SAAR,CAAkBH,IAAlB,IAA0BzB,OAAO,CAAC4B,SAAR,CAAkBiB,KAAhE;AACA7C,qBAAO,CAAC8F,eAAR,GAA0BlC,MAAM,CAACjI,IAAP,CAAYqE,OAAO,CAAC8F,eAApB,EAAqC1E,GAArC,CAAyC,UAAAyC,GAAG;AAAA,uBAAI7D,OAAO,CAAC8F,eAAR,CAAwBjC,GAAxB,CAAJ;AAAA,eAA5C,EAA8EvC,IAA9E,CAAmF,IAAnF,CAA1B;AACAtB,qBAAO,CAACgG,kBAAR,GAA6BpC,MAAM,CAACjI,IAAP,CAAYqE,OAAO,CAACgG,kBAApB,EAAwC5E,GAAxC,CAA4C,UAAAyC,GAAG;AAAA,uBAAI7D,OAAO,CAACgG,kBAAR,CAA2BnC,GAA3B,CAAJ;AAAA,eAA/C,EAAoFvC,IAApF,CAAyF,IAAzF,CAA7B;AACAtB,qBAAO,CAAC0C,SAAR,GAAoB1C,OAAO,CAAC0C,SAAR,CAAkBtB,GAAlB,CAAsB,UAAAyO,MAAM;AAAA,uBAAIA,MAAM,CAACpO,IAAP,IAAeoO,MAAM,CAAChN,KAA1B;AAAA,eAA5B,EAA6DvB,IAA7D,CAAkE,IAAlE,CAApB;AAEA,qBAAOtB,OAAP;AACF,aAlBK,CAAP;AAmBF;;AACD,iBAAOS,IAAP;AACH;;;;AAxED;4BACsB;AAClB,iBAAOwsB,MAAM,CAAC/vB,QAAd;AACH;AAOD;;;;mCAbyBge,O,EAAoB;AACzC+R,gBAAM,CAAC/vB,QAAP,GAAkBge,OAAlB;AACH;;;gCAYqB9a,I,EAAcK,I,EAAY;AAC5C,cAAMitB,QAAQ,GAAG,6FAAUjtB,IAAV,CAAjB;AACA,iBAAO,IAAIwsB,MAAJ,CAAW;AAAE7sB,gBAAI,EAAJA,IAAF;AAAQK,gBAAI,EAAEitB;AAAd,WAAX,CAAP;AACH;;;;;;;;;;;;;;;;;;;;;ACrCL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUaC,c;;;;;;;AACT,8BAAsB9Y,SAAtB,EAAkD;AAAA;;AAAA;;AAC9C,uCAAMA,SAAN;AADkB,iBAAAA,SAAA,GAAAA,SAAA;;AAElB,6DAAOwR,UAAP;;AACA,iBAAK3K,KAAL,GAAa,SAAb;AACA,iBAAKC,UAAL,GAAkB,UAAlB;AAJ8C;AAKjD;;;;gCAEiB7B,Q,EAAa;AAC3B,iBAAOA,QAAQ,YAAYpH,KAApB,GACD,IAAI,oDAAJ,CAAW;AAAEjS,gBAAI,EAAEqZ;AAAR,WAAX,CADC,GAED,qDAAO8T,OAAP,CAAe,EAAf,EAAmB9T,QAAnB,CAFN;AAGH;;;;MAZ+B,4D;;;uBAAvB6T,c,EAAc,yH;AAAA,K;;;aAAdA,c;AAAc,eAAdA,cAAc,K;AAAA,kBAFX;;;;;sEAEHA,c,EAAc;cAH1B,wDAG0B;eAHf;AACRhU,oBAAU,EAAE;AADJ,S;AAGe,Q;;;;;;;;;;;;;;;;;;;;;;ACV3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAsCA,QAAMkU,eAAe,GAA8B;AAC/C/sB,cAAQ,EAAE;AADqC,KAAnD;;QAWagtB,K;;;;;;;AA2CT,uBAAoC;AAAA;;AAAA,YAAxBhU,QAAwB,uEAAJ,EAAI;;AAAA;;AAChC,uCAAMA,QAAN;AAVJ;;AACU,iBAAAC,MAAA,GAAiB,OAAjB;AAUN,YAAMnC,QAAQ,GAAGkC,QAAQ,CAAClC,QAAT,IAAqB,EAAtC;AAEA,iBAAKmW,SAAL,GAAiBnW,QAAQ,CAACmW,SAAT,IAAsBjU,QAAQ,CAACiU,SAAhD;AACA,iBAAK1F,MAAL,GAAczQ,QAAQ,CAACyQ,MAAT,IAAmBvO,QAAQ,CAACuO,MAA5B,IAAsC,EAApD;AACA,iBAAKjoB,IAAL,GACIwX,QAAQ,CAACoW,SAAT,IACA,CAAC,SAAK3qB,KAAL,CAAWuU,QAAX,IAAuB,EAAxB,EAA4BoW,SAD5B,IAEAlU,QAAQ,CAACkU,SAFT,IAGAlU,QAAQ,CAAC1Z,IAHT,IAIA,MALJ;AAMA,iBAAK6tB,UAAL,GACIrW,QAAQ,CAACsW,UAAT,IAAuBpU,QAAQ,CAACoU,UAAhC,IAA8CpU,QAAQ,CAACmU,UAAvD,IAAqE,KADzE;AAEA,iBAAKE,WAAL,GACIvW,QAAQ,CAACwW,WAAT,IAAwBtU,QAAQ,CAACsU,WAAjC,IAAgDtU,QAAQ,CAACqU,WAAzD,IAAwE,KAD5E;AAEA,iBAAKE,WAAL,GAAmBzW,QAAQ,CAAC0W,SAAT,IAAsBxU,QAAQ,CAACwU,SAA/B,IAA4CxU,QAAQ,CAACuU,WAArD,IAAoE,CAAvF;AACA,iBAAK/hB,QAAL,GAAgBsL,QAAQ,CAACtL,QAAT,IAAqBwN,QAAQ,CAACxN,QAA9B,IAA0C,KAA1D;AACA,iBAAK7O,KAAL,GAAa,CAACma,QAAQ,CAACna,KAAT,IAAkB,CAAnB,IAAwB,EAAxB,IAA8Bqc,QAAQ,CAACrc,KAAvC,IAAgD,CAA7D;AACA,iBAAKwT,SAAL,GAAiB,CAAC2G,QAAQ,CAAC3G,SAAT,IAAsB,CAAvB,IAA4B,EAA5B,IAAkC6I,QAAQ,CAAC7I,SAA3C,IAAwD,CAAzE;AACA,iBAAKsd,QAAL,GAAgBzU,QAAQ,CAACyU,QAAT,IAAqB,CAArC;AACA,iBAAK1hB,gBAAL,GAAwBiN,QAAQ,CAACjN,gBAAT,IAA6B+K,QAAQ,CAAC/K,gBAAtC,IAA0D,EAAlF;AACA,YAAM3L,SAAS,GAAG,CAAC,CAAC,SAAK2L,gBAAL,CAAsBpK,IAAtB,CAA2B,UAAA+rB,SAAS;AAAA,iBAAI,CAAC,CAACA,SAAS,CAACttB,SAAhB;AAAA,SAApC,CAApB;AACA,iBAAKM,aAAL,GACIoW,QAAQ,CAAC1W,SAAT,IAAsB4Y,QAAQ,CAAC5Y,SAA/B,IAA4C4Y,QAAQ,CAACtY,aAArD,IAAsEN,SAAtE,IAAmF,KADvF;AAEA,iBAAKutB,WAAL,GAAmB3U,QAAQ,CAAC2U,WAA5B;AACA,iBAAKC,KAAL,GAAa5U,QAAQ,CAAC4U,KAAT,IAAkB,EAA/B;AAEA,iBAAK/K,KAAL,GAAa7J,QAAQ,CAAC6J,KAAT,YAA0BjR,KAA1B,GAAkCoH,QAAQ,CAAC6J,KAA3C,GAAmD,EAAhE;AACA,YAAMgL,YAAY,GAAG/W,QAAQ,CAAC8N,QAAT,IAAqB5L,QAAQ,CAAC4L,QAA9B,IAA0C,EAA/D;AACA,iBAAKxQ,SAAL,GACI,CAACyZ,YAAY,IAAIA,YAAY,CAAC5tB,MAA7B,GACK4tB,YAAY,CAACvtB,GAAb,CAAiB,UAAAwB,CAAC;AAAA,iBAAIA,CAAC,CAAC9G,EAAN;AAAA,SAAlB,CADL,GAEKge,QAAQ,CAAC5E,SAFf,KAE6B,EAHjC;;AAIA,YAAI,SAAKhY,QAAL,CAAc0Y,MAAd,IAAwB,SAAK1Y,QAAL,CAAc0Y,MAAd,CAAqB1F,QAAjD,EAA2D;AACvD,cAAIye,YAAJ,EAAkB;AACd,gBAAMC,OAAO,GAAG,EAAhB;AACAD,wBAAY,CAAC1jB,OAAb,CAAqB,UAAAjL,OAAO,EAAI;AAC5B,kBAAIlE,EAAE,GAAGkE,OAAO,CAAClE,EAAjB;;AACA,kBAAI,CAAC,SAAKoB,QAAL,CAAc0Y,MAAd,CAAqB1F,QAArB,CAA8BzN,IAA9B,CAAmCzC,OAAO,CAAClE,EAA3C,CAAL,EAAqD;AACjDA,kBAAE,GAAG,SAAKoB,QAAL,CAAc0Y,MAAd,CAAqB1F,QAArB,CAA8B6P,OAA9B,CAAsC,SAAKjkB,EAA3C,EAA+CkE,OAA/C,EAAwD,OAAxD,CAAL;AACH;;AACD4uB,qBAAO,CAAC5nB,IAAR,CAAalL,EAAb;AACH,aAND;AAOA,qBAAKoZ,SAAL,GAAiB0Z,OAAjB;AACH;AACJ;;AACD,iBAAKpF,OAAL,GAAe,EAAf;AACA,iBAAKqF,cAAL,GACIjX,QAAQ,CAACkX,YAAT,IAAyBhV,QAAQ,CAACgV,YAAlC,IAAkDhV,QAAQ,CAACiV,aAA3D,IAA4E,EADhF;AAhDgC;AAkDnC;AAED;;;;;;AAuDA;;;;oCAImBluB,I,EAAa;AAC5B,cAAIA,IAAJ,EAAU;AACN,gBAAMugB,GAAG,GAAG,kCAAK,CAACvgB,IAAD,CAAjB;AACA,mBAAO,KAAK6kB,QAAL,CAAc/iB,MAAd,CAAqB,UAAAC,CAAC,EAAI;AAC7B,kBAAM8F,KAAK,GAAG,kCAAK,CAAC9F,CAAC,CAAC/B,IAAH,CAAnB;AACA,qBAAO6H,KAAK,CAACnG,MAAN,CAAa6e,GAAb,EAAkB,GAAlB,CAAP;AACH,aAHM,CAAP;AAIH,WAND,MAMO;AACH,mBAAO,KAAKsE,QAAZ;AACH;AACJ;AAED;;;;;;oCAGmBhkB,O,EAAmC;AAAA;;AAClDA,iBAAO,GAAGA,OAAO,GACX,MAAD,OAAC,CAAD,gCAAMmsB,eAAN,GAA0BnsB,OAA1B,CAAC,EAAgC;AAAEP,oBAAQ,EAAE,KAAKrF;AAAjB,WAAhC,CADW,GAEX,MAAD,OAAC,CAAD,kBAAM+xB,eAAN,CAAC,EAAoB;AAAE1sB,oBAAQ,EAAE,KAAKrF;AAAjB,WAApB,CAFN;AAGA,iBAAO,IAAIT,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACzB,oBAAI,CAAC4B,QAAL,CAAsBgE,SAAtB,CAAgCQ,OAAhC,EAAyCnG,IAAzC,CACG,UAACgM,IAAD,EAAmB;AAAA,2DACEA,IADF;AAAA;;AAAA;AACf,0EAAuB;AAAA,sBAAZynB,EAAY;;AACnB,sBAAIA,EAAE,CAAClzB,EAAH,KAAU,QAAI,CAACA,EAAnB,EAAuB;AACnB,2BAAOR,OAAO,CAAC,IAAD,CAAd;AACH;AACJ;AALc;AAAA;AAAA;AAAA;AAAA;;AAMfA,qBAAO,CAAC,KAAD,CAAP;AACH,aARJ,EASG;AAAA,qBAAMA,OAAO,CAAC,KAAD,CAAb;AAAA,aATH;AAWJ,WAZM,CAAP;AAaH;AAED;;;;;;gCAGY;AACR,iBAAO,IAAIwyB,KAAJ,CAAU,IAAV,CAAP;AACH;AAED;;;;;;oCAGgB;AACZ,iBAAO,IAAIA,KAAJ,CAAU,MAAD,OAAC,CAAD,kBAAM,IAAN,CAAC,EAAS;AAAEhyB,cAAE,EAAE,IAAN;AAAY+G,iBAAK,EAAE,IAAnB;AAAyBqS,qBAAS,EAAE;AAApC,WAAT,CAAV,CAAP;AACH;AAED;;;;;;;iCAIgBxT,O,EAAgC;AAAA;;AAC5C,cAAI,CAAC,KAAK2B,KAAV,EAAiB;AACb,mBAAO;AAAE4c,0BAAY,EAAE,IAAhB;AAAsBwD,kBAAI,EAAE;AAA5B,aAAP;AACH;;AACD,cAAMngB,QAAQ,GAAG,KAAKpG,QAAL,CAAc0Y,MAAd,CAAqBrS,YAArB,CAAkCC,SAAlC,CAA4Cf,IAA5C,CACb,UAAAgB,GAAG;AAAA,mBAAIA,GAAG,CAAC3H,EAAJ,KAAW,QAAI,CAACuH,KAAL,CAAWgH,WAA1B;AAAA,WADU,CAAjB;;AAGA,cAAI,CAAC/G,QAAL,EAAe;AACX,mBAAO;AAAE2c,0BAAY,EAAE,IAAhB;AAAsBwD,kBAAI,EAAE;AAA5B,aAAP;AACH;;AAT2C,cAUpC5iB,IAVoC,GAUXa,OAVW,CAUpCb,IAVoC;AAAA,cAU9BC,QAV8B,GAUXY,OAVW,CAU9BZ,QAV8B;AAAA,cAUpBa,IAVoB,GAUXD,OAVW,CAUpBC,IAVoB;AAW5C,cAAM+hB,KAAK,GAAe,kFAAc;AACpCjb,gBAAI,EAAE5H,IAD8B;AAEpCC,oBAAQ,EAARA,QAFoC;AAGpCO,iBAAK,EAAE,IAH6B;AAIpCmQ,gBAAI,EAAE7P,IAJ8B;AAKpC+hB,iBAAK,EAAEpgB,QAAQ,CAAC6nB;AALoB,WAAd,CAA1B;AAOA,iBAAOzH,KAAP;AACH;AAED;;;;;;;kCAIiBhiB,O,EAAkC;AAC/C,cAAMgiB,KAAK,GAAG,KAAKuL,QAAL,CAAcvtB,OAAd,CAAd;AACA,iBAAO,CAACgiB,KAAK,CAACzD,YAAd;AACH;;;4BA1IgB;AACb,iBAAO,CAAC,CAAC,KAAKld,OAAd;AACH;AAED;;;;4BACkB;AACd,cAAM2iB,QAAQ,GAAG,KAAKA,QAAtB;;AADc,uDAEIA,QAFJ;AAAA;;AAAA;AAEd,sEAA4B;AAAA,kBAAjBwJ,GAAiB;AACxB,kBAAMxf,MAAM,GAAGwf,GAAG,CAACxf,MAAnB;;AACA,kBAAIA,MAAM,KAAK,aAAX,IAA4BA,MAAM,KAAK,SAA3C,EAAsD;AAClD,uBAAOwf,GAAP;AACH;AACJ;AAPa;AAAA;AAAA;AAAA;AAAA;;AAQd,iBAAO,IAAP;AACH;AAED;;;;4BACe;AACX,cAAM3jB,GAAG,GAAG,kCAAK,GAAGpE,OAAR,EAAZ;AACA,cAAMue,QAAQ,GAAG,KAAKA,QAAtB;;AAFW,uDAGOA,QAHP;AAAA;;AAAA;AAGX,sEAA4B;AAAA,kBAAjBwJ,GAAiB;;AACxB,kBAAIA,GAAG,CAACruB,IAAJ,GAAW0K,GAAf,EAAoB;AAChB,uBAAO2jB,GAAP;AACH;AACJ;AAPU;AAAA;AAAA;AAAA;AAAA;;AAQX,iBAAO,IAAP;AACH;AAED;;;;4BACmB;AAAA;;AACf,cAAMC,YAAY,GACd,KAAKjyB,QAAL,IAAiB,KAAKA,QAAL,CAAc0Y,MAA/B,IAAyC,KAAK1Y,QAAL,CAAc0Y,MAAd,CAAqB1F,QAA9D,GACM,KAAKhT,QAAL,CAAc0Y,MAAd,CAAqB1F,QAArB,CAA8BvN,MAA9B,CACI,UAAA3C,OAAO;AAAA,mBAAI,QAAI,CAACkV,SAAL,CAAeoL,OAAf,CAAuBtgB,OAAO,CAAClE,EAA/B,KAAsC,CAA1C;AAAA,WADX,KAEK,EAHX,GAIM,EALV;AAMA,iBAAOqzB,YAAY,CAACjP,IAAb,CAAkB,UAAC3E,CAAD,EAAIC,CAAJ;AAAA,mBAAUD,CAAC,CAAC1a,IAAF,GAAS2a,CAAC,CAAC3a,IAArB;AAAA,WAAlB,CAAP;AACH;AAED;;;;4BAC0B;AACtB,iBAAO,KAAKuuB,WAAL,CAAiB,kCAAK,GAAGjoB,OAAR,EAAjB,CAAP;AACH;AAED;;;;4BAC2B;AACvB,oCAAW,KAAK0nB,cAAhB;AACH;AAED;;;;4BACgB;AACZ,iBAAO,KAAK3xB,QAAL,CAAc0Y,MAAd,CAAqBrS,YAArB,CAAkColB,WAAlC,CAA8C,KAAKhF,KAAnD,KAAoE,IAAI,uEAAJ,CAAkB,EAAlB,CAA3E;AACH;;;;MApJsB,6D;;;;;;;;;;;;;;;;;AChD3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAOA,QAAI0L,WAAW,GAAW,CAA1B;;AAEO,aAASC,iBAAT,GAAkD;AAAA,UAAvBpG,SAAuB,uEAAF,EAAE;AACrD,UAAMptB,EAAE,mBAAYuzB,WAAW,EAAvB,CAAR;AACA,UAAM5tB,IAAI,aAAM,2CAAW8tB,SAAX,EAAN,cAAgC,2CAAWC,QAAX,EAAhC,WAAV;AACA,UAAMC,MAAM,GAAGrmB,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,KAA3B,IAAoC,CAApC,KAA0C,CAA1C,IAA+CwN,WAAW,GAAG,CAA5E;AACA,aAAO,MAAP,OAAO,CAAP;AACIvzB,UAAE,EAAFA,EADJ;AAEI2F,YAAI,EAAJA,IAFJ;AAGIssB,iBAAS,YAAKtsB,IAAL,uBAHb;AAII4mB,cAAM,YAAKgH,WAAL,CAJV;AAKId,gBAAQ,EAAEnlB,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,EAAhB,GAAqB,CAAhC,IAAqC,CALnD;AAMIhf,aAAK,YAAKpB,IAAI,CAAC0K,WAAL,GAAmBqZ,KAAnB,CAAyB,GAAzB,EAA8BlkB,IAA9B,CAAmC,GAAnC,CAAL,cAAgD,iEAAhD,CANT;AAOIlB,YAAI,EAAE,+CAAe0hB,WAAf,EAPV;AAQIoM,kBAAU,EAAE9kB,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,KAA3B,IAAoC,CAApC,KAA0C,CAR1D;AASIuM,mBAAW,EAAEhlB,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,KAA3B,IAAoC,CAApC,KAA0C,CAT3D;AAUIvV,gBAAQ,EAAElD,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,KAA3B,IAAoC,CAApC,KAA0C,CAVxD;AAWIyM,iBAAS,EAAEllB,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,GAA3B,IAAkC,GAXjD;AAYIpkB,aAAK,EAAE2L,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,CAA3B,IAAgC,CAZ3C;AAaI5Q,iBAAS,EAAE7H,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,CAA3B,IAAgC,CAb/C;AAcI8B,aAAK,EAAE,CAAC,YAAD,CAdX;AAeI8K,mBAAW,uBAAgB3yB,EAAhB,CAff;AAgBI4pB,gBAAQ,EAAEhT,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAe,CAAf,EAAkBvR,GAAlB,CAAsB,UAAAwB,CAAC;AAAA,iBAAI,yFAAJ;AAAA,SAAvB,CAhBd;AAiBIksB,oBAAY,EAAEW,MAAM,GAAG,iBAAUrmB,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,MAAiBwN,WAAW,GAAG,CAA/B,CAAX,CAAV,EAAH,GAAgE,EAjBxF;AAkBIX,aAAK,EAAE,4CAAYgB,QAAZ;AAlBX,OAAO,EAmBAxG,SAnBA,CAAP;AAqBH;;AAEM,aAASyG,0BAAT,CAAoCjuB,OAApC,EAAsE;AACzE,UAAIqH,KAAK,GAAY,EAArB;;AACA,UAAIrH,OAAJ,EAAa;AACTqH,aAAK,GAAG,MAAH,OAAG,CAAH,EAAG,EAAKrH,OAAL,CAAR;;AACA,YAAIA,OAAO,CAACb,IAAZ,EAAkB;AACd,cAAMA,IAAI,GAAG,kCAAK,CAACa,OAAO,CAACb,IAAT,CAAL,CAAoBqG,OAApB,CAA4B,GAA5B,CAAb;AACA6B,eAAK,CAACge,cAAN,GAAuBlmB,IAAI,CAACwL,IAAL,EAAvB;AACAtD,eAAK,CAACke,YAAN,GAAqBpmB,IAAI,CAACwB,GAAL,CAASX,OAAO,CAACZ,QAAR,IAAoB,EAA7B,EAAiC,GAAjC,EAAsCuL,IAAtC,EAArB;AACA,iBAAOtD,KAAK,CAAClI,IAAb;AACA,iBAAOkI,KAAK,CAACjI,QAAb;AACH;AACJ;;AACD,aAAOiI,KAAP;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCrCY6mB,a;;;;;;;AACT,6BAAsB/a,SAAtB,EAAkD;AAAA;;AAAA;;AAC9C,uCAAMA,SAAN;AADkB,iBAAAA,SAAA,GAAAA,SAAA;;AAElB,2DAAMwR,UAAN,CAAiB,OAAjB;;AACA,iBAAK3K,KAAL,GAAa,OAAb;AACA,iBAAKC,UAAL,GAAkB,OAAlB;;AACA,iBAAKL,QAAL,GAAgB,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAU,CAACD,CAAC,CAACzf,EAAF,CAAKwqB,aAAL,CAAmB9K,CAAC,CAAC1f,EAArB,CAAD,IAA6B,CAACyf,CAAC,CAAC1Y,KAAF,CAAQyjB,aAAR,CAAsB9K,CAAC,CAAC3Y,KAAxB,CAAxC;AAAA,SAAhB;;AACA,iBAAK4Y,YAAL,GAAoB,UAACF,CAAD,EAAc;AAC9B,cAAM9X,GAAG,GAAG,SAAKmS,MAAL,CAAYrS,YAAZ,CAAyBD,QAArC;AACA,iBAAOiY,CAAC,CAAClY,KAAF,CAAQgH,WAAR,KAAwB5G,GAAG,CAAC3H,EAAnC;AACH,SAHD;;AAN8C;AAUjD;AAED;;;;;;;;kCAIiB4F,O,EAAkC;AAAA;;AAC/C,cAAI,CAACA,OAAL,EAAc;AACV,kBAAM,IAAIjG,KAAJ,CAAU,4CAAV,CAAN;AACH;;AACD,cAAI,CAACiG,OAAO,CAACb,IAAb,EAAmB;AACfa,mBAAO,CAACb,IAAR,GAAe,kCAAK,GACfqG,OADU,CACF,GADE,EAEVC,OAFU,EAAf;AAGH;;AACD,cAAMtD,GAAG,uBAAgBnC,OAAO,CAAC5F,EAAR,GAAa4F,OAAO,CAAC5F,EAArB,GAA0B,EAA1C,CAAT;;AACA,cAAI,CAAC,KAAKuf,SAAL,CAAexX,GAAf,CAAL,EAA0B;AACtB,iBAAKwX,SAAL,CAAexX,GAAf,IAAsB,IAAIxI,OAAJ,CAAY,UAACC,OAAD,EAAU0F,MAAV,EAAqB;AACnD,kBAAM6uB,OAAO,GAAG,SAAVA,OAAU,CAACtoB,IAAD,EAAmB;AAC/B,oBAAMuoB,gBAAgB,GAAGvoB,IAAI,CAAC5E,MAAL,CAAY,UAAAC,CAAC,EAAI;AACtC,sBAAM6sB,MAAM,GAAGloB,IAAI,CAAC5E,MAAL,CAAY,UAAA6hB,CAAC;AAAA,2BAAI5hB,CAAC,CAACmsB,aAAF,CAAgBzO,OAAhB,CAAwBkE,CAAC,CAAC1oB,EAA1B,KAAiC,CAArC;AAAA,mBAAb,CAAf;AACA,yBACI8G,CAAC,CAACpB,aAAF,IAAmBiuB,MAAM,CAAC5tB,MAAP,CAAc,UAAC0Z,CAAD,EAAIgF,CAAJ;AAAA,2BAAUhF,CAAC,IAAIgF,CAAC,CAAC/e,aAAjB;AAAA,mBAAd,EAA8C,IAA9C,CADvB;AAGH,iBALwB,CAAzB;AAMA,uBAAO,QAAI,CAAC6Z,SAAL,CAAexX,GAAf,CAAP;AACAvI,uBAAO,CAACw0B,gBAAD,CAAP;AACH,eATD;;AAUA,kBAAM/Y,KAAK,GAAG,SAARA,KAAQ,CAAAvb,CAAC,EAAI;AACfwF,sBAAM,CAACxF,CAAD,CAAN;AACA,uBAAO,QAAI,CAAC6f,SAAL,CAAexX,GAAf,CAAP;AACH,eAHD;;AAIA,kBAAMkF,KAAK,GAAG,oFAA2BrH,OAA3B,CAAd;;AACA,kBAAIA,OAAO,CAAC5F,EAAZ,EAAgB;AACZ,wBAAI,CAACshB,IAAL,CAAU1b,OAAO,CAAC5F,EAAlB,EAAsBiN,KAAtB,EAA6BxN,IAA7B,CAAkC,UAAAqH,CAAC;AAAA,yBAAIitB,OAAO,CAAC,CAACjtB,CAAD,CAAD,CAAX;AAAA,iBAAnC,EAAqDmU,KAArD;AACH,eAFD,MAEO;AACH,wBAAI,CAAChO,KAAL,CAAWA,KAAX,EAAkBxN,IAAlB,CAAuBs0B,OAAvB,EAAgC9Y,KAAhC;AACH;AACJ,aArBqB,CAAtB;AAsBH;;AACD,iBAAO,KAAKsE,SAAL,CAAexX,GAAf,CAAP;AACH;AAED;;;;;;+BAGoB;;;;;;;;;;;AACVhE,2B,GAAmC,KAAK+V,MAAL,CAAYQ,GAAZ,CAAgB,SAAhB,KAA8B,E;;AACvE,wBAAI,CAACvW,OAAO,CAACc,MAAb,EAAqB;AACjBd,6BAAO,CAACc,MAAR,GAAiB;AAAE8N,+BAAO,EAAE,oBAAX;AAAiC3Q,6BAAK,EAAE;AAAxC,uBAAjB;AACA,2BAAK8X,MAAL,CAAYC,GAAZ,CAAgB,SAAhB,EAA2BhW,OAA3B;AACH;;;AACD,2BAAM,KAAKkJ,KAAL,YAAmB,YAAM;AAC3BlJ,6BAAO,CAACc,MAAR,GAAiB;AAAE8N,+BAAO,EAAE,oBAAX;AAAiC3Q,6BAAK,EAAE;AAAxC,uBAAjB;;AACA,8BAAI,CAAC8X,MAAL,CAAYC,GAAZ,CAAgB,SAAhB,EAA2BhW,OAA3B;AACH,qBAHK,CAAN;;;AAIAA,2BAAO,CAACc,MAAR,GAAiB;AAAE8N,6BAAO,EAAE,oBAAX;AAAiC3Q,2BAAK,EAAE;AAAxC,qBAAjB;AACA,yBAAK8X,MAAL,CAAYC,GAAZ,CAAgB,SAAhB,EAA2BhW,OAA3B;;;;;;;;;AACH;AAED;;;;;;;gCAIkBia,Q,EAAiB;AAC/B,iBAAO,IAAI,kDAAJ,CAAUA,QAAV,CAAP;AACH;;;;MA7E8B,4D;;;uBAAtB8V,a,EAAa,yH;AAAA,K;;;aAAbA,a;AAAa,eAAbA,aAAa,K;AAAA,kBAFV;;;;;sEAEHA,a,EAAa;cAHzB,wDAGyB;eAHd;AACRjW,oBAAU,EAAE;AADJ,S;AAGc,Q;;;;;;;;;;;;;;;;;;;;;;ACb1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAKaoW,I;;;;;;;AAmCT,sBAAoC;AAAA;;AAAA,YAAxBjW,QAAwB,uEAAJ,EAAI;;AAAA;;AAChC,uCAAMA,QAAN;AAXJ;;AACU,iBAAAC,MAAA,GAAiB,MAAjB;AAMV;;AACQ,iBAAAiW,cAAA,GAA0B,EAA1B;AAIJ,iBAAKte,UAAL,GAAkBoI,QAAQ,CAACpI,UAAT,IAAuB,EAAzC;AACA,iBAAKC,SAAL,GAAiBmI,QAAQ,CAACnI,SAAT,IAAsB,EAAvC;AACA,iBAAKse,UAAL,GAAkBnW,QAAQ,CAACjX,KAAT,IAAkB,EAApC;AACA,iBAAKzC,IAAL,GAAY0Z,QAAQ,CAACoW,OAAT,GAAmB,UAAnB,GAAgCpW,QAAQ,CAAC1Z,IAAT,IAAiB,UAA7D;AACA,iBAAK+vB,KAAL,GAAarW,QAAQ,CAACqW,KAAT,IAAkBrW,QAAQ,CAACsW,MAA3B,IAAqC,EAAlD;AACA,iBAAKC,aAAL,GAAqBvW,QAAQ,CAACuW,aAAT,IAA0BvW,QAAQ,CAACwW,UAAnC,IAAiD,EAAtE;AACA,iBAAKvb,aAAL,GAAqB+E,QAAQ,CAACwS,YAAT,IAAyB;AAC1CxwB,YAAE,EAAEge,QAAQ,CAACyW,eAD6B;AAE1C9uB,cAAI,EAAEqY,QAAQ,CAAC0W;AAF2B,SAA9C;AAIA,iBAAKhQ,QAAL,GAAgB,SAAKpgB,IAAL,KAAc,UAA9B;AACA,iBAAKif,SAAL,GAAiB,IAAjB;AACA,iBAAKqP,KAAL,GAAa5U,QAAQ,CAAC4U,KAAT,IAAkB,EAA/B;AACA,iBAAK+B,UAAL,GAAkB3W,QAAQ,CAAC2W,UAAT,IAAuB3W,QAAQ,CAAC4W,IAAhC,IAAwC,EAA1D;AACA,iBAAKC,SAAL,GAAiB7W,QAAQ,CAAC6W,SAAT,IAAsB,EAAvC;;AACA,YAAI,SAAKzzB,QAAL,IAAiB,SAAKA,QAAL,CAAc0Y,MAAnC,EAA0C;AACtC,mBAAKyJ,SAAL,GAAiB,SAAKniB,QAAL,CAAc0Y,MAAd,CAAqBgb,SAArB,CAA+BtU,OAA/B,CACbxC,QAAQ,CAAC3c,QAAT,IAAqB2c,QAAQ,CAAC3c,QAAT,YAA6ByG,MAAlD,GACMkW,QAAQ,CAAC3c,QADf,GAEM;AAAEsE,gBAAI,EAAEqY,QAAQ,CAAC3c;AAAjB,WAHO,CAAjB;AAKH;;AACD,iBAAKonB,MAAL,GAAczK,QAAQ,CAACyK,MAAT,IAAmB,EAAjC;AACA,iBAAKpnB,QAAL,GAAgB2c,QAAQ,CAAC3c,QAAT,IAAqB2c,QAAQ,CAAC+W,cAA9B,IAAgD,EAAhE;AAzBgC;AA0BnC;AAED;;;;;;AAUA;;;iCAGa;AAAA;;AACT,cAAM3V,OAAO,GAAQ,KAAKhe,QAAL,CAAc0Y,MAAd,IAAwB,EAA7C;AACA,iBAAO,IAAIva,OAAJ,CAAY,UAACC,OAAD,EAAU0F,MAAV,EAAqB;AACpC,gBAAIka,OAAO,CAAC0V,SAAZ,EAAuB;AACnB1V,qBAAO,CAAC0V,SAAR,CAAkBxT,IAAlB,CAAuB,QAAI,CAACthB,EAA5B,EAAgC;AAAEg1B,oBAAI,EAAE,QAAI,CAACjuB;AAAb,eAAhC,EAAsDtH,IAAtD,CACI,UAAAw1B,CAAC,EAAI;AACD,wBAAI,CAAC1R,SAAL,GAAiB0R,CAAjB;AACAz1B,uBAAO,CAACy1B,CAAD,CAAP;AACH,eAJL,EAKI,UAAAv1B,CAAC;AAAA,uBAAIwF,MAAM,CAACxF,CAAD,CAAV;AAAA,eALL;AAOH,aARD,MAQO;AACHF,qBAAO,CAAC,IAAD,CAAP;AACH;AACJ,WAZM,CAAP;AAaH;AAED;;;;;;;;kCAKiBoN,K,EAAgBtG,G,EAAY;AAAA;;AACzC,iBAAO,IAAI/G,OAAJ,CAAqB,UAAAC,OAAO,EAAI;AACnC,oBAAI,CAAC4B,QAAL,CAAc6L,KAAd,CAAoB;AAAElG,mBAAK,EAAE,QAAI,CAACA,KAAd;AAAqB6F,mBAAK,EAALA,KAArB;AAA4BtG,iBAAG,EAAHA;AAA5B,aAApB,EAAuD7G,IAAvD,CACI,UAAAw1B,CAAC;AAAA,qBAAIz1B,OAAO,CAACy1B,CAAC,IAAIA,CAAC,CAAChwB,MAAF,GAAW,CAAjB,CAAX;AAAA,aADL,EAEI,UAAAiD,CAAC;AAAA,qBAAI1I,OAAO,CAAC,KAAD,CAAX;AAAA,aAFL;AAIH,WALM,CAAP;AAMH;AAED;;;;;;gCAGY;AACR,iBAAO,IAAIy0B,IAAJ,CAAS,IAAT,CAAP;AACH;AAED;;;;;;oCAGgB;AACZ,iBAAO,IAAIA,IAAJ,CAAS,MAAD,OAAC,CAAD,kBAAM,IAAN,CAAC,EAAS;AAAEj0B,cAAE,EAAE,IAAN;AAAY+G,iBAAK,EAAE;AAAnB,WAAT,CAAT,CAAP;AACH;AAED;;;;;;iCAGsD;AAAA,cAA5B2X,YAA4B,uEAAJ,IAAI;;AAClD,cAAM/Z,IAAI,oEAAgB+Z,YAAhB,CAAV;;AACA,iBAAO/Z,IAAI,CAACtD,QAAZ;AACA,iBAAOsD,IAAP;AACH;;;4BAhEyB;AACtB,iBAAO,KAAKsU,aAAZ;AACH;AAED;;;;4BACwB;AACpB,iBAAO,IAAI,oEAAJ,CAAgB,KAAKsK,SAAL,IAAkB,EAAlC,CAAP;AACH;;;;MAvEqB,6D;;;;;;;;;;;;;;;;;ACH1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI2R,UAAU,GAAG,CAAjB;AAEO,QAAIC,WAAW,GAAG,iBAAlB;AAEP,QAAMC,WAAW,GAAa,EAA9B;AAEA;;;;;;;AAMO,aAASC,gBAAT,GAAgD;AAAA,UAAtBvP,QAAsB,uEAAF,EAAE;AACnD,UAAM9lB,EAAE,kBAAWk1B,UAAU,EAArB,CAAR;AACA,UAAMvvB,IAAI,aAAM,2CAAW8tB,SAAX,EAAN,cAAgC,2CAAWC,QAAX,EAAhC,CAAV;AACA,UAAMhP,QAAQ,GAAGoB,QAAQ,CAACpB,QAAT,IAAqB,EAAGpX,IAAI,CAACyY,MAAL,KAAgB,KAAjB,GAA0B,CAA5B,CAAtC;AACA,UAAMyK,YAAY,GAAG9L,QAAQ,GAAG,8CAAc4Q,WAAd,EAAH,GAAiCH,WAAW,CAACzL,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAA9D;AACA,UAAImL,SAAS,GAAa,EAA1B;AACA,UAAMU,cAAc,GAAGjoB,IAAI,CAAC4b,GAAL,CAAS5b,IAAI,CAACyY,MAAL,KAAgB,CAAhB,GAAoB,CAA7B,EAAgCqP,WAAW,CAACnwB,MAA5C,CAAvB;;AACA,WAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyuB,cAApB,EAAoCzuB,CAAC,EAArC,EAAyC;AACrC+tB,iBAAS,CAAC3pB,IAAV,CAAekqB,WAAW,CAAC9nB,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgBqP,WAAW,CAACnwB,MAAvC,CAAD,CAA1B;AACH;;AACD4vB,eAAS,GAAG,mFAAOA,SAAP,CAAZ;AACA,UAAM9tB,KAAK,aAAMpB,IAAI,CAChB+jB,KADY,CACN,GADM,EAEZlkB,IAFY,CAEP,GAFO,EAGZ6K,WAHY,EAAN,cAGWqU,QAAQ,GAAG,MAAH,GAAY,EAH/B,SAGoCyQ,WAHpC,CAAX;AAIAC,iBAAW,CAAClqB,IAAZ,CAAiBnE,KAAjB;AACA,aAAO,MAAP,OAAO,CAAP;AACI/G,UAAE,EAAFA,EADJ;AAEI2F,YAAI,EAAJA,IAFJ;AAGIiQ,kBAAU,EAAEjQ,IAAI,CAAC+jB,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAHhB;AAII7T,iBAAS,EAAElQ,IAAI,CAAC+jB,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAJf;AAKI3iB,aAAK,EAALA,KALJ;AAMIstB,aAAK,EAAE,4CAAYmB,WAAZ,EANX;AAOIpB,eAAO,EAAE1P,QAPb;AAQI8L,oBAAY,EAAE;AACVxwB,YAAE,EAAEwwB,YAAY,CACX9G,KADD,CACO,GADP,EAEClkB,IAFD,CAEM,GAFN,EAGC6K,WAHD,EADM;AAKV1K,cAAI,EAAE6qB;AALI,SARlB;AAeIgE,kBAAU,EAAE,+CAAeA,UAAf,EAfhB;AAgBIG,kBAAU,EAAE,oFAAQrnB,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,KAA3B,CAAR,EAA2C,CAA3C,CAhBhB;AAiBI8O,iBAAS,EAATA,SAjBJ;AAkBIjC,aAAK,EAAE,4CAAY6C,MAAZ;AAlBX,OAAO,EAmBA3P,QAnBA,CAAP;AAqBH;AAED;;;;;;AAIO,aAAS4P,gBAAT,CAA0BhgB,IAA1B,EAAoC;AACvC,UAAI,CAACA,IAAL,EAAW;AACP,cAAM/V,KAAK,CAAC,gBAAD,CAAX;AACH;;AACD,UAAMknB,MAAM,GAAyB;AACjC7mB,UAAE,EAAE,IAAI,0DAAJ,CAAgB0V,IAAI,CAAC1V,EAAL,IAAW,EAA3B,CAD6B;AAEjC2F,YAAI,EAAE,IAAI,0DAAJ,CAAgB+P,IAAI,CAAC/P,IAAL,IAAa,EAA7B,CAF2B;AAGjCiQ,kBAAU,EAAE,IAAI,0DAAJ,CAAgBF,IAAI,CAACE,UAAL,IAAmB,EAAnC,CAHqB;AAIjCC,iBAAS,EAAE,IAAI,0DAAJ,CAAgBH,IAAI,CAACG,SAAL,IAAkB,EAAlC,CAJsB;AAKjC9O,aAAK,EAAE,IAAI,0DAAJ,CAAgB2O,IAAI,CAAC3O,KAAL,IAAc,EAA9B,EAAkC,CAAC,0DAAWA,KAAZ,EAAmB,0DAAWqQ,QAA9B,CAAlC;AAL0B,OAArC,CAJuC,CAWvC;;AACA,UAAM3O,IAAI,GAAG,IAAI,wDAAJ,CAAcoe,MAAd,CAAb,CAZuC,CAavC;;AACA,UAAIpe,IAAJ,EAAU;AACN,YAAM0e,IAAI,GAA0B,EAApC;AACArf,cAAM,CAACjI,IAAP,CAAY4I,IAAI,CAACC,QAAjB,EAA2ByG,OAA3B,CAAmC,UAACpH,GAAD,EAAc;AAC7Cof,cAAI,kBAAWpf,GAAX,EAAJ,GAAwBU,IAAI,CAACC,QAAL,CAAcX,GAAd,EAAmB+D,YAAnB,CAAgC/J,SAAhC,CAA0C,UAAA4G,KAAK;AAAA,mBACnE+M,IAAI,CAACoB,kBAAL,CAAwB/O,GAAxB,EAA6BY,KAA7B,CADmE;AAAA,WAA/C,CAAxB;AAGH,SAJD;AAKAwe,YAAI,CAACzR,IAAL,GAAYA,IAAI,CAACI,YAAL,CAAkB/T,SAAlB,CAA4B,UAAA+B,KAAK,EAAI;AAC7C,cAAIA,KAAK,CAACQ,IAAN,KAAe,YAAnB,EAAiC;AAC7B,iBAAK,IAAMyD,GAAX,IAAkBof,IAAlB,EAAwB;AACpB,kBAAIA,IAAI,CAACpf,GAAD,CAAJ,YAAqB,iDAAzB,EAAuC;AACnCof,oBAAI,CAACpf,GAAD,CAAJ,CAAUwf,WAAV;AACH;AACJ;AACJ;AACJ,SARW,CAAZ;AASH;;AACD,aAAO9e,IAAP;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCpEYktB,Y;;;;;;;AAET,4BAAsB5c,SAAtB,EAA4D6c,KAA5D,EAAyFv0B,QAAzF,EAA6G;AAAA;;AAAA;;AACzG,uCAAM0X,SAAN;AADkB,iBAAAA,SAAA,GAAAA,SAAA;AAAsC,iBAAA6c,KAAA,GAAAA,KAAA;AAA6B,iBAAAv0B,QAAA,GAAAA,QAAA;;AAErF,yDAAKkpB,UAAL,CAAgB,MAAhB;;AACA,iBAAK3K,KAAL,GAAa,OAAb;AACA,iBAAKC,UAAL,GAAkB,OAAlB;;AACA,iBAAKL,QAAL,GAAgB,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAU,CAACD,CAAC,CAACzf,EAAF,CAAKwqB,aAAL,CAAmB9K,CAAC,CAAC1f,EAArB,CAAD,IAA6B,CAACyf,CAAC,CAAC1Y,KAAF,CAAQyjB,aAAR,CAAsB9K,CAAC,CAAC3Y,KAAxB,CAAxC;AAAA,SAAhB;;AACA,iBAAKgT,GAAL,CAAS,cAAT,EAAyB,IAAI,gDAAJ,CAAS;AAAE/Z,YAAE,EAAE,YAAN;AAAoB2F,cAAI,EAAE;AAA1B,SAAT,CAAzB;;AANyG;AAO5G;AAED;;;;;;AAUA;;;;;;iCAMgBzD,K,EAAe2zB,M,EAAyC;AAAA,cAAxB5Y,MAAwB,uEAAN,IAAM;;AACpE,cAAI,CAAC4Y,MAAL,EAAa;AACTA,kBAAM,GAAG,kCAAK,GACTtvB,GADI,CACA,CADA,EACG,GADH,EACQoH,KADR,CACc,GADd,EAEJtC,OAFI,EAAT;AAGH;;AACD,cAAMnL,IAAI,aAAMmB,QAAQ,CAACE,MAAf,SAAwB,KAAKuY,MAAL,CAAYnP,OAAZ,CAAoB,gBAApB,KAAyC,EAAjE,qBAAV;AACA,cAAMmrB,SAAS,GAAG,oDAAIC,OAAJ,CAAY71B,IAAZ,CAAlB;;AACA,cAAI81B,cAAJ,EAAoB;AAChBA,0BAAc,CAACxiB,OAAf,WAA0BsiB,SAA1B,oBAAoD5zB,KAApD;AACA8zB,0BAAc,CAACxiB,OAAf,WAA0BsiB,SAA1B,4BAAqDD,MAArD;AACH;;AACD,cAAIp0B,YAAJ,EAAkB;AACdA,wBAAY,CAAC+R,OAAb,WAAwBsiB,SAAxB,oBAAkD5zB,KAAlD;AACAT,wBAAY,CAAC+R,OAAb,WAAwBsiB,SAAxB,4BAAmDD,MAAnD;AACH;;AACD,cAAI5Y,MAAJ,EAAY;AACR,iBAAK5b,QAAL,CAAc40B,EAAd,CAAiB,KAAK50B,QAAL,CAAcnB,IAAd,EAAjB;AACH;;AACD,iBAAOA,IAAP;AACH;AAED;;;;;;;;8BAKaigB,Y,EAAkD;AAAA;;AAAA,cAA3Bva,OAA2B,uEAAF,EAAE;;AAC3D,cAAI,CAAC,KAAK2Z,SAAL,CAAe,OAAf,CAAL,EAA8B;AAC1B,iBAAKA,SAAL,CAAe,OAAf,IAA0B,IAAIhgB,OAAJ,CAAkB,UAACC,OAAD,EAAU0F,MAAV,EAAqB;AAC7D,sBAAI,CAAC6U,GAAL,CAAS,QAAT,EAAmB,SAAnB;;AACA,kBAAImc,OAAO,GAAG,IAAI,gEAAJ,EAAd;;AACA,kBAAI,CAACtwB,OAAD,IAAYA,OAAO,CAAC6C,IAAR,KAAiB,KAAjC,EAAwC;AACpCytB,uBAAO,GAAGA,OAAO,CAACC,MAAR,CAAe,cAAf,EAA+B,mCAA/B,CAAV;AACH;;AACD,kBAAMha,GAAG,GAAG,CAACvW,OAAO,GAAGA,OAAO,CAACuW,GAAX,GAAiB,EAAzB,KAAgC,cAA5C;;AACA,sBAAI,CAACyZ,KAAL,CAAWhV,IAAX,CAAgBzE,GAAhB,EAAqBgE,YAArB,EAAmC;AAAE+V,uBAAO,EAAPA;AAAF,eAAnC,EAAgDn0B,SAAhD,CACI,UAAAmG,CAAC;AAAA,uBAAI,IAAJ;AAAA,eADL,EAEI,UAAAxI,CAAC;AAAA,uBAAIwF,MAAM,CAACxF,CAAD,CAAV;AAAA,eAFL,EAGI,YAAM;AACF,wBAAI,CAACqZ,SAAL,CAAe3W,IAAf,CAAoBg0B,SAApB;;AACA52B,uBAAO;AACV,eANL;AAQH,aAfyB,CAA1B;AAgBH;;AACD,iBAAO,KAAK+f,SAAL,CAAe,OAAf,CAAP;AACH;AAED;;;;;;iCAGgB;AACZ,eAAKxG,SAAL,CAAe3W,IAAf,CAAoBi0B,MAApB;AACH;AAED;;;;;;+BAGgC;AAAA;;AAAA,cAAjBC,KAAiB,uEAAD,CAAC;AAC5B,cAAMvyB,OAAO,GAA4B,KAAK+V,MAAL,CAAYQ,GAAZ,CAAgB,SAAhB,KAA8B,EAAvE;;AACA,cAAI,CAACvW,OAAO,CAAC2R,IAAb,EAAmB;AACf3R,mBAAO,CAAC2R,IAAR,GAAe;AAAE/C,qBAAO,EAAE,0BAAX;AAAuC3Q,mBAAK,EAAE;AAA9C,aAAf;AACA,iBAAK8X,MAAL,CAAYC,GAAZ,CAAgB,SAAhB,EAA2BhW,OAA3B;AACH;;AACD,eAAKgW,GAAL,CAAS,QAAT,EAAmB,SAAnB;AACA,iBAAO,IAAIxa,OAAJ,CAAkB,UAAAC,OAAO,EAAI;AAChC,gBAAI82B,KAAK,GAAG,CAAZ,EAAe;AACX,sBAAI,CAACvc,GAAL,CAAS,QAAT,EAAmB,SAAnB;;AACAhW,qBAAO,CAAC2R,IAAR,GAAe;AAAE/C,uBAAO,EAAE,0BAAX;AAAuC3Q,qBAAK,EAAE;AAA9C,eAAf;;AACA,sBAAI,CAAC8X,MAAL,CAAYC,GAAZ,CAAgB,SAAhB,EAA2BhW,OAA3B;;AACA,qBAAOvE,OAAO,EAAd;AACH;;AACD,oBAAI,CAAC8hB,IAAL,CAAU,SAAV,EAAqB7hB,IAArB,CACI,UAAAknB,YAAY,EAAI;AACZ,sBAAI,CAAC5M,GAAL,CAAS,QAAT,EAAmB,WAAnB;;AACA,sBAAI,CAACA,GAAL,CAAS,cAAT,EAAyB4M,YAAzB;;AACA,kBAAI,QAAI,CAAC7M,MAAL,IAAe,QAAI,CAACA,MAAL,CAAYnP,OAAZ,CAAoB,2BAApB,CAAnB,EAAqE;AACjE,wBAAI,CAAC2W,IAAL,CAAUqF,YAAY,CAAC5f,KAAvB,EAA8BtH,IAA9B,CACI,UAAAiW,IAAI,EAAI;AACJ,0BAAI,CAACqE,GAAL,CAAS,cAAT,EAAyBrE,IAAzB;;AACA,sBAAI,QAAI,CAACoE,MAAL,CAAYnP,OAAZ,CAAoB,0BAApB,CAAJ,EAAqD;AACjD,4BAAI,CAAC4W,QAAL,CAAc,UAAd,EAA0B;AAAA,6BAAM7L,IAAI,CAAC6gB,MAAL,EAAN;AAAA,qBAA1B,EAA+C,IAA/C;AACH;;AACD,0BAAI,CAACC,aAAL;;AACAh3B,yBAAO;AACPuE,yBAAO,CAAC2R,IAAR,GAAe;AAAE/C,2BAAO,EAAE,0BAAX;AAAuC3Q,yBAAK,EAAE;AAA9C,mBAAf;;AACA,0BAAI,CAAC8X,MAAL,CAAYC,GAAZ,CAAgB,SAAhB,EAA2BhW,OAA3B;AACH,iBAVL,EAWI;AAAA,yBAAM,QAAI,CAAC9B,OAAL,CAAa,MAAb,EAAqB;AAAA,2BAAM,QAAI,CAAC6d,IAAL,CAAU,EAAEwW,KAAZ,EAAmB72B,IAAnB,CAAwB;AAAA,6BAAMD,OAAO,EAAb;AAAA,qBAAxB,CAAN;AAAA,mBAArB,CAAN;AAAA,iBAXJ;AAaH,eAdD,MAcO;AACH,oBAAI,QAAI,CAACsa,MAAL,CAAYnP,OAAZ,CAAoB,0BAApB,CAAJ,EAAqD;AACjD,0BAAI,CAAC4W,QAAL,CAAc,UAAd,EAA0B;AAAA,2BAAMoF,YAAY,CAAC4P,MAAb,EAAN;AAAA,mBAA1B,EAAuD,IAAvD;AACH;;AACD,wBAAI,CAACC,aAAL;;AACAh3B,uBAAO;AACPuE,uBAAO,CAAC2R,IAAR,GAAe;AAAE/C,yBAAO,EAAE,0BAAX;AAAuC3Q,uBAAK,EAAE;AAA9C,iBAAf;;AACA,wBAAI,CAAC8X,MAAL,CAAYC,GAAZ,CAAgB,SAAhB,EAA2BhW,OAA3B;AACH;AACJ,aA3BL,EA4BI;AAAA,qBAAM,QAAI,CAAC9B,OAAL,CAAa,MAAb,EAAqB;AAAA,uBAAM,QAAI,CAAC6d,IAAL,CAAU,EAAEwW,KAAZ,EAAmB72B,IAAnB,CAAwB;AAAA,yBAAMD,OAAO,EAAb;AAAA,iBAAxB,CAAN;AAAA,eAArB,CAAN;AAAA,aA5BJ;AA8BH,WArCM,CAAP;AAsCH;;;wCAE6B;;;;;;;;;;AACpBq1B,6B,GAAY,KAAK5tB,OAAL,CAAa4tB,S;;0BAC3B,CAACA,SAAD,IAAc,CAACA,SAAS,CAAC5vB,M;;;;;uDAClB,E;;;AAELwxB,4B,GAA4B,E;6DACd5B,S;;;AAApB,gFAA+B;AAApB9tB,6BAAoB;AAC3B0vB,gCAAQ,CAACvrB,IAAT,CAAc,KAAKoW,IAAL,CAAUva,KAAV,CAAd;AACH;;;;;;;;AACY,2BAAMxH,OAAO,CAACm3B,GAAR,CAAYD,QAAZ,CAAN;;;AAAPhrB,wB;AACN,yBAAKsO,GAAL,CAAS,WAAT,EAAsBtO,IAAtB;AACA,yBAAKsO,GAAL,CAAS,MAAT,EAAiB,0FAAO,CAAC,KAAKO,GAAL,CAAS,MAAT,KAAoB,EAArB,EAAyB3J,MAAzB,CAAgClF,IAAhC,CAAP,CAAjB;uDACOA,I;;;;;;;;;AACV;AAED;;;;;;;gCAIkBuS,Q,EAAa;AAC3B,iBAAO,IAAI,gDAAJ,CAASA,QAAT,CAAP;AACH;;;4BA9IiB;AACd,iBAAO,KAAK1D,GAAL,CAAS,cAAT,CAAP;AACH;AAED;;;;4BACuB;AACnB,iBAAO,KAAKrT,OAAL,IAAgB,KAAKA,OAAL,CAAajH,EAAb,KAAoB,YAA3C;AACH;;;;MAnB6B,4D;;;uBAArB21B,Y,EAAY,yH,EAAA,uH,EAAA,gH;AAAA,K;;;aAAZA,Y;AAAY,eAAZA,YAAY,K;AAAA,kBAFT;;;;;sEAEHA,Y,EAAY;cAHxB,wDAGwB;eAHb;AACR9X,oBAAU,EAAE;AADJ,S;AAGa,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAMA;;;AACA,QAAM8Y,uBAAuB,GAAa,CAAC,SAAD,EAAY,OAAZ,EAAqB,KAArB,EAA4B,MAA5B,EAAoC,IAApC,CAA1C;;QAKaC,c;;;AAcT,gCAAc;AAAA;;AAAA;;AAbd;AACQ,aAAAC,cAAA,GAAmD,EAAnD;AACR;;AACQ,aAAAC,iBAAA,GAAiD,EAAjD;AACR;;AACQ,aAAAC,SAAA,GAAsB,EAAtB;AACR;;AACQ,aAAAC,iBAAA,GAAgC,EAAhC;AACR;;AACQ,aAAAzO,OAAA,GAAkB,CAAlB;AAKJvlB,cAAM,CAACi0B,gBAAP,CAAwB,SAAxB,EAAmC,UAACnzB,KAAD,EAA0B;AACzD,cAAMlE,IAAI,GAAG,QAAI,CAACs3B,MAAL,CAAY,CAACpzB,KAAK,CAAClE,IAAN,IAAc,EAAf,EAAmByQ,WAAnB,EAAZ,CAAb;AACA;;;AACA,cAAI,QAAI,CAAC8mB,SAAL,KAAmBv3B,IAAvB,EAA6B;AACzB;AACA,gBAAI,CAAC,QAAI,CAACi3B,cAAL,CAAoBj3B,IAApB,CAAL,EAAgC;AAC5B,sBAAI,CAACi3B,cAAL,CAAoBj3B,IAApB,IAA4B,IAAI,oDAAJ,CAAoB,IAApB,CAA5B;AACA,sBAAI,CAACk3B,iBAAL,CAAuBl3B,IAAvB,IAA+B,QAAI,CAACi3B,cAAL,CAAoBj3B,IAApB,EAA0B4b,YAA1B,EAA/B;AACH;;AACD,oBAAI,CAACqb,cAAL,CAAoBj3B,IAApB,EAA0BwP,IAA1B,CAA+B,EAAE,QAAI,CAACmZ,OAAtC;AACA;;;AACA,gBAAI,QAAI,CAACwO,SAAL,CAAevS,OAAf,CAAuB5kB,IAAvB,KAAgC,CAApC,EAAuC;AACnCkE,mBAAK,CAACszB,cAAN;AACH;;AACD,oBAAI,CAACD,SAAL,GAAiBv3B,IAAjB;AACH;AACJ,SAhBD;AAkBAoD,cAAM,CAACi0B,gBAAP,CAAwB,OAAxB,EAAiC,UAACnzB,KAAD,EAA0B;AACvD,cAAMlE,IAAI,GAAG,QAAI,CAACs3B,MAAL,CAAY,CAACpzB,KAAK,CAAClE,IAAN,IAAc,EAAf,EAAmByQ,WAAnB,EAAZ,CAAb;AACA;;;AACA,cAAI,QAAI,CAACwmB,cAAL,CAAoBj3B,IAApB,CAAJ,EAA+B;AAC3B,oBAAI,CAACi3B,cAAL,CAAoBj3B,IAApB,EAA0BwP,IAA1B,CAA+B,IAA/B;AACH;AACD;;;AACA,cAAI,QAAI,CAAC+nB,SAAL,KAAmBv3B,IAAvB,EAA6B;AACzB,oBAAI,CAACu3B,SAAL,GAAiB,IAAjB;AACH;AACJ,SAVD;AAWH;AAED;;;;;;;;;+BAKcE,K,EAA0BjoB,I,EAAgB;AAAA;;AACpDioB,eAAK,GAAIA,KAAK,YAAYzgB,KAAjB,GAAyBygB,KAAzB,GAAiCA,KAAK,CAAC3N,KAAN,CAAY,GAAZ,CAA1C;AACA,cAAM4N,WAAW,GAAaD,KAAK,CAAC/xB,GAAN,CAAU,UAAAwB,CAAC;AAAA,mBAAI,QAAI,CAACowB,MAAL,CAAYpwB,CAAC,CAACuJ,WAAF,EAAZ,CAAJ;AAAA,WAAX,CAA9B;AACA;;AACA,cAAIinB,WAAW,CAACryB,MAAZ,GAAqB,CAArB,IAA0B,KAAKsyB,gBAAL,CAAsBD,WAAtB,CAA9B,EAAkE;AAC9D,iBAAKN,iBAAL,CAAuB9rB,IAAvB,CAA4BosB,WAA5B;AACA,gBAAME,QAAQ,GAAGF,WAAW,CAACA,WAAW,CAACryB,MAAZ,GAAqB,CAAtB,CAA5B;AACA;;AACA,gBAAI,CAAC,KAAK4xB,cAAL,CAAoBW,QAApB,CAAL,EAAoC;AAChC,mBAAKX,cAAL,CAAoBW,QAApB,IAAgC,IAAI,oDAAJ,CAAoB,IAApB,CAAhC;AACA,mBAAKV,iBAAL,CAAuBU,QAAvB,IAAmC,KAAKX,cAAL,CAAoBW,QAApB,EAA8Bhc,YAA9B,EAAnC;AACH;;AACD,iBAAKic,wBAAL;AACA,mBAAO,KAAKX,iBAAL,CAAuBU,QAAvB,EAAiCz1B,SAAjC,CAA2C,UAACwP,KAAD,EAAW;AACzD;AACA,kBAAIA,KAAJ,EAAW;AACP,oBAAMmmB,OAAO,GAAa,EAA1B;AACA;;AACA,oBAAIJ,WAAW,CAACryB,MAAZ,GAAqB,CAAzB,EAA4B;AACxB;AADwB,+DAENqyB,WAFM;AAAA;;AAAA;AAExB,8EAA+B;AAAA,0BAApBvvB,GAAoB;AAC3B,0BAAM/F,KAAK,GAAG,QAAI,CAAC60B,cAAL,CAAoB9uB,GAApB,CAAd;AACA2vB,6BAAO,CAACxsB,IAAR,CAAalJ,KAAK,GAAGA,KAAK,CAACuZ,QAAN,MAAoB,CAAC,CAAxB,GAA4B,CAAC,CAA/C;AACH,qBALuB,CAMxB;;AANwB;AAAA;AAAA;AAAA;AAAA;;AAOxB,uBAAK,IAAIzU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwwB,WAAW,CAACryB,MAAZ,GAAqB,CAAzC,EAA4C6B,CAAC,EAA7C,EAAiD;AAC7C,wBAAI4wB,OAAO,CAAC5wB,CAAD,CAAP,GAAa4wB,OAAO,CAAC5wB,CAAC,GAAG,CAAL,CAAxB,EAAiC;AAAE;AAAS;AAC/C;AACJ;;AACD,oBAAM2H,KAAK,GAAGipB,OAAO,CAAC3xB,MAAR,CAAe,UAAC0Z,CAAD,EAAIgF,CAAJ;AAAA,yBAAUhF,CAAC,IAAIgF,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAAjB,CAAX;AAAA,iBAAf,EAA+C,CAA/C,CAAd;AACA;;AACA,oBAAIhW,KAAK,IAAI6oB,WAAW,CAACryB,MAAzB,EAAiC;AAC7BmK,sBAAI;AACP;AACJ;AACJ,aAtBM,CAAP;AAuBH;;AACD,iBAAO,IAAP;AACH;AAED;;;;;;;+BAIexP,I,EAAY;AACvB;AACA,cAAIA,IAAI,CAAC4kB,OAAL,CAAa,KAAb,KAAuB,CAAvB,IAA4B5kB,IAAI,CAAC4kB,OAAL,CAAa,OAAb,KAAyB,CAArD,IAA0D5kB,IAAI,CAAC4kB,OAAL,CAAa,SAAb,KAA2B,CAAzF,EAA4F;AACxF,mBAAO5kB,IAAI,CAACmwB,OAAL,CAAa,MAAb,EAAqB,EAArB,EAAyBA,OAAzB,CAAiC,OAAjC,EAA0C,EAA1C,CAAP;AACH;;AACD,iBAAOnwB,IAAP;AACH;AAED;;;;;;mDAGgC;AAC5B,cAAM+3B,QAAQ,GAAG,EAAjB;;AAD4B,uDAER,KAAKX,iBAFG;AAAA;;AAAA;AAE5B,sEAA4C;AAAA,kBAAjCK,KAAiC;AACxC,mBAAKN,SAAL,CAAe7rB,IAAf,CAAoBmsB,KAAK,CAACA,KAAK,CAACpyB,MAAN,GAAe,CAAhB,CAAzB;AACH;AAJ2B;AAAA;AAAA;AAAA;AAAA;;AAK5B,eAAK8xB,SAAL,GAAiB,mFAAOY,QAAP,CAAjB;AACH;AAED;;;;;;;yCAIyBN,K,EAAe;AACpC,cAAIO,QAAQ,GAAG,CAAf;;AADoC,uDAElBP,KAFkB;AAAA;;AAAA;AAEpC,sEAAyB;AAAA,kBAAdtvB,GAAc;;AACrB;AACA,kBAAI4uB,uBAAuB,CAACnS,OAAxB,CAAgCzc,GAAhC,IAAuC,CAA3C,EAA8C;AAC1C6vB,wBAAQ;AACX;AACJ;AAPmC;AAAA;AAAA;AAAA;AAAA;;AAQpC,iBAAOA,QAAQ,GAAG,CAAlB;AACH;;;;;;;uBA/HQhB,c;AAAc,K;;;aAAdA,c;AAAc,eAAdA,cAAc,K;AAAA,kBAFX;;;;;sEAEHA,c,EAAc;cAH1B,wDAG0B;eAHf;AACR/Y,oBAAU,EAAE;AADJ,S;AAGe,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCgBdga,e;;;;;;;AAST,+BAAoBtX,IAApB,EAAsC;AAAA;;AAAA;;AAClC;AADgB,iBAAAA,IAAA,GAAAA,IAAA;AAPpB;;AACQ,iBAAA1H,SAAA,GAAyB;AAAEif,aAAG,EAAE,EAAP;AAAWC,eAAK,EAAE,EAAlB;AAAsBC,iBAAO,EAAE;AAA/B,SAAzB;AACR;;AACQ,iBAAAzY,SAAA,GAA8C,EAA9C;AACR;;AACQ,iBAAA0Y,SAAA,GAAY,SAAZ;AAIJ,YAAMxoB,GAAG,GAAG,kCAAK,EAAjB;AACA,YAAMyoB,KAAK,GAAGzoB,GAAG,CAAChJ,MAAJ,CAAW,iEAAX,EAAkB,GAAlB,uBAAqC,kEAAMD,MAAN,CAAa,OAAb,CAArC,IAA+D,kEAAMA,MAAN,CAAa,mBAAb,CAA7E;;AACA,iBAAK2T,GAAL,CAAS,MAAT,YAAoB,wEAApB,GAAoC,IAApC,EAA0C,OAA1C,EAAmD,IAAnD;;AACA,iBAAKA,GAAL,CAAS,KAAT,YAAmB,mEAAnB,uBAAuC+d,KAAvC,GAAgD,IAAhD,EAAsD,OAAtD,EAA+D,IAA/D;;AACA,iBAAKzc,IAAL;;AANkC;AAOrC;AAED;;;;;;;+BAGoB;;;;;;;;;AAChB,2BAAM,KAAK0c,YAAL,CAAkB,KAAlB,CAAN;;;AACA,yBAAKC,SAAL,CAAe,OAAf,EAAwB32B,YAAxB;AACA,yBAAK22B,SAAL,CAAe,SAAf,EAA0BpC,cAA1B;;AACA,wBAAI,KAAKnd,SAAL,CAAeif,GAAf,CAAmB/c,KAAvB,EAA8B;AAC1B/X,4BAAM,CAAC+X,KAAP,GAAe,IAAf;AACH;;AACD,wBAAI,KAAKlC,SAAL,CAAeif,GAAf,CAAmBO,GAAnB,IAA0B,KAAKxf,SAAL,CAAeif,GAAf,CAAmBO,GAAnB,CAAuB1yB,IAArD,EAA2D;AACvD,2BAAKsyB,SAAL,GAAiB,KAAKpf,SAAL,CAAeif,GAAf,CAAmBO,GAAnB,CAAuB1yB,IAAxC;AACH;;AACD,yBAAKwU,GAAL,CAAS,UAAT,EAAqB,8BAArB;;AACA,yBAAKwB,YAAL,CAAkBvM,IAAlB,CAAuB,IAAvB;;;;;;;;;AACH;AAED;;;;;AAGA;;;;;;;;4BAQW9K,I,EAAcuW,G,EAAaO,I,EAAqE;AAAA,cAAzDC,MAAyD,uEAAjC,OAAiC;AAAA,cAAxBC,KAAwB,uEAAP,KAAO;;AACvG,cAAItY,MAAM,CAAC+X,KAAP,IAAgBO,KAApB,EAA2B;AACvB,gBAAMgd,MAAM,GAAa,CAAC,gBAAD,EAAmB,gBAAnB,EAAqC,gBAArC,CAAzB;;AACA,gBAAIld,IAAJ,EAAU;AAAA;;AACN,0BAAAN,OAAO,EAACO,MAAD,CAAP,+BAAsB,KAAKgC,QAA3B,iBAA0C/Y,IAA1C,iBAAqDuW,GAArD,UAA+Dyd,MAA/D,GAAuEld,IAAvE;AACH,aAFD,MAEO;AAAA;;AACH,2BAAAN,OAAO,EAACO,MAAD,CAAP,gCAAsB,KAAKgC,QAA3B,iBAA0C/Y,IAA1C,iBAAqDuW,GAArD,UAA+Dyd,MAA/D;AACH;AACJ;AACJ;AAED;;;;;;;4BAIWvwB,G,EAAW;AAClB,cAAMlI,IAAI,GAAGkI,GAAG,CAAC2hB,KAAJ,CAAU,GAAV,CAAb;AACA,cAAI/gB,KAAK,GAAG,IAAZ;;AACA,cAAI9I,IAAI,CAAC,CAAD,CAAJ,KAAY,SAAhB,EAA2B;AACvBA,gBAAI,CAAC04B,KAAL;AACA5vB,iBAAK,GAAG,4FAAgB9I,IAAhB,EAAsB,KAAKgZ,SAAL,CAAemf,OAArC,CAAR;AACH,WAHD,MAGO,IAAIn4B,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAhB,EAAyB;AAC5BA,gBAAI,CAAC04B,KAAL;AACA5vB,iBAAK,GAAG,4FAAgB9I,IAAhB,EAAsB,KAAKgZ,SAAL,CAAekf,KAArC,CAAR;AACH,WAHM,MAGA;AACHpvB,iBAAK,GAAG,4FAAgB9I,IAAhB,EAAsB,KAAKgZ,SAAL,CAAeif,GAArC,KACJ,4FAAgBj4B,IAAhB,EAAsB,KAAKgZ,SAAL,CAAemf,OAArC,CADI,IAEJ,4FAAgBn4B,IAAhB,EAAsB,KAAKgZ,SAAL,CAAekf,KAArC,CAFJ;AAGH;;AACD,iBAAOpvB,KAAP;AACH;AAED;;;;;;;;kCAKkBhD,I,EAAc6yB,K,EAAgB;AAC5C,cAAIA,KAAJ,EAAW;AACP,iBAAK,IAAI1xB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0xB,KAAK,CAACvzB,MAA1B,EAAkC6B,CAAC,EAAnC,EAAuC;AACnC,kBAAMiB,GAAG,GAAGywB,KAAK,CAACzwB,GAAN,CAAUjB,CAAV,CAAZ;AACA,kBAAM4E,IAAI,GAAG8sB,KAAK,CAACjI,OAAN,CAAcxoB,GAAd,CAAb;;AACA,kBAAI2D,IAAJ,EAAU;AAAE,qBAAKmN,SAAL,CAAelT,IAAf,EAAqBoC,GAArB,IAA4B2D,IAA5B;AAAmC;AAClD;AACJ;AACJ;AAED;;;;;;;;qCAK2B/F,I,EAAwE;AAAA,cAA1D8yB,IAA0D,uEAA3C,sBAA2C;AAAA,cAAnBnC,KAAmB,uEAAH,CAAG;;;;;;;;;;;0BAC3FmC,IAAI,KAAK,sBAAT,IAAmCnC,KAAK,GAAG,C;;;;;uDACpC/2B,OAAO,CAACC,OAAR,E;;;AAELk5B,6B,GAAYD,IAAI,CAAC/O,KAAL,CAAW,GAAX,EAAgB+O,IAAI,CAAC/O,KAAL,CAAW,GAAX,EAAgBzkB,MAAhB,GAAyB,CAAzC,C,EAClB;;0BACIjC,MAAM,CAAC01B,SAAD,CAAN,YAA6B5wB,M;;;;;AAC7B,yBAAK+Q,SAAL,CAAelT,IAAf,IAAuB,MAAH,OAAG,CAAH,kBAAS,KAAKkT,SAAL,CAAelT,IAAf,KAAwB,EAAjC,CAAG,EAAsC3C,MAAM,CAAC01B,SAAD,CAA5C,CAAvB;uDACOn5B,OAAO,CAACC,OAAR,E;;;AAELuI,uB,kBAAcpC,I,cAAQ8yB,I;;AAC5B,wBAAI,CAAC,KAAKlZ,SAAL,CAAexX,GAAf,CAAL,EAA0B;AACtB,2BAAKwX,SAAL,CAAexX,GAAf,IAAsB,IAAIxI,OAAJ,CAAkB,UAACC,OAAD,EAAU0F,MAAV,EAAqB;AACzD,gCAAI,CAACqb,IAAL,CAAUjG,GAAV,CAAcme,IAAd,EAAoB12B,SAApB,CACI,UAAC4C,IAAD,EAAU;AACN,kCAAI,CAACkU,SAAL,CAAelT,IAAf,IAAuB,MAAH,OAAG,CAAH,kBAAS,QAAI,CAACkT,SAAL,CAAelT,IAAf,KAAwB,EAAjC,CAAG,EAAuChB,IAAI,IAAI,EAA/C,CAAvB;AACH,yBAHL,EAGO,UAACjF,CAAD,EAAO;AACN,kCAAI,CAACya,GAAL,CAAS,UAAT,2CAAsDse,IAAtD;;AACA,kCAAI,CAAClZ,SAAL,CAAexX,GAAf,IAAsB,IAAtB;;AACA,kCAAI,CAAC9F,OAAL,gBAAqBy2B,SAArB,GAAkC,YAAM;AACpC,oCAAI,CAACP,YAAL,CAAkBxyB,IAAlB,EAAwB8yB,IAAxB,EAA8B,EAAEnC,KAAhC,EAAuC72B,IAAvC,CAA4C;AAAA,qCAAMD,OAAO,EAAb;AAAA,6BAA5C;AACH,2BAFD;AAGH,yBATL,EASO;AAAA,iCAAMA,OAAO,EAAb;AAAA,yBATP;AAWH,uBAZqB,CAAtB;AAaH;;uDACM,KAAK+f,SAAL,CAAexX,GAAf,C;;;;;;;;;AACV;;;4BAzFqB;AAAE,iBAAO,KAAKkwB,SAAZ;AAAwB;;;;MApCf,4D;;;uBAAxBJ,e,EAAe,uH;AAAA,K;;;aAAfA,e;AAAe,eAAfA,eAAe,K;AAAA,kBAFZ;;;;;sEAEHA,e,EAAe;cAH3B,wDAG2B;eAHhB;AACRha,oBAAU,EAAE;AADJ,S;AAGgB,Q;;;;;;;;;;;;;;;;;;;;;;AC5B5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAEa8a,S;;;AAAb;AAAA;;AACI;AACU,aAAA/Z,OAAA,GAAsC,EAAtC;AACV;;AACU,aAAAC,UAAA,GAAyC,EAAzC;AACV;;AACU,aAAAC,cAAA,GAAoE,EAApE;AACV;;AACmB,aAAAnD,YAAA,GAAe,IAAI,oDAAJ,CAA6B,KAA7B,CAAf;AAoHtB;AAlHG;;;;;kCASoB;AAChB,eAAK,IAAM5T,GAAX,IAAkB,KAAK6W,OAAvB,EAAgC;AAC5B;AACA,gBAAI,KAAKA,OAAL,CAAawI,cAAb,CAA4Brf,GAA5B,CAAJ,EAAsC;AAClC,mBAAK6wB,YAAL,CAAkB7wB,GAAlB;AACH;AACJ;;AACD,eAAK,IAAMA,IAAX,IAAkB,KAAK8W,UAAvB,EAAmC;AAC/B;AACA,gBAAI,KAAKA,UAAL,CAAgBuI,cAAhB,CAA+Brf,IAA/B,CAAJ,EAAyC;AACrC,mBAAK8wB,aAAL,CAAmB9wB,IAAnB;AACH;AACJ;;AACD,eAAK,IAAMA,KAAX,IAAkB,KAAK+W,cAAvB,EAAuC;AACnC;AACA,gBAAI,KAAKA,cAAL,CAAoBsI,cAApB,CAAmCrf,KAAnC,CAAJ,EAA6C;AACzC,mBAAKtF,KAAL,CAAWsF,KAAX;AACH;AACJ;AACJ;AAED;;;;;;;;;gCAMkBpC,I,EAAcmzB,E,EAAqC;AAAA;;AAAA,cAArB5X,KAAqB,uEAAL,GAAK;;AACjE,cAAIvb,IAAI,IAAImzB,EAAR,IAAcA,EAAE,YAAYC,QAAhC,EAA0C;AACtC,iBAAKH,YAAL,CAAkBjzB,IAAlB;AACA,iBAAKiZ,OAAL,CAAajZ,IAAb,IAA0BtD,UAAU,CAAC,YAAM;AACvCy2B,gBAAE;AACF,sBAAI,CAACla,OAAL,CAAajZ,IAAb,IAAqB,IAArB;AACH,aAHmC,EAGjCub,KAHiC,CAApC;AAIH,WAND,MAMO;AACH,kBAAM,IAAIvhB,KAAJ,CACFgG,IAAI,GAAG,4CAAH,GAAkD,4CADpD,CAAN;AAGH;AACJ;AAED;;;;;;;;;;;;;;;;;oBAIuBA,I,EAAc;AACjC;AACA,cAAI,KAAKiZ,OAAL,CAAajZ,IAAb,CAAJ,EAAwB;AACpBizB,wBAAY,CAAC,KAAKha,OAAL,CAAajZ,IAAb,CAAD,CAAZ;AACA,iBAAKiZ,OAAL,CAAajZ,IAAb,IAAqB,IAArB;AACH;AACJ,S;AAED;;;;;;;;;iCAMmBA,I,EAAcmzB,E,EAAqC;AAAA,cAArB5X,KAAqB,uEAAL,GAAK;;AAClE,cAAIvb,IAAI,IAAImzB,EAAR,IAAcA,EAAE,YAAYC,QAAhC,EAA0C;AACtC,iBAAKF,aAAL,CAAmBlzB,IAAnB;AACA,iBAAKkZ,UAAL,CAAgBlZ,IAAhB,IAA6BuX,WAAW,CAAC;AAAA,qBAAM4b,EAAE,EAAR;AAAA,aAAD,EAAa5X,KAAb,CAAxC;AACH,WAHD,MAGO;AACH,kBAAM,IAAIvhB,KAAJ,CACFgG,IAAI,GAAG,6CAAH,GAAmD,6CADrD,CAAN;AAGH;AACJ;AAED;;;;;;;;;;;;;;;;;oBAIwBA,I,EAAc;AAClC;AACA,cAAI,KAAKkZ,UAAL,CAAgBlZ,IAAhB,CAAJ,EAA2B;AACvBkzB,yBAAa,CAAC,KAAKha,UAAL,CAAgBlZ,IAAhB,CAAD,CAAb;AACA,iBAAKkZ,UAAL,CAAgBlZ,IAAhB,IAAwB,IAAxB;AACH;AACJ,S;AAED;;;;;;;;qCAKuBA,I,EAAclD,K,EAAoC;AACrE,eAAKA,KAAL,CAAWkD,IAAX;AACA,eAAKmZ,cAAL,CAAoBnZ,IAApB,IAA4BlD,KAA5B;AACH;AAED;;;;;;;8BAIgBkD,I,EAAc;AAC1B;AACA,cAAI,KAAKmZ,cAAL,IAAuB,KAAKA,cAAL,CAAoBnZ,IAApB,CAA3B,EAAsD;AAClD,iBAAKmZ,cAAL,CAAoBnZ,IAApB,aAAqC,iDAArC,GACO,KAAKmZ,cAAL,CAAoBnZ,IAApB,EAA2C4hB,WAA3C,EADP,GAEO,KAAKzI,cAAL,CAAoBnZ,IAApB,GAFP;AAGA,iBAAKmZ,cAAL,CAAoBnZ,IAApB,IAA4B,IAA5B;AACH;AACJ;;;4BAhHqB;AAClB,iBAAO,KAAKgW,YAAZ;AACH;AACD;;;;4BACyB;AACrB,iBAAO,KAAKA,YAAL,CAAkBJ,QAAlB,EAAP;AACH;;;;;;;;;;;;;;;;;;;;;AClBL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMayd,a;;;;;;;;;;;;;;;sCACS;AACd,eAAKC,OAAL;AACH;;;;MAH8B,qD;;;6CAAtBD,a;AAAa,K;;;YAAbA,a;AAAa,0E;AAAA;;;yGAAbA,a;;;;;sEAAAA,a,EAAa;cAHzB,uDAGyB;eAHf;AACPt2B,kBAAQ,EAAE;AADH,S;AAGe,Q;;;;;;;;;;;;;;;;;;ACP1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;ACEI;;AACI;;AACJ;;;;;;AADc;;AAAA;;;;;;AAEd;;AACI;;AACJ;;;;AADiB;;AAAA;;;;QDERw2B,mB;;;AAQT,qCAAc;AAAA;;AAHd;AACgB,aAAAl3B,KAAA,GAAkC,EAAlC;AAEA;;;;mCAER,CAAW;;;;;;;uBAVVk3B,mB;AAAmB,K;;;YAAnBA,mB;AAAmB,kC;AAAA;AAAA;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,6N;AAAA;AAAA;ACRhC;;AACI;;AACA;;AAGA;;AAGJ;;;;AARyB;;AACX;;AAAA;;AAC2B;;AAAA;;AAGV;;AAAA;;;;;;;;;sEDGlBA,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACPx2B,kBAAQ,EAAE,aADH;AAEPC,qBAAW,EAAE,8BAFN;AAGPC,mBAAS,EAAE,CAAC,8BAAD;AAHJ,S;AAKqB,Q;;;;gBAE3B;;;gBAEA;;;gBAEA;;;;;;;;;;;;;;;;;;;;AEdL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;QASau2B,oB;;;;;;;AALb;AAAA;;AAAA;;;AAYI;;AAC2B,iBAAA5e,SAAA,GAAY,IAAI,0DAAJ,EAAZ;AAC3B;;AACO,iBAAA6e,YAAA,GAAe,KAAf;AAfX;AAwBC;AAPG;;;;;;;wCAGuB;AACnB,eAAKA,YAAL,GAAoB,CAAC,KAAKA,YAA1B;AACA,eAAK7e,SAAL,CAAelW,IAAf;AACH;;;;MAlBqC,2E;;;oDAA7B80B,oB;AAAoB,K;;;YAApBA,oB;AAAoB,sC;AAAA;AAAA;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,0F;AAAA,c;AAAA,a;AAAA,gL;AAAA;AAAA;ACTjC;;AAA2F;AAAA,mBAAiB,IAAAE,aAAA,EAAjB;AAAgC,WAAhC;;AACvF;;AAAqB;AAAA,mBAAU,IAAAA,aAAA,EAAV;AAAyB,WAAzB;;AAA2B;;AAAiB;;AACjE;;AAAkB;AAAA,mBAAU,IAAAA,aAAA,EAAV;AAAyB,WAAzB;;AACd;;AAOJ;;AACJ;;;;AAXwC;;AACY;;AAAA;;AAGxC;;AAAA;;;;;;;gHDKCF,oB;;;;;sEAAAA,oB,EAAoB;cALhC,uDAKgC;eALtB;AACTz2B,kBAAQ,EAAE,iBADD;AAETC,qBAAW,EAAE,+BAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKsB,Q;;gBAE5B;;;gBAEA;;;gBAEA;;;gBAEA,oD;iBAAO,U;;;;;;;;;;;;;;;;;;;;AEjBZ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;QAgBa02B,gB;;;AAbb;AAAA;;AAcI;AACgB,aAAA1wB,IAAA,GAAe,CAAf;AAChB;;AACgB,aAAA8Z,GAAA,GAAc,EAAd;AAChB;;AACgB,aAAAwG,GAAA,GAAc,CAAd;AA0EnB;AA7DG;;;;;;;8BAGa;AACT,cAAI,CAAC,KAAKvgB,KAAV,EAAiB;AAAE,iBAAKA,KAAL,GAAa,KAAKugB,GAAL,IAAY,CAAzB;AAA4B;;AAC/C,cAAMtgB,IAAI,GAAG,KAAK2wB,QAAL,GAAgB,GAAhB,GAAsB,KAAKC,SAAL,GAAiB,EAAjB,GAAsB,KAAK5wB,IAAL,IAAa,CAAtE;AACA,eAAKD,KAAL,IAAcC,IAAd;;AACA,cAAI,KAAKD,KAAL,GAAa,KAAK+Z,GAAtB,EAA2B;AACvB,iBAAK/Z,KAAL,GAAa,KAAK+Z,GAAL,IAAY,EAAzB;AACH;;AACD,eAAKhZ,QAAL,CAAc,KAAKf,KAAnB;AACH;AAED;;;;iCACgB;AACZ,cAAI,CAAC,KAAKA,KAAV,EAAiB;AAAE,iBAAKA,KAAL,GAAa,KAAKugB,GAAL,IAAY,CAAzB;AAA4B;;AAC/C,cAAMtgB,IAAI,GAAG,KAAK2wB,QAAL,GAAgB,GAAhB,GAAsB,KAAKC,SAAL,GAAiB,EAAjB,GAAsB,KAAK5wB,IAAL,IAAa,CAAtE;AACA,eAAKD,KAAL,IAAcC,IAAd;;AACA,cAAI,KAAKD,KAAL,GAAa,KAAKugB,GAAtB,EAA2B;AACvB,iBAAKvgB,KAAL,GAAa,KAAKugB,GAAL,IAAY,CAAzB;AACH;;AACD,eAAKxf,QAAL,CAAc,KAAKf,KAAnB;AACH;AAED;;;;;;;iCAIgB8wB,S,EAAiB;AAC7B,eAAK9wB,KAAL,GAAa8wB,SAAb;AACA;;AACA,cAAI,KAAKC,SAAT,EAAoB;AAChB,iBAAKA,SAAL,CAAeD,SAAf;AACH;AACJ;AAED;;;;;;;mCAIkB9wB,K,EAAe;AAC7B,eAAKA,KAAL,GAAaA,KAAb;AACH;AAED;;AACA;;;;;;;yCAIwBmwB,E,EAAuB;AAC3C,eAAKY,SAAL,GAAiBZ,EAAjB;AACH;AAED;;AACA;;;;;;;0CAIyBA,E,EAAuB;AAC5C,eAAKa,QAAL,GAAgBb,EAAhB;AACH;;;;;;;uBA/EQQ,gB;AAAgB,K;;;YAAhBA,gB;AAAgB,gC;AAAA;AAAA;AAAA;AAAA;AAAA,O;AAAA,kFAThB,CACP;AACIp2B,eAAO,EAAE,gEADb;;AAEI;AACA02B,mBAAW,EAAE,iEAAW;AAAA,iBAAMN,gBAAN;AAAA,SAAX,CAHjB;AAIIO,aAAK,EAAE;AAJX,OADO,CASgB,E;AAF1B,c;AAAA,a;AAAA,mS;AAAA;AAAA;ACdH;;AAEI;AAAA,mCAAoC,IAApC;AAAwC,WAAxC,EAAwC,KAAxC,EAAwC,6DAAxC,EAAyC,iBAAzC,EAAyC;AAAA,kCACJ,IADI;AACA,WADzC,EACyC,KADzC,EACyC,6DADzC,EAAyC,cAAzC,EAAyC;AAAA,kCAEP,IAFO;AAEH,WAFtC,EAEsC,KAFtC,EAEsC,6DAFtC,EAAyC,aAAzC,EAAyC;AAAA,mCAGP,KAHO;AAGF,WAHvC,EAGuC,KAHvC,EAGuC,6DAHvC,EAAyC,eAAzC,EAAyC;AAAA,kCAIN,KAJM;AAID,WAJxC,EAIwC,KAJxC,EAIwC,6DAJxC,EAAyC,YAAzC,EAAyC;AAAA,kCAKT,KALS;AAKJ,WALrC,EAKqC,KALrC,EAKqC,6DALrC;;AAOA;;AAA2E;AAAA,mBAAU,IAAAC,MAAA,EAAV;AAAkB,WAAlB;;AACvE;;AACJ;;AACA;;AACI;;AACJ;;AACA;;AAA8D;AAAA,mBAAU,IAAAvzB,GAAA,EAAV;AAAe,WAAf;;AAC1D;;AACJ;;AACJ;;;;AAT0C;;AAAA;;AACxB;;AAAA;;AAGV;;AAAA;;AAE+B;;AAAA;;AACrB;;AAAA;;;;;;;;;sEDAL+yB,gB,EAAgB;cAb5B,uDAa4B;eAblB;AACT52B,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,0BAAD,CAHF;AAITY,mBAAS,EAAE,CACP;AACIN,mBAAO,EAAE,gEADb;;AAEI;AACA02B,uBAAW,EAAE,iEAAW;AAAA,qBAAMN,gBAAN;AAAA,aAAX,CAHjB;AAIIO,iBAAK,EAAE;AAJX,WADO;AAJF,S;AAakB,Q;;gBAExB;;;gBAEA;;;gBAEA;;;;;;;;;;;;;;;;;;;;AEtBL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;QAoBaE,kB;;;;;;;AAZb;AAAA;;AAAA;;;AAaI;;AACsB,iBAAAC,KAAA,GAAgB,kCAAK,GAAG3uB,OAAR,EAAhB;AAGtB;;AACgB,iBAAA4uB,QAAA,GAA6B,OAA7B;AAChB;;AACgB,iBAAAC,MAAA,GAA2B,QAA3B;AApBpB;AA8GC;AA3EG;;;;;mCAkBkB;AACd,eAAKn1B,IAAL,GAAY,kCAAK,GAAGsG,OAAR,EAAZ;AACH;AAED;;;;;;;iCAIgBouB,S,EAAmB;AAC/B,eAAK10B,IAAL,GAAY00B,SAAZ;;AACA,cAAI,KAAKC,SAAT,EAAoB;AAChB,iBAAKA,SAAL,CAAeD,SAAf;AACH;;AACD,eAAKL,YAAL,GAAoB,KAApB;AACH;AAED;;AACA;;;;;;;mCAIkBzwB,K,EAAe;AAC7B,eAAK5D,IAAL,GAAY4D,KAAZ;AACA,eAAKywB,YAAL,GAAoB,KAApB;AACH;AAED;;AACA;;;;;;;yCAIwBN,E,EAAuB;AAC3C,eAAKY,SAAL,GAAiBZ,EAAjB;AACH;AAED;;AACA;;;;;;;0CAIyBA,E,EAAuB;AAC5C,eAAKa,QAAL,GAAgBb,EAAhB;AACH;;;yCAEuBqB,Q,EAAmB;AACvC,eAAKA,QAAL,GAAgBA,QAAhB;AACH;AAED;;;;0CACyB;AACrB,eAAKC,QAAL,CAAcC,SAAd;AACH;AAED;;;;yCACwB;AACpB,eAAKD,QAAL,CAAcE,QAAd;AACH;;;4BAzEc;AACX,iBAAO,KAAKN,KAAL,IAAc,kCAAK,GAAG5uB,OAAR,CAAgB,GAAhB,EAAqBC,OAArB,EAArB;AACH;AACD;;;;4BACgB;AACZ,iBAAO,KAAKkvB,GAAL,IAAY,kCAAK,GAAG5sB,KAAR,CAAc,GAAd,EAAmBpH,GAAnB,CAAuB,CAAvB,EAA0B,GAA1B,EAA+B8E,OAA/B,EAAnB;AACH;AACD;;;;4BACsB;AAClB,iBAAO,kCAAK,CAAC,KAAKtG,IAAN,CAAL,CAAiByB,MAAjB,CAAwB,aAAxB,CAAP;AACH;AAED;;;;4BACkB;AACd,iBAAO,KAAK4zB,QAAL,CAAcI,QAArB;AACH;;;;MAvCmC,2E;;;kDAA3BT,kB;AAAkB,K;;;YAAlBA,kB;AAAkB,mC;AAAA;AAAA;0EAqBhB,qE,EAAgB,I;;;;;;;;;;;;;;;;kFA7BhB,CACP;AACI72B,eAAO,EAAE,gEADb;AAEI02B,mBAAW,EAAE,iEAAW;AAAA,iBAAMG,kBAAN;AAAA,SAAX,CAFjB;AAGIF,aAAK,EAAE;AAHX,OADO,C,GAMV,wE;AAAA,c;AAAA,c;AAAA,kS;AAAA;AAAA;AClBL;;AAOI;AAAA,mBAAiB,IAAAY,cAAA,EAAjB;AAAiC,WAAjC;;AAGA;;AAAqB;;AAAiB;;AACtC;;AACI;;AAOJ;;AACJ;;AACA;;AACI;;AAAuC;AAAA,mBAASC,MAAM,CAACC,eAAP,EAAT;AAAiC,WAAjC;;AACnC;;AAGI;AAAiB,gBAAAjxB,QAAA;AAAkB,uBAAAkxB,eAAA;AAAiB,WAApD;;AACH;;AACL;;AACJ;;;;;;AAxBI;;AAGA;;AAFA;;AAIqB;;AAAA;;AAGb;;AAAA;;AAWA;;AAAA,wFAAgB,SAAhB,EAAgB,2FAAhB;;;;;;;8GDJCb,kB;;;;;sEAAAA,kB,EAAkB;cAZ9B,uDAY8B;eAZpB;AACPr3B,kBAAQ,EAAE,cADH;AAEPC,qBAAW,EAAE,6BAFN;AAGPC,mBAAS,EAAE,CAAC,6BAAD,CAHJ;AAIPY,mBAAS,EAAE,CACP;AACIN,mBAAO,EAAE,gEADb;AAEI02B,uBAAW,EAAE,iEAAW;AAAA,qBAAMG,kBAAN;AAAA,aAAX,CAFjB;AAGIF,iBAAK,EAAE;AAHX,WADO;AAJJ,S;AAYoB,Q;;gBAE1B,mD;iBAAM,M;;;gBAEN,mD;iBAAM,I;;;gBAEN;;;gBAEA;;;gBAEA;;;gBAWA,uD;iBAAU,qE,EAAgB;AAAE,sBAAQ;AAAV,W;;;;;;;;;;;;;;;;;;;;AEzC/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACGY;;AACI;;AACJ;;;;;;AAFoD;;AAChD;;AAAA;;;;QDiBHgB,sB;;;;;;;AAZb;AAAA;;AAAA;;;AAaI;;AACgB,iBAAAnY,GAAA,GAAc,GAAd;AAChB;;AACgB,iBAAAwG,GAAA,GAAc,EAAd;AAChB;;AACgB,iBAAAtgB,IAAA,GAAe,EAAf;AAMT,iBAAA5D,QAAA,GAAmB,IAAnB;AAxBX;AAoGC;;;;mCAnEkB;AACX,eAAK81B,gBAAL,GAAwB,KAAKC,uBAAL,CAA6B,KAAKrY,GAAlC,EAAuC,KAAKwG,GAA5C,EAAiD,KAAKtgB,IAAtD,CAAxB;AACH;;;oCAEkB9D,O,EAAsB;AACrC;AACA,cAAIA,OAAO,CAAC4d,GAAR,IAAe5d,OAAO,CAACokB,GAAvB,IAA8BpkB,OAAO,CAAC8D,IAAtC,IAA8C9D,OAAO,CAAC6H,IAA1D,EAAgE;AAC5D,iBAAKmuB,gBAAL,GAAwB,KAAKC,uBAAL,CAA6B,KAAKrY,GAAlC,EAAuC,KAAKwG,GAA5C,EAAiD,KAAKtgB,IAAtD,CAAxB;AACH;AACJ;AAED;;;;;;;iCAIgB6wB,S,EAAiB;AAC7B,eAAKz0B,QAAL,GAAgBy0B,SAAhB;AACA;;AACA,cAAI,KAAKC,SAAT,EAAoB;AAChB,iBAAKA,SAAL,CAAe,CAACD,SAAhB;AACH;AACJ;AAED;;AACA;;;;;;;mCAIkB9wB,K,EAAe;AAC7B,eAAK3D,QAAL,aAAmB2D,KAAnB;AACH;;;yCAEuBwxB,Q,EAAmB;AACvC,eAAKA,QAAL,GAAgBA,QAAhB;AACH;AAED;;AACA;;;;;;;yCAIwBrB,E,EAAuB;AAC3C,eAAKY,SAAL,GAAiBZ,EAAjB;AACH;AAED;;AACA;;;;;;;0CAIyBA,E,EAAuB;AAC5C,eAAKa,QAAL,GAAgBb,EAAhB;AACH;;;gDAE+BpW,G,EAAawG,G,EAAatgB,I,EAAY;AAClE,cAAMoyB,MAAM,GAAe,EAA3B;AACA,cAAIruB,IAAI,GAAGuc,GAAX;AACA,cAAInkB,IAAI,GAAG,KAAK4H,IAAL,GAAY,kCAAK,CAAC,KAAKA,IAAN,CAAjB,GAA+B,IAA1C;;AACA,iBAAOA,IAAI,IAAI+V,GAAf,EAAoB;AAChBsY,kBAAM,CAAC9vB,IAAP,CAAY;AACRlL,gBAAE,YAAK2M,IAAL,CADM;AAERhH,kBAAI,YAAK,oGAAiBgH,IAAjB,CAAL,SAA8B5H,IAAI,GAAG,OAAOA,IAAI,CAACwB,GAAL,CAASoG,IAAT,EAAe,GAAf,EAAoBnG,MAApB,CAA2B,QAA3B,CAAP,GAA8C,GAAjD,GAAsD,EAAxF;AAFI,aAAZ;AAIAmG,gBAAI,IAAI/D,IAAR;AACH;;AACD,iBAAOoyB,MAAP;AACH;;;;MAvFuC,2E;;;sDAA/BH,sB;AAAsB,K;;;YAAtBA,sB;AAAsB,uC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;AAAA,kFARpB,CACP;AACI33B,eAAO,EAAE,gEADb;AAEI02B,mBAAW,EAAE,iEAAW;AAAA,iBAAMiB,sBAAN;AAAA,SAAX,CAFjB;AAGIhB,aAAK,EAAE;AAHX,OADO,CAQoB,GAF9B,wEAE8B,EAF9B,kEAE8B,C;AAF9B,c;AAAA,a;AAAA,4K;AAAA;AAAA;ACnBL;;AACI;;AACI;;AAA6D;AAAA,mBAAe,IAAAnwB,QAAA,QAAf;AAA+B,WAA/B;;AACzD;;AAGJ;;AACJ;;AACJ;;;;AAR4B;;AAEA;;AAAA,0FAAkB,UAAlB,EAAkB,YAAlB;;AACJ;;AAAA;;;;;;;kHDkBXmxB,sB;;;;;sEAAAA,sB,EAAsB;cAZlC,uDAYkC;eAZxB;AACPn4B,kBAAQ,EAAE,kBADH;AAEPC,qBAAW,EAAE,iCAFN;AAGPC,mBAAS,EAAE,CAAC,iCAAD,CAHJ;AAIPY,mBAAS,EAAE,CACP;AACIN,mBAAO,EAAE,gEADb;AAEI02B,uBAAW,EAAE,iEAAW;AAAA,qBAAMiB,sBAAN;AAAA,aAAX,CAFjB;AAGIhB,iBAAK,EAAE;AAHX,WADO;AAJJ,S;AAYwB,Q;;gBAE9B;;;gBAEA;;;gBAEA;;;gBAEA;;;gBAEA;;;;;;;;;;;;;;;;;;;;AE/BL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AC8BQ;;AACI;;AACJ;;;;;;AAFgD;;AAC5C;;AAAA;;;;;;;;AAHZ;;AACI;;AAAyD;AAAA;;AAAA;;AAAA;AAAA;;AACrD;;AAGJ;;AACJ;;;;;;AALwB;;AAAA,uFAAc,UAAd,EAAc,eAAd;;AACJ;;AAAA;;;;;;;;;;;;QDRPoB,kB;;;;;;;AAZb;AAAA;;AAAA;;;AAaI;;AACgB,iBAAAryB,IAAA,GAAe,EAAf;AAGhB;;AACgB,iBAAAsyB,aAAA,GAAyB,IAAzB;AAChB;;AACO,iBAAAn2B,IAAA,GAAe,kCAAK,GAAGsG,OAAR,EAAf;AACP;;AACO,iBAAAsB,IAAA,GAAe,kCAAK,GAAGnG,MAAR,CAAe,OAAf,CAAf;AAtBX;AA4JC;;;;mCAzHkB;AAAA;;AACX,eAAK20B,WAAL,GAAmB,IAAnB;AACA,eAAKC,aAAL,GAAqB,KAAK1uB,sBAAL,CAA4B,KAAK3H,IAAjC,EAAuC,CAAC,KAAKm2B,aAA7C,EAA4D,KAAKtyB,IAAjE,CAArB;AACA,eAAK3G,OAAL,CAAa,MAAb,EAAqB;AAAA,mBAAM,QAAI,CAACk5B,WAAL,GAAmB,KAAzB;AAAA,WAArB;AACH;;;oCAEkBr2B,O,EAAsB;AACrC;AACA,cAAIA,OAAO,CAACo2B,aAAR,IAAyBp2B,OAAO,CAAC8D,IAArC,EAA2C;AACvC,iBAAKwyB,aAAL,GAAqB,KAAK1uB,sBAAL,CAA4B,KAAK3H,IAAjC,EAAuC,CAAC,KAAKm2B,aAA7C,EAA4D,KAAKtyB,IAAjE,CAArB;AACH;AACJ;AAED;;;;;AAgBA;;;;iCAIgB6wB,S,EAAiB;AAC7B,eAAK9sB,IAAL,GAAY8sB,SAAZ;AACA;;AACA,cAAI,KAAKC,SAAT,EAAoB;AAChB,gBAAM/sB,IAAI,GAAG,KAAKA,IAAL,CAAU+c,KAAV,CAAgB,GAAhB,CAAb;AACA,gBAAM3kB,IAAI,GAAG,kCAAK,CAAC,KAAKA,IAAN,CAAL,CAAiB+I,IAAjB,CAAsB,CAACnB,IAAI,CAAC,CAAD,CAA3B,EAAgCU,MAAhC,CAAuC,CAACV,IAAI,CAAC,CAAD,CAA5C,EAAiDvB,OAAjD,CAAyD,GAAzD,CAAb;;AACA,iBAAKsuB,SAAL,CAAe30B,IAAI,CAACsG,OAAL,EAAf;AACH;AACJ;AAED;;;;;;;mCAIkB1C,K,EAAe;AAC7B,eAAK5D,IAAL,GAAY4D,KAAZ;AACA,cAAM5D,IAAI,GAAG,kCAAK,CAAC,KAAKA,IAAN,CAAL,CAAiBqG,OAAjB,CAAyB,GAAzB,CAAb;AACA,eAAKuB,IAAL,GAAY5H,IAAI,CAACyB,MAAL,CAAY,OAAZ,CAAZ;AACA,eAAK40B,aAAL,GAAqB,KAAK1uB,sBAAL,CAA4B,KAAK3H,IAAjC,EAAuC,CAAC,KAAKm2B,aAA7C,EAA4D,KAAKtyB,IAAjE,CAArB;AACH;;;yCAEuBuxB,Q,EAAmB;AACvC,eAAKA,QAAL,GAAgBA,QAAhB;AACH;AAED;;AACA;;;;;;;yCAIwBrB,E,EAAuB;AAC3C,eAAKY,SAAL,GAAiBZ,EAAjB;AACH;AAED;;AACA;;;;;;;0CAIyBA,E,EAAuB;AAC5C,eAAKa,QAAL,GAAgBb,EAAhB;AACH;AAED;;;;;;qCAGoB;AAAA;;AAChB,eAAKqC,WAAL,GAAmB,IAAnB;AACA,eAAKl5B,OAAL,CAAa,UAAb,EAAyB,YAAM;AAC3B;AACA,gBAAI,QAAI,CAACo5B,YAAT,EAAuB;AACnB,sBAAI,CAACA,YAAL,CAAkBC,KAAlB;;AACA,sBAAI,CAACD,YAAL,CAAkB32B,IAAlB;;AACA,sBAAI,CAAC7C,YAAL,CAAkB,cAAlB,EAAkC,QAAI,CAACw5B,YAAL,CAAkBE,YAAlB,CAA+Bx5B,SAA/B,CAAyC,UAACC,KAAD,EAAW;AAClF;AACA,oBAAI,CAACA,KAAL,EAAY;AACR,0BAAI,CAACm5B,WAAL,GAAmB,KAAnB;AACH;AACJ,eALiC,CAAlC;AAMH;AACJ,WAZD;AAaH;AAED;;;;;;;;+CAK+BK,S,EAAmBC,S,EAAoB7yB,I,EAAY;AAC9E,cAAM6G,GAAG,GAAG,kCAAK,EAAjB;AACA,cAAI1K,IAAI,GAAG,kCAAK,CAACy2B,SAAD,CAAhB;AACA,cAAMR,MAAM,GAAG,EAAf;AACA;;AACA,cAAIS,SAAS,IAAI12B,IAAI,CAACmJ,OAAL,CAAauB,GAAb,EAAkB,GAAlB,CAAjB,EAAyC;AACrC1K,gBAAI,GAAGA,IAAI,CAACqG,OAAL,CAAa,GAAb,CAAP;AACH;;AACDrG,cAAI,GAAGA,IAAI,CAACsI,MAAL,CAAYC,IAAI,CAACC,IAAL,CAAUxI,IAAI,CAACsI,MAAL,KAAgBzE,IAA1B,IAAkCA,IAA9C,CAAP;AACA,cAAMtC,GAAG,GAAGvB,IAAI,CAAC4I,KAAL,CAAW,GAAX,CAAZ,CAT8E,CAU9E;;AACA,iBAAO5I,IAAI,CAACyI,QAAL,CAAclH,GAAd,EAAmB,GAAnB,CAAP,EAAgC;AAC5B00B,kBAAM,CAAC9vB,IAAP,CAAY;AACRvF,kBAAI,YAAKZ,IAAI,CAACyB,MAAL,CAAY,qGAAZ,CAAL,CADI;AAERxG,gBAAE,EAAE+E,IAAI,CAACyB,MAAL,CAAY,OAAZ;AAFI,aAAZ;AAIAzB,gBAAI,GAAGA,IAAI,CAACwB,GAAL,CAASqC,IAAT,EAAe,GAAf,CAAP;AACH;;AACD,iBAAOoyB,MAAP;AACH;;;4BA1GyB;AACtB,cAAMruB,IAAI,GAAG,KAAKA,IAAL,CAAU+c,KAAV,CAAgB,GAAhB,CAAb;AACA,cAAM3kB,IAAI,GAAG,kCAAK,CAAC,KAAKA,IAAN,CAAL,CAAiB+I,IAAjB,CAAsB,CAACnB,IAAI,CAAC,CAAD,CAA3B,EAAgCU,MAAhC,CAAuC,CAACV,IAAI,CAAC,CAAD,CAA5C,CAAb;AACA;;AACA,cAAI5H,IAAI,CAACsI,MAAL,KAAgB,EAAhB,KAAuB,CAAvB,IAA4B,CAAC,KAAK+tB,aAAL,CAAmBz0B,IAAnB,CAAwB,UAAAgG,IAAI;AAAA,mBAAIA,IAAI,CAAC3M,EAAL,KAAY+E,IAAI,CAACyB,MAAL,CAAY,OAAZ,CAAhB;AAAA,WAA5B,CAAjC,EAAoG;AAChG,iBAAK40B,aAAL,CAAmBlwB,IAAnB,CAAwB;AACpBvF,kBAAI,YAAKZ,IAAI,CAACyB,MAAL,CAAY,qGAAZ,CAAL,CADgB;AAEpBxG,gBAAE,EAAE+E,IAAI,CAACyB,MAAL,CAAY,OAAZ;AAFgB,aAAxB;;AAIA,iBAAK40B,aAAL,CAAmBhX,IAAnB,CAAwB,UAAC3E,CAAD,EAAIC,CAAJ;AAAA,qBAAU,UAAGD,CAAC,CAACzf,EAAL,EAAUwqB,aAAV,WAA2B9K,CAAC,CAAC1f,EAA7B,EAAV;AAAA,aAAxB;AACH;;AACD,iBAAO,KAAKo7B,aAAZ;AACH;;;;MAjDmC,2E;;;kDAA3BH,kB;AAAkB,K;;;YAAlBA,kB;AAAkB,mC;AAAA;AAAA;;;;;;;;;;;;;;;kFARhB,CACP;AACI/3B,eAAO,EAAE,gEADb;AAEI02B,mBAAW,EAAE,iEAAW;AAAA,iBAAMqB,kBAAN;AAAA,SAAX,CAFjB;AAGIpB,aAAK,EAAE;AAHX,OADO,C,GAMV,wE,EAAA,kE;AAAA,c;AAAA,a;AAAA,2Z;AAAA;AAAA;ACpBL;;AAOI;AAAA,mBAAiB,IAAA6B,UAAA,EAAjB;AAA6B,WAA7B;;AAEA;;AACI;;AAKI;AAAA,mBAAiB,IAAAhyB,QAAA,QAAjB;AAAiC,WAAjC;;AALJ;;AAOJ;;AACA;;AAAkB;AAAA,mBAAU,IAAAgyB,UAAA,EAAV;AAAsB,WAAtB;;AACd;;AAOJ;;AACJ;;AACA;;;;AAzBI;;AACA;;AASQ;;AAAA,6FAAqB,SAArB,EAAqB,QAArB;;AAOA;;AAAA;;AAQyB;;AAAA;;;;;;;8GDNxBT,kB;;;;;sEAAAA,kB,EAAkB;cAZ9B,uDAY8B;eAZpB;AACPv4B,kBAAQ,EAAE,cADH;AAEPC,qBAAW,EAAE,6BAFN;AAGPC,mBAAS,EAAE,CAAC,6BAAD,CAHJ;AAIPY,mBAAS,EAAE,CACP;AACIN,mBAAO,EAAE,gEADb;AAEI02B,uBAAW,EAAE,iEAAW;AAAA,qBAAMqB,kBAAN;AAAA,aAAX,CAFjB;AAGIpB,iBAAK,EAAE;AAHX,WADO;AAJJ,S;AAYoB,Q;;gBAE1B;;;gBAEA;;;gBAEA;;;gBAeA,uD;iBAAU,Q;;;;;;;;;;;;;;;;;;;;AE3Cf;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACiBQ;;AACI;;AACJ;;;;;;AAGA;;AACI;;AAAkB;;AAAiB;;AACnC;;AAAmB;;AAAkB;;AACzC;;;;;;AAH6C;;AACvB;;AAAA;;AACC;;AAAA;;;;;;;;;;;;;;;;AAoBnB;;AAKI;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAEA;;AACA;;AAIJ;;;;;;AAVI,sFAAiB,OAAjB,EAAiB,uCAAjB,EAAiB,WAAjB,EAAiB,IAAjB;;AAKA;;AAAA;;AAGI;;AAAA;;;;;;AAdZ;;AAII;;AAaJ;;;;;;AAZQ;;AAAA;;;;;;;;;;;;;;;;;;AAgBZ;;AAAA;;AAA6C;;;;;;;;;;;;QDlCpC8B,sB;;;;;;;AA0BT,sCAAoBv6B,QAApB,EAAkD;AAAA;;AAAA;;AAC9C;AADgB,iBAAAA,QAAA,GAAAA,QAAA;AAvBpB;;AACgB,iBAAA2vB,KAAA,GAAgB,CAAhB;AAChB;;AAC0B,iBAAApb,QAAA,GAAW,IAAI,0DAAJ,EAAX;AAY1B;;AACO,iBAAAoC,OAAA,GAAU,IAAI,4CAAJ,EAAV;AAO2C;AAEjD;;;;mCAEU;AAAA;;AACP;AACA,eAAK/H,eAAL,GAAuB,KAAK+H,OAAL,CAAa9P,IAAb,CACnB,oEAAa,GAAb,CADmB,EAEnB,6EAFmB,EAGnB,iEAAU,UAACgF,KAAD,EAAW;AACjB,oBAAI,CAAClJ,OAAL,GAAe,IAAf;AACA,mBAAOkJ,KAAK,CAAChI,MAAN,IAAgB,QAAI,CAAC8rB,KAArB,GACD,QAAI,CAAC3vB,QAAL,CAAc4F,KAAd,CAAoBiG,KAApB,CAA0B;AACtB2uB,eAAC,EAAE3uB,KAAK,CAAC4uB,KAAN,CAAY,CAAZ,EAAevuB,IAAI,CAACoV,GAAL,CAAS,QAAI,CAACqO,KAAd,EAAqB,CAArB,CAAf,CADmB;AAEtB1Q,mBAAK,EAAE,KAAK;AAFU,aAA1B,CADC,GAKD9gB,OAAO,CAACC,OAAR,CAAgB,EAAhB,CALN;AAMH,WARD,CAHmB,EAYnB,kEAAW,UAAC0I,CAAD;AAAA,mBAAO,gDAAG,EAAH,CAAP;AAAA,WAAX,CAZmB,EAanB,2DAAI,UAACuD,IAAD,EAAkB;AAClB,oBAAI,CAAC1H,OAAL,GAAe,KAAf;AACA,mBAAO,8FAAW,QAAI,CAAC+3B,UAAhB,EAA4BrwB,IAA5B,EAAkC,CAAC,MAAD,EAAS,OAAT,CAAlC,CAAP;AACH,WAHD,CAbmB,CAAvB,CAFO,CAoBP;;AACA,eAAK5J,YAAL,CACI,gBADJ,EAEI,KAAKmO,eAAL,CAAqBjO,SAArB,CAA+B,UAAC0J,IAAD,EAAU;AACrC,oBAAI,CAACswB,SAAL,GAAiBtwB,IAAjB;;AACA,oBAAI,CAACswB,SAAL,CAAe5sB,OAAf,CAAuB,UAACrI,CAAD,EAAY;AAC/BA,eAAC,CAACk1B,UAAF,GAAe,oGAAiBl1B,CAAC,CAACk1B,UAAnB,CAAf;AACAl1B,eAAC,CAACm1B,WAAF,GAAgB,oGAAiBn1B,CAAC,CAACm1B,WAAnB,CAAhB;AACA,qBAAOn1B,CAAP;AACH,aAJD;AAKH,WAPD,CAFJ;AAWH;AAED;;;;;;;gCAIe4O,I,EAAY;AACvB;AACA,cAAI,CAAC,KAAKwmB,WAAV,EAAuB;AACnB,iBAAKA,WAAL,GAAmB,EAAnB;AACH;;AACD,cAAMnxB,KAAK,GAAG,KAAKmxB,WAAL,CAAiBlxB,SAAjB,CAA2B,UAACmxB,MAAD;AAAA,mBAAYA,MAAM,CAACn8B,EAAP,KAAc0V,IAAI,CAAC1V,EAA/B;AAAA,WAA3B,CAAd;AACA;;AACA,cAAI+K,KAAK,GAAG,CAAZ,EAAe;AACX,iBAAKmxB,WAAL,gCAAuB,KAAKA,WAA5B,IAAyCxmB,IAAzC;AACH;;AACD,eAAKhM,QAAL,CAAc,KAAKwyB,WAAnB;AACA,eAAKJ,UAAL,GAAkB,EAAlB;AACH;AAED;;;;;;;mCAIkBpmB,I,EAAY;AAC1B,eAAKwmB,WAAL,GAAmB,KAAKA,WAAL,CAAiBr1B,MAAjB,CAAwB,UAACs1B,MAAD;AAAA,mBAAYA,MAAM,CAACn8B,EAAP,KAAc0V,IAAI,CAAC1V,EAA/B;AAAA,WAAxB,CAAnB;AACA,eAAK0J,QAAL,CAAc,KAAKwyB,WAAnB;AACH;AAED;;;;;;;yCAIwBp4B,K,EAAO;AAAA;;AAC3B;AACA,cAAIA,KAAK,CAACs4B,MAAV,EAAkB;AACd,gBAAM3D,IAAI,GAAG30B,KAAK,CAACs4B,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAb;AACA;;AACA,gBAAI5D,IAAJ,EAAU;AACN,kBAAM6D,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,oBAAM,CAACE,UAAP,CAAkB/D,IAAlB,EAAwB,OAAxB;AACA6D,oBAAM,CAACrF,gBAAP,CAAwB,MAAxB,EAAgC,UAACwF,GAAD,EAAS;AACrC,wBAAI,CAACC,cAAL,CAAqBD,GAAG,CAACE,UAAJ,CAAuBrc,MAA5C;;AACAxc,qBAAK,CAACs4B,MAAN,CAAazzB,KAAb,GAAqB,EAArB;AACH,eAHD;AAIA2zB,oBAAM,CAACrF,gBAAP,CAAwB,OAAxB,EAAiC,UAAC/uB,CAAD;AAAA,uBAC7B,QAAI,CAAC9G,QAAL,CAAcqD,WAAd,CAA0B,qBAA1B,CAD6B;AAAA,eAAjC;AAGH;AACJ;AACJ;AAED;;;;;;;uCAIuBE,I,EAAc;AAAA;;AACjC,cAAM8G,IAAI,GAAG,6FAAU9G,IAAV,KAAmB,EAAhC;AACA,cAAM3E,EAAE,GAAG,KAAKoB,QAAL,CAAc4F,KAAd,CAAoBC,OAApB,CAA4B0tB,UAAvC;AACAlpB,cAAI,CAAC0D,OAAL,CAAa,UAACia,EAAD,EAAQ;AACjBA,cAAE,CAACzjB,IAAH,GAAUyjB,EAAE,CAACzjB,IAAH,cAAcyjB,EAAE,CAACxT,UAAjB,cAA+BwT,EAAE,CAACvT,SAAlC,CAAV;AACA,gBAAM0O,OAAO,GAAG,CAAC6E,EAAE,CAACzjB,IAAH,cAAc2H,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,QAA3B,CAAd,CAAD,EACX2D,KADW,CACL,GADK,EAEXlkB,IAFW,CAEN,GAFM,EAGX6K,WAHW,EAAhB;AAIA;;AACA,gBAAI,CAAC+Y,EAAE,CAACriB,KAAR,EAAe;AACXqiB,gBAAE,CAACriB,KAAH,aAAcwd,OAAd,cAAyBvkB,EAAzB;AACH;;AACDopB,cAAE,CAAC9kB,IAAH,GAAU,UAAV;;AACA,oBAAI,CAACs4B,OAAL,CAAa,IAAI,2EAAJ,CAASxT,EAAT,CAAb;AACH,WAZD;AAaH;AAED;;AACA;;;;8CAC6B;AACzB,cAAMyT,QAAQ,+GAAd;AACA,0GAAa,cAAb,EAA6BA,QAA7B;AACH;AAED;;;;;;;iCAIgBpD,S,EAAiB;AAC7B,eAAKyC,WAAL,GAAmBzC,SAAnB;;AACA,cAAI,KAAKC,SAAT,EAAoB;AAChB,iBAAKA,SAAL,CAAeD,SAAf;AACH;AACJ;AAED;;AACA;;;;;;;mCAIkB9wB,K,EAAe;AAC7B,eAAKuzB,WAAL,GAAmBvzB,KAAnB;AACH;;;yCAEuBwxB,Q,EAAmB;AACvC,eAAKA,QAAL,GAAgBA,QAAhB;AACH;AAED;;AACA;;;;;;;yCAIwBrB,E,EAAuB;AAC3C,eAAKY,SAAL,GAAiBZ,EAAjB;AACH;AAED;;AACA;;;;;;;0CAIyBA,E,EAAuB;AAC5C,eAAKa,QAAL,GAAgBb,EAAhB;AACH;;;;MAvLuC,2E;;;uBAA/B6C,sB,EAAsB,gJ;AAAA,K;;;YAAtBA,sB;AAAsB,wC;AAAA;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,kFARpB,CACP;AACIz4B,eAAO,EAAE,gEADb;AAEI02B,mBAAW,EAAE,iEAAW;AAAA,iBAAM+B,sBAAN;AAAA,SAAX,CAFjB;AAGI9B,aAAK,EAAE;AAHX,OADO,CAQoB,GAF9B,wEAE8B,C;AAF9B,e;AAAA,c;AAAA,2+B;AAAA;AAAA;ACzBL;;AACI;;AACI;;AAAA;;AAGI;AAAA;AAAA,aAAwB,eAAxB,EAAwB;AAAA,mBACP,IAAA9hB,OAAA,aADO;AACa,WADrC;;AAHJ;;AAUA;;AACI;;AAGJ;;AACA;;AAGJ;;AACA;;AAA0C;AAAA,mBAAkB,IAAA6kB,OAAA,qBAAlB;AAA8C,WAA9C;;AACtC;;AAIJ;;AACA;;AACI;;AAAmD;AAAA,mBAAU,IAAAjnB,QAAA,OAAV;AAAyB,WAAzB;;AAAnD;;AAEA;;AACA;;AAAA;;AAEI;;AAAmB;AAAA,mBAAU,IAAAmnB,gBAAA,QAAV;AAAkC,WAAlC;;AAAnB;;AACJ;;AAAA;;AACA;;AAAyD;AAAA,mBAAU,IAAAC,mBAAA,EAAV;AAA+B,WAA/B;;AAAzD;;AAEA;;AACJ;;AACA;;AACI;;AAkBJ;;AACJ;;AACA;;;;;;;;AA5DwC;;AAK5B;;AAAA,8FAAwB,UAAxB,EAAwB,YAAxB,EAAwB,iBAAxB,EAAwB,GAAxB;;AASI;;AAAA;;AAGsB;;AAAA;;AAKlB;;AAAA;;AAoBR;;AAAA,sHAA2D,UAA3D,EAA2D,GAA3D;;;;;;;;;sEDfCpB,sB,EAAsB;cAZlC,uDAYkC;eAZxB;AACPj5B,kBAAQ,EAAE,mBADH;AAEPC,qBAAW,EAAE,kCAFN;AAGPC,mBAAS,EAAE,CAAC,kCAAD,CAHJ;AAIPY,mBAAS,EAAE,CACP;AACIN,mBAAO,EAAE,gEADb;AAEI02B,uBAAW,EAAE,iEAAW;AAAA,qBAAM+B,sBAAN;AAAA,aAAX,CAFjB;AAGI9B,iBAAK,EAAE;AAHX,WADO;AAJJ,S;AAYwB,Q;;;;;;gBAE9B;;;gBAEA;;;gBAEA,oD;iBAAO,S;;;;;;;;;;;;;;;;;;;;AEjCZ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;ACgBQ;;AACI;;AACJ;;;;;;AAGA;;AACI;;AAAkB;;AAAiB;;AACnC;;AAAmB;;AAAkB;;AACzC;;;;;;AAH6C;;AACvB;;AAAA;;AACC;;AAAA;;;;;;;;;;;;QDDlBmD,wB;;;;;;;AAuBT,wCAAoB57B,QAApB,EAAkD;AAAA;;AAAA;;AAC9C;AADgB,iBAAAA,QAAA,GAAAA,QAAA;AARpB;;AACO,iBAAA2W,OAAA,GAAU,IAAI,4CAAJ,EAAV;AAO2C;AAEjD;;;;mCAEc;AAAA;;AAEX;AACA,eAAK/H,eAAL,GAAuB,KAAK+H,OAAL,CAAa9P,IAAb,CACnB,oEAAa,GAAb,CADmB,EAEnB,6EAFmB,EAGnB,iEAAU,UAAAgF,KAAK,EAAI;AACf,oBAAI,CAAClJ,OAAL,GAAe,IAAf;AACA,mBAAO,QAAI,CAAC6B,OAAL,IAAgB,QAAI,CAACA,OAAL,CAAaX,MAAb,GAAsB,CAAtC,GACD1F,OAAO,CAACC,OAAR,CAAgB,QAAI,CAACoG,OAArB,CADC,GAEDqH,KAAK,CAAChI,MAAN,IAAgB,CAAhB,GACK,QAAI,CAAC7D,QAAL,CAAc4F,KAAd,CAAoBiG,KAApB,CAA0B;AAAE2uB,eAAC,EAAE3uB,KAAK,CAAC4uB,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAL;AAAwBxb,mBAAK,EAAE,KAAK;AAApC,aAA1B,CADL,GAEI9gB,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAJV;AAKH,WAPD,CAHmB,EAWnB,kEAAW,UAACgF,GAAD;AAAA,mBAAS,gDAAG,EAAH,CAAT;AAAA,WAAX,CAXmB,EAYnB,2DAAI,UAACiH,IAAD,EAAkB;AAClB,oBAAI,CAAC1H,OAAL,GAAe,KAAf;AACA,mBAAO,8FAAW,QAAI,CAAC+3B,UAAhB,EAA4BrwB,IAA5B,EAAkC,CAAC,MAAD,EAAS,OAAT,CAAlC,CAAP;AACH,WAHD,CAZmB,CAAvB,CAHW,CAoBX;;AACA,eAAK5J,YAAL,CAAkB,gBAAlB,EAAoC,KAAKmO,eAAL,CAAqBjO,SAArB,CAA+B,UAAA0J,IAAI,EAAI;AACvE,oBAAI,CAACswB,SAAL,GAAiBtwB,IAAjB;;AACA,oBAAI,CAACswB,SAAL,CAAe5sB,OAAf,CAAuB,UAACrI,CAAD,EAAY;AAC/BA,eAAC,CAACk1B,UAAF,GAAe,oGAAiBl1B,CAAC,CAACk1B,UAAnB,CAAf;AACAl1B,eAAC,CAACm1B,WAAF,GAAgB,oGAAiBn1B,CAAC,CAACm1B,WAAnB,CAAhB;AACA,qBAAOn1B,CAAP;AACH,aAJD;AAKH,WAPmC,CAApC;AAQH;AAED;;;;;;4CAG2B;AACvB,cAAI,KAAKm2B,WAAT,EAAsB;AAClB,iBAAKnB,UAAL,GAAkB,KAAKmB,WAAL,CAAiBt3B,IAAnC;AACH;AACJ;AAED;;;;;;;iCAIgB8zB,S,EAAe;AAC3B,eAAKwD,WAAL,GAAmBxD,SAAnB;;AACA,cAAI,KAAKC,SAAT,EAAoB;AAChB,iBAAKA,SAAL,CAAeD,SAAf;AACH;;AACD,eAAKyD,iBAAL;AACH;AAED;;;;;;;mCAIkBv0B,K,EAAa;AAC3B,eAAKs0B,WAAL,GAAmBt0B,KAAnB;AACA,eAAKu0B,iBAAL;AACH;;;yCAEuB/C,Q,EAAmB;AACvC,eAAKA,QAAL,GAAgBA,QAAhB;AACH;AAED;;;;;;;yCAIwBrB,E,EAAqB;AACzC,eAAKY,SAAL,GAAiBZ,EAAjB;AACH;AAED;;;;;;;0CAIyBA,E,EAAqB;AAC1C,eAAKa,QAAL,GAAgBb,EAAhB;AACH;;;;MA1GyC,2E;;;uBAAjCkE,wB,EAAwB,gJ;AAAA,K;;;YAAxBA,wB;AAAwB,0C;AAAA;AAAA;AAAA;AAAA,O;AAAA,kFARtB,CACP;AACI95B,eAAO,EAAE,gEADb;AAEI02B,mBAAW,EAAE,iEAAW;AAAA,iBAAMoD,wBAAN;AAAA,SAAX,CAFjB;AAGInD,aAAK,EAAE;AAHX,OADO,CAQsB,GAFhC,wEAEgC,C;AAFhC,e;AAAA,a;AAAA,0e;AAAA;AAAA;ACpBL;;AACI;;AACI;;AAAA;;AAGI;AAAA;AAAA,aAAwB,eAAxB,EAAwB;AAAA,mBACP,IAAA9hB,OAAA,aADO;AACa,WADrC,EAAwB,MAAxB,EAAwB;AAAA,mBAMhB,IAAAmlB,iBAAA,EANgB;AAMG,WAN3B;;AAHJ;;AAWA;;AACI;;AACJ;;AACA;;AAGJ;;AACA;;AAA0C;AAAA,mBAAkB,IAAAxzB,QAAA,qBAAlB;AAA+C,WAA/C;;AACtC;;AAIJ;;AACJ;;;;;;AArBY;;AAAA,8FAAwB,UAAxB,EAAwB,YAAxB,EAAwB,iBAAxB,EAAwB,GAAxB;;AASU;;AAAA;;AAEgB;;AAAA;;AAKlB;;AAAA;;;;;;;;;sEDCPszB,wB,EAAwB;cAZpC,uDAYoC;eAZ1B;AACPt6B,kBAAQ,EAAE,qBADH;AAEPC,qBAAW,EAAE,oCAFN;AAGPC,mBAAS,EAAE,CAAC,oCAAD,CAHJ;AAIPY,mBAAS,EAAE,CACP;AACIN,mBAAO,EAAE,gEADb;AAEI02B,uBAAW,EAAE,iEAAW;AAAA,qBAAMoD,wBAAN;AAAA,aAAX,CAFjB;AAGInD,iBAAK,EAAE;AAHX,WADO;AAJJ,S;AAY0B,Q;;;;;;gBAEhC;;;gBAEA;;;;;;;;;;;;;;;;;;;;AE1BL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;QAUasD,iB;;;;;;;AAIT,iCAAoBxkB,OAApB,EAAqC;AAAA;;AAAA;;AACjC;AADgB,iBAAAA,OAAA,GAAAA,OAAA;AAAiB;AAEpC;;;;mCAEc;AAAA;;AACX,eAAK1W,OAAL,CAAa,eAAb,EAA8B;AAAA,mBAAM,QAAI,CAACm7B,WAAL,CAAiBC,QAAQ,CAACn3B,KAA1B,CAAN;AAAA,WAA9B;;AACA,eAAKyS,OAAL,CAAa2kB,MAAb,CAAoBv7B,SAApB,CAA8B,UAAC+B,KAAD,EAA0B;AACpD;AACA,gBAAIA,KAAK,YAAY,6DAArB,EAAoC;AAChC,sBAAI,CAAC7B,OAAL,CAAa,eAAb,EAA8B;AAAA,uBAAM,QAAI,CAACm7B,WAAL,CAAiBC,QAAQ,CAACn3B,KAA1B,CAAN;AAAA,eAA9B;AACH;AACJ,WALD;AAMH;;;oCAEkB7E,Q,EAAU;AACzBA,kBAAQ,GAAGA,QAAQ,CAAC2d,MAAT,CAAgB,CAAhB,EAAmB3d,QAAQ,CAACmjB,OAAT,CAAiB,IAAjB,CAAnB,CAAX;AACA,eAAK+Y,YAAL,GAAoBl8B,QAApB;AACH;;;;MArBkC,6D;;;uBAA1B87B,iB,EAAiB,uH;AAAA,K;;;YAAjBA,iB;AAAiB,+B;AAAA,0F;AAAA,c;AAAA,a;AAAA,0F;AAAA;AAAA;ACV9B;;AACI;;AACI;;AAAA;;AAAgC;;AAChC;;AACI;;AACJ;;AACJ;;AACJ;;;;AAPG;;AAImB;;AAAA;;;;;;;;;sEDMTA,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACPz6B,kBAAQ,EAAE,UADH;AAEPC,qBAAW,EAAE,0BAFN;AAGPC,mBAAS,EAAE,CAAC,wBAAD;AAHJ,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;;;AEV9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;ACCI;;AAII;;AAAA;;AAA6D;;AAC7D;;AAGI;AAAA;;AAAA;;AAAA;AAAA;;AACH;;AACL;;;;;;AAHQ;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA;;AAAA;;AACsB;;;;;;AAZ9B;;AACI;;AAAA;;AAKS;;AACT;;AAAA;;AACA;;AACI;;AAAA;;AAAA;;AAEA;;AAGJ;;AACJ;;;;;;AAZQ;;AAAA;;AAQW;;AAAA;;;;;;;;;;;;;;;;;;AAMf;;AACI;;AAAA;;AAAuD;;AACvD;;AACJ;;;;;;;;;;;;;;;;;;;;AACA;;AACI;;AAAA;;AAAyE;;AACzE;;AAGI;AAAA;;AAAA;;AAAA;AAAA;;AACH;;AACL;;;;;;AAHQ;;AAAA;;;;;;;;;;;;;;;;;;AAaJ;;AACI;;AACJ;;;;;;AATJ;;AACI;;AAAA;;AAAyE;;AACzE;;AAKA;;AAGJ;;;;;;AANQ;;AAAA;;AAGoB;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOpB;;AAAA;;AAIoB;;;;;;AAUxB;;AACI;;AACJ;;;;;;AAnBJ;;AACI;;AACI;;AAAA;;AAAmE;;AACnE;;AAMJ;;AACA;;AAOA;;AAGJ;;;;;;AAfY;;AAAA;;AAOJ;;AAAA,6EAAW,UAAX,EAAW,gFAAX,EAAW,MAAX,EAAW,0EAAX;;AAKoB;;AAAA;;;;;;;;;;;;;;;;;;AAapB;;AACI;;AACJ;;;;;;AAF2C;;AACvC;;AAAA;;;;;;AAThB;;AACI;;AAAA;;AAAiE;;AACjE;;AACI;;AAKI;;AAGJ;;AACJ;;AACJ;;;;;;AAPY;;AAAA;;AAEY;;AAAA;;;;;;;;;;;;;;;;;;;;AAMxB;;AACI;;AAAA;;AAAsE;;AACtE;;AAGI;AAAA;;AAAA;;AAAA;AAAA;;AACH;;AACL;;;;;;;;;;;;;;;;;;AAKY;;AACI;;AACJ;;;;;;AAF+C;;AAC3C;;AAAA;;;;;;AALhB;;AACI;;AAAA;;AAA+E;;AAC/E;;AACI;;AACI;;AAGJ;;AACJ;;AACJ;;;;;;AALwB;;AAAA;;;;;;;;;;;;;;;;;;AAMxB;;AACI;;AAAA;;AAKA;;AACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGI;;AACI;;AAAA;;AAMC;;AACL;;;;;;AAEI;;;;;;AAZR;;AACI;;AAAA;;AAAyD;;AACzD;;AASA;;AAGJ;;;;;;;;AAZqD;;AAAA,4FAAmC,UAAnC,EAAmC,IAAnC;;;;;;AAtHzD;;AACI;;AAWA;;AAgBA;;AACI;;AAIA;;AAQJ;;AACA;;AACI;;AAWA;;AAqBJ;;AACA;;AAcA;;AAQA;;AAUA;;AAQA;;AAeJ;;;;;;AAnIuC;;AAG/B;;AAAA;;AASe;;AAAA;;AAiBI;;AAAA;;AAIA;;AAAA;;AAUA;;AAAA;;AAWA;;AAAA;;AAsBJ;;AAAA;;AAcA;;AAAA;;AAQA;;AAAA;;AAUA;;AAAA;;AAQA;;AAAA;;;;QDzFV46B,oB;;;;;;;AAMT,oCAAoBp8B,QAApB,EAA0DuC,OAA1D,EAA8E;AAAA;;AAAA;;AAC1E;AADgB,iBAAAvC,QAAA,GAAAA,QAAA;AAAsC,iBAAAuC,OAAA,GAAAA,OAAA;AAH1D;;AACO,iBAAAo4B,SAAA,GAAoB,EAApB;AAEuE;AAE7E;;;;mCAEc;AAAA;;AACX,eAAK36B,QAAL,CAAc4F,KAAd,CAAoBlF,WAApB,CAAgCmG,IAAhC,CAAqC,6DAAM,UAACC,CAAD;AAAA,mBAAOA,CAAP;AAAA,WAAN,CAArC,EAAsDnG,SAAtD,CAAgE,YAAM;AAClE,gBAAM2T,IAAI,GAAS,QAAI,CAACtU,QAAL,CAAc4F,KAAd,CAAoBC,OAAvC;AACA,gBAAM4tB,SAAS,GAAGnf,IAAI,CAACmf,SAAL,CAAevvB,GAAf,CACd,UAACyB,KAAD;AAAA,qBACI,QAAI,CAAC3F,QAAL,CAAc4F,KAAd,CAAoBL,IAApB,CAAyBI,KAAzB,KACA,IAAI,2EAAJ,CAAS;AAAEA,qBAAK,EAALA,KAAF;AAASpB,oBAAI,EAAEoB,KAAK,CAAC2iB,KAAN,CAAY,GAAZ,EAAiB,CAAjB;AAAf,eAAT,CAFJ;AAAA,aADc,CAAlB;AAKA,oBAAI,CAACqS,SAAL,GAAiB,CAACrmB,IAAD,EAAO/E,MAAP,CAAckkB,SAAd,CAAjB;AACH,WARD;AASH;AAED;;;;;AAsCA;;;0CAGsB;AAAA;;AAClB,cAAM/rB,GAAG,GAAG,KAAKnF,OAAL,CAAae,IAAb,CACR,0HADQ,EAER;AACIkF,iBAAK,EAAE,MADX;AAEIsH,kBAAM,EAAE,MAFZ;AAGIvH,oBAAQ,EAAE,MAHd;AAIIhF,gBAAI,EAAE;AACFE,oBAAM,EAAE,KAAK4D,IAAL,CAAUC,QAAV,CAAmBjD,UAAnB,CAA8BkD,KADpC;AAEF5D,kBAAI,EAAE,KAAK0D,IAAL,CAAUC,QAAV,CAAmB3D,IAAnB,CAAwB4D,KAF5B;AAGF3D,sBAAQ,EAAE,KAAKyD,IAAL,CAAUC,QAAV,CAAmB1D,QAAnB,CAA4B2D,KAHpC;AAIF9C,kBAAI,EAAE,KAAK4C,IAAL,CAAUC,QAAV,CAAmB5C,SAAnB,CAA6B6C,KAJjC;AAKF+H,sBAAQ,EAAE;AALR;AAJV,WAFQ,CAAZ;;AAeA,eAAK7O,YAAL,CACI,YADJ,EAEIiH,GAAG,CAACqB,iBAAJ,CAAsBrG,KAAtB,CAA4B/B,SAA5B,CAAsC,UAAC+B,KAAD,EAAW;AAC7C;AACA,gBAAIA,KAAK,CAACsG,MAAN,KAAiB,MAArB,EAA6B;AACzB,kBAAI3E,UAAU,GAAG,QAAI,CAACgD,IAAL,CAAUC,QAAV,CAAmBjD,UAAnB,CAA8BkD,KAA/C;AACAlD,wBAAU,GAAG3B,KAAK,CAAC+E,QAAnB;;AACA,sBAAI,CAACJ,IAAL,CAAUC,QAAV,CAAmBjD,UAAnB,CAA8BiE,QAA9B,CAAuC,0FAAOjE,UAAP,EAAmB,IAAnB,CAAvC;;AACAqD,iBAAG,CAAClE,KAAJ;;AACA,sBAAI,CAACnC,KAAL,CAAW,YAAX;AACH;AACJ,WATD,CAFJ;AAaH;AAED;;;;;;8CAG6B;AAAA;;AACzB,cAAMqG,GAAG,GAAG,KAAKnF,OAAL,CAAae,IAAb,CACR,qHADQ,EAER;AACIkF,iBAAK,EAAE,MADX;AAEIsH,kBAAM,EAAE,MAFZ;AAGIvH,oBAAQ,EAAE,MAHd;AAIIhF,gBAAI,EAAE;AACFwS,qBAAO,EAAE,KAAK1O,IAAL,CAAUC,QAAV,CAAmBuH,UAAnB,CAA8BtH,KADrC;AAEF5D,kBAAI,EAAE,KAAK0D,IAAL,CAAUC,QAAV,CAAmB3D,IAAnB,CAAwB4D;AAF5B;AAJV,WAFQ,CAAZ;;AAYA,eAAK9G,YAAL,CACI,YADJ,EAEIiH,GAAG,CAACqB,iBAAJ,CAAsBrG,KAAtB,CAA4B/B,SAA5B,CAAsC,UAAC+B,KAAD,EAAW;AAC7C;AACA,gBAAIA,KAAK,CAACsG,MAAN,KAAiB,MAArB,EAA6B;AACzB,sBAAI,CAAC3B,IAAL,CAAUC,QAAV,CAAmBuH,UAAnB,CAA8BvG,QAA9B,CACI5F,KAAK,CAAC+E,QAAN,IAAkB/E,KAAK,CAAC+E,QAAN,CAAesH,MAAf,KAA0B,MAA5C,GAAqDrM,KAAK,CAAC+E,QAA3D,GAAsE,EAD1E;;AAGAC,iBAAG,CAAClE,KAAJ;;AACA,sBAAI,CAACnC,KAAL,CAAW,YAAX;AACH;AACJ,WATD,CAFJ;AAaH;AAED;;;;;;2CAG0B;AAAA;;AACtB,cAAMqG,GAAG,GAAG,KAAKnF,OAAL,CAAae,IAAb,CAAyC,8GAAzC,EAAgE;AACxEkF,iBAAK,EAAE,MADiE;AAExEsH,kBAAM,EAAE;AAFgE,WAAhE,CAAZ;;AAIA,eAAKrP,YAAL,CACI,UADJ,EAEIiH,GAAG,CAACqB,iBAAJ,CAAsBrG,KAAtB,CAA4B/B,SAA5B,CAAsC,UAAC+B,KAAD,EAAW;AAC7C;AACA,gBAAIA,KAAK,CAACsG,MAAN,KAAiB,MAArB,EAA6B;AACzB,kBAAMxD,SAAS,GAAG,QAAI,CAAC6B,IAAL,CAAUC,QAAV,CAAmB9B,SAAnB,CAA6B+B,KAA/C;AACA/B,uBAAS,CAACsE,IAAV,CAAepH,KAAK,CAAC+E,QAArB;;AACA,sBAAI,CAACJ,IAAL,CAAUC,QAAV,CAAmB9B,SAAnB,CAA6B8C,QAA7B,CAAsC,0FAAO9C,SAAP,EAAkB,OAAlB,CAAtC;;AACAkC,iBAAG,CAAClE,KAAJ;;AACA,sBAAI,CAACnC,KAAL,CAAW,UAAX;AACH;AACJ,WATD,CAFJ;AAaH;;;4BA3HoB;AACjB,cAAMwN,UAAU,GAAG,KAAKxH,IAAL,CAAUC,QAAV,CAAmBuH,UAAnB,GACb,KAAKxH,IAAL,CAAUC,QAAV,CAAmBuH,UAAnB,CAA8BtH,KADjB,GAEb,IAFN;AAGA,cAAMuO,OAAO,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,EAA4B,UAA5B,EAAwC,SAAxC,CAAhB;;AACA,cAAI,CAACjH,UAAD,IAAe,CAACA,UAAU,CAACE,MAA3B,IAAsCF,UAAU,CAACE,MAAX,IAA6B+G,OAAO,CAACjS,MAA/E,EAAuF;AACnF,mBAAO,eAAP;AACH;;AACD,cAAMkL,MAAM,GACR,OAAOF,UAAU,CAACE,MAAlB,KAA6B,QAA7B,GAAwCF,UAAU,CAACE,MAAnD,GAA4D+G,OAAO,CAACjH,UAAU,CAACE,MAAZ,CADvE;AAEA,cAAM7J,GAAG,GAAG2J,UAAU,CAAC3J,GAAX,mBACG,kCAAK,CAAC2J,UAAU,CAAC3J,GAAZ,CAAL,CAAsBE,MAAtB,CAA6B,aAA7B,CADH,IAEN,SAFN;AAGA,2BAAU2J,MAAV,cAAoB7J,GAApB;AACH;AAED;;;;4BACmB;AACf,iBAAO,KAAKlF,QAAL,CAAcuJ,OAAd,CAAsB,uBAAtB,KAAkD,KAAzD;AACH;AAED;;;;4BACwB;AACpB,iBAAO,KAAKvJ,QAAL,CAAcuJ,OAAd,CAAsB,2BAAtB,KAAsD,EAA7D;AACH;AAED;;;;4BACiB;AACb,cAAM9F,MAAM,GAAG,KAAK4D,IAAL,CAAUC,QAAV,CAAmBhC,SAAnB,CAA6BiC,KAA5C;;AACA,cAAMpD,KAAK,GAAG,KAAKnE,QAAL,CAAc+D,MAAd,CAAqBwB,IAArB,CAA0B9B,MAAM,CAAC,CAAD,CAAhC,CAAd;;AACA,iBAAOA,MAAM,CAACI,MAAP,KAAkB,CAAlB,GACDM,KAAK,CAACI,IADL,GAEDd,MAAM,CAACI,MAAP,GAAgB,CAAhB,aACGJ,MAAM,CAACI,MADV,wBAEA,oBAJN;AAKH;;;;MA1DqC,6D;;;uBAA7Bu4B,oB,EAAoB,gJ,EAAA,oI;AAAA,K;;;YAApBA,oB;AAAoB,qC;AAAA;AAAA;AAAA,O;AAAA,0F;AAAA,c;AAAA,a;AAAA,69C;AAAA;AAAA;AC3BjC;;;;AAA0B;;;;;;;;;sED2BbA,oB,EAAoB;cALhC,uDAKgC;eALtB;AACP96B,kBAAQ,EAAE,gBADH;AAEPC,qBAAW,EAAE,+BAFN;AAGPC,mBAAS,EAAE,CAAC,+BAAD;AAHJ,S;AAKsB,Q;;;;;;;;gBAE5B;;;;;;;;;;;;;;;;;;;;AE7BL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEQ;;AACI;;AAAA;;AAIgB;;AAEhB;;AACI;;AAAA;;AAAA;;AAOA;;AAAA;;AAAmE;;AACvE;;AACJ;;;;;;AAdQ;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeR;;AACI;;AAAA;;AAIe;;AAEf;;AACI;;AAAA;;AAAA;;AAOA;;AAAA;;AAAiE;;AACrE;;AACJ;;;;;;AAdQ;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeR;;AACI;;AAAA;;AAIU;;AAAe;;AAAA;;AAEzB;;AACI;;AAAA;;AAAA;;AACA;;AAAA;;AAAiE;;AACrE;;AACJ;;;;;;AARQ;;AAAA;;;;;;AAzChB;;AACI;;AACI;;AAkBA;;AAkBA;;AAYJ;;AACJ;;;;;;AAlDU;;AAAA;;AACiB;;AAAA;;AAkBA;;AAAA;;AAkBA;;AAAA;;;;QD9Bd66B,iB;;;;;uBAAAA,iB;AAAiB,K;;;YAAjBA,iB;AAAiB,gC;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,se;AAAA;AAAA;ACR9B;;;;AAAuB;;;;;;;;;sEDQVA,iB,EAAiB;cAL7B,uDAK6B;eALnB;AACT/6B,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,4BAFJ;AAGTC,mBAAS,EAAE,CAAC,4BAAD;AAHF,S;AAKmB,Q;;gBAEzB;;;;;;;;;;;;;;;;;;;;AEVL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACCI;;AAAoD;;AAAkB;;;;;;AAAvC;;AAAqB;;AAAA;;;;;;AACpD;;;;;;;;AAAiC;;;;;;AAFrC;;AACI;;AACA;;AACJ;;;;;;AAFO;;AAAA;;AACE;;AAAA;;;;QDOI86B,a;;;;;;;;;;;;;;MAAsB,6D;;;6CAAtBA,a;AAAa,K;;;YAAbA,a;AAAa,+B;AAAA;AAAA;AAAA,O;AAAA,0F;AAAA,c;AAAA,a;AAAA,6H;AAAA;AAAA;ACT1B;;;;AAAsB;;;;;;;;yGDSTA,a;;;;;sEAAAA,a,EAAa;cALzB,uDAKyB;eALf;AACPh7B,kBAAQ,EAAE,UADH;AAEPC,qBAAW,EAAE,uBAFN;AAGPC,mBAAS,EAAE,CAAC,uBAAD;AAHJ,S;AAKe,Q;;gBACrB;;;;;;;;;;;;;;;;;;;;AEVL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACKoB;;AAAsD;;AAAkB;;;;;;AAAvC;;AAAqB;;AAAA;;;;;;AACtD;;;;;;;;AAAkC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAItC;;AACI;;AACI;;AAAA;;AAQA;;AACA;;AACI;;AAAA;;AAAA;;AAOA;;AAAA;;AACyB;;AAE7B;;AACJ;;AACA;;AACI;;AAAA;;AAQA;;AACA;;AACI;;AAAA;;AAMI;AAAA;;AAAA;;AAAA;AAAA;;AANJ;;AAQA;;AAAA;;AACiC;;AAErC;;AACJ;;AACJ;;;;;;AA5CY;;AAAA;;AAuBA;;AAAA;;;;;;;;;;;;;;;;;;;;AAuBhB;;AACI;;AAAmB;AAAA;;AAAA;;AAAA;AAAA;;AAAnB;;AAA+D;;AACnE;;;;;;;;;;;;;;;;;;AAKR;;AACI;;AACI;;AACJ;;AACA;;AAAA;;AAA2E;;AAC/E;;;;QD3DS+6B,c;;;;;;;AAWT,8BAAoBv8B,QAApB,EAAkD;AAAA;;AAAA;;AAC9C;AADgB,iBAAAA,QAAA,GAAAA,QAAA;AAA8B;AAEjD;;;;mCAEc;AAAA;;AACX,eAAK2C,OAAL,GAAe,IAAf;AACA,eAAK0E,IAAL,GAAY,IAAI,wDAAJ,CAAc;AACtBm1B,oBAAQ,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,CAAC,0DAAWxmB,QAAZ,CAApB,CADY;AAEtBymB,oBAAQ,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,EAAoB,CAAC,0DAAWzmB,QAAZ,CAApB;AAFY,WAAd,CAAZ;;AAIA,eAAKhW,QAAL,CAAcU,WAAd,CAA0BmG,IAA1B,CAA+B,6DAAM,UAAAC,CAAC;AAAA,mBAAIA,CAAJ;AAAA,WAAP,CAA/B,EAA8CnG,SAA9C,CAAwD,YAAM;AAC1D,oBAAI,CAACgC,OAAL,GAAe,KAAf;AACA,oBAAI,CAAC+5B,IAAL,GAAY,QAAI,CAAC18B,QAAL,CAAcuJ,OAAd,CAAsB,gBAAtB,KAA2C;AAAErG,kBAAI,EAAE;AAAR,aAAvD;AACH,WAHD;AAIH;AAED;;;;gCACe;AAAA;;AACX,eAAKP,OAAL,GAAe,IAAf;AACA,cAAM0E,IAAI,GAAG,KAAKA,IAAL,CAAUE,KAAvB;;AACA,eAAKvH,QAAL,CAAc4F,KAAd,CAAoB+2B,KAApB,CAA0B;AACtBH,oBAAQ,EAAEn1B,IAAI,CAACm1B,QADO;AAEtBC,oBAAQ,EAAEp1B,IAAI,CAACo1B;AAFO,WAA1B,EAGG;AAAEp1B,gBAAI,EAAE;AAAR,WAHH,EAGmBhJ,IAHnB,CAGwB,YAAM;AAC1B,oBAAI,CAACsE,OAAL,GAAe,KAAf;AACH,WALD,EAKG,YAAM;AACL,oBAAI,CAACA,OAAL,GAAe,KAAf;;AACA,oBAAI,CAAC0E,IAAL,CAAUC,QAAV,CAAmBm1B,QAAnB,CAA4BG,SAA5B,CAAsC;AAAEpV,mBAAK,EAAE;AAAT,aAAtC;AACH,WARD;AASH;;;;MAxC+B,6D;;;uBAAvB+U,c,EAAc,gJ;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA;AAAA;;;;;;;;;;;;;;;;ACb3B;;AACI;;AACI;;AACI;;AACI;;AACI;;AACA;;AACJ;;AACJ;;AACA;;AACI;;AAiDJ;;AACA;;AAGJ;;AACJ;;AACJ;;AACA;;;;;;AAhEc;;AAAA;;AACkB;;AAAA;;AAET;;AAAA;;AACE;;AAAA;;AAIK;;AAAA,yFAAoC,UAApC,EAAoC,GAApC;;AAkDE;;AAAA;;;;;;;;;;sED/CnBA,c,EAAc;cAL1B,uDAK0B;eALhB;AACPj7B,kBAAQ,EAAE,WADH;AAEPC,qBAAW,EAAE,wBAFN;AAGPC,mBAAS,EAAE,CAAC,wBAAD;AAHJ,S;AAKgB,Q;;;;;;gBAStB,uD;iBAAU,Y,EAAc;AAAE,sBAAQ;AAAV,W;;;;;;;;;;;;;;;;;;;;AEtB7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACAA;;AAMI;AAAA;;AAAA;;AAAA;;AAAU,iBAAAyQ,MAAA;AAAsB,iBAAF,cAAS,KAAP;AAAY,SAA5C;;AAEA;;AACJ;;;;;;;;;AAJI;;AAHA;;AAMU;;AAAA;;;;;;;;;;;QDMD4qB,mB;;;;;;;AALb;AAAA;;AAAA;;;AAMI;;AACgB,iBAAAC,OAAA,GAA0B,EAA1B;AAChB;;AACiB,iBAAA7qB,MAAA,GAAS,IAAI,0DAAJ,EAAT;AATrB;AAkBC;;;;gCALkB;AAAA;;AACX,eAAKpR,OAAL,CAAa,OAAb,EAAsB,YAAM;AACxB,oBAAI,CAACqf,IAAL,GAAY,KAAZ;AACH,WAFD;AAGH;;;;MAZoC,6D;;;mDAA5B2c,mB;AAAmB,K;;;YAAnBA,mB;AAAmB,oC;AAAA;AAAA;AAAA,O;AAAA;AAAA;AAAA,O;AAAA,0F;AAAA,c;AAAA,a;AAAA,iP;AAAA;AAAA;ACdhC;;AAUA;;AAAwD;AAAA;AAAA,aAAuB,OAAvB,EAAuB;AAAA,8BAAwB,IAAAr5B,KAAA,EAAxB,GAAkC,EAAlC;AAAoC,WAA3D,EAA2D,KAA3D,EAA2D,6DAA3D;;AACpD;;AACJ;;;;AARI;;AAMgC;;AAAA;;AACtB;;AAAA;;;;;;;+GDGDq5B,mB;;;;;sEAAAA,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACPv7B,kBAAQ,EAAE,eADH;AAEPC,qBAAW,EAAE,8BAFN;AAGPC,mBAAS,EAAE,CAAC,8BAAD;AAHJ,S;AAKqB,Q;;gBAE3B;;;gBAEA;;;;;;;;;;;;;;;;;;;;AElBL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACaI;;AACI;;AACJ;;;;;;;;;;;;QDPSu7B,kB;;;;;;;AALb;AAAA;;AAAA;;;AAcI;;AACiB,iBAAAC,WAAA,GAAc,IAAI,0DAAJ,EAAd;AAfrB;AAgCC;;;;oCAbsBt5B,O,EAAsB;AACrC;AACA,cAAIA,OAAO,CAACu5B,SAAR,IAAqB,KAAKA,SAA9B,EAAyC;AACrC,iBAAKC,UAAL;AACH;AACJ;;;qCAEmB;AAChB;AACA,cAAI,KAAKC,WAAL,IAAoB,KAAKA,WAAL,CAAiB1sB,aAAzC,EAAwD;AACpD,iBAAK0sB,WAAL,CAAiB1sB,aAAjB,CAA+BypB,KAA/B;AACH;AACJ;;;;MA1BmC,6D;;;kDAA3B6C,kB;AAAkB,K;;;YAAlBA,kB;AAAkB,kC;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACR/B;;AAAoC;AAAA,mBAAS,IAAAG,UAAA,EAAT;AAAqB,WAArB,EAAsB,OAAtB,EAAsB;AAAA,mBAAU,IAAAA,UAAA,EAAV;AAAsB,WAA5C;;AAChC;;AACI;;AACJ;;AACA;;AACI;;AAEI;AAAA;AAAA,aAAmB,eAAnB,EAAmB;AAAA,mBACF,IAAAF,WAAA,aADE;AACsB,WADzC;;AAFJ;;AAOJ;;AACA;;AAGJ;;;;AAdkB;;AAAA;;AAKN;;AAAA,yFAAmB,aAAnB,EAAmB,8BAAnB;;AAMY;;AAAA;;;;;;;8GDLXD,kB;;;;;sEAAAA,kB,EAAkB;cAL9B,uDAK8B;eALpB;AACPz7B,kBAAQ,EAAE,aADH;AAEPC,qBAAW,EAAE,4BAFN;AAGPC,mBAAS,EAAE,CAAC,4BAAD;AAHJ,S;AAKoB,Q;;gBAE1B,mD;iBAAM,O;;;gBAEN;;;gBAEA;;;gBAEA;;;gBAEA;;;gBAEA,uD;iBAAU,O,EAAS;AAAE,sBAAQ;AAAV,W;;;;;;;;;;;;;;;;;;;;AEpBxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACCI;;AAAsD;;AAAkB;;;;;;AAAvC;;AAAqB;;AAAA;;;;;;AACtD;;;;;;;;AAAkC;;;;;;;;;;AAGlC;;AAOI;;AACI;;AACA;;AACI;;AACJ;;AACA;;AAAkB;;AAAe;;AACrC;;AACJ;;;;;;AAVI;;AAMkB;;AAAA;;AAEI;;AAAA;;;;;;AAOlB;;AACI;;AACJ;;;;;;AAF+C;;AAC3C;;AAAA;;;;;;;;AAJhB;;AACI;;AACI;;AAAY;AAAA;;AAAA;;AAAA;AAAA;;AACR;;AAGJ;;AACJ;;AACJ;;;;;;AANoB;;AAAA;;AACI;;AAAA;;;;QDbX47B,gB;;;AAyBT,gCAAoBp9B,QAApB,EAAkD;AAAA;;AAA9B,aAAAA,QAAA,GAAAA,QAAA;AAAgC;AAvBpD;;;;;mCAyBQ,CAAW;;;4BAxBO;AACtB,iBAAO,KAAKA,QAAL,CAAcqG,YAAd,CAA2BD,QAAlC;AACH,S;0BAC0BA,Q,EAAoB;AAC3C,eAAKpG,QAAL,CAAcqG,YAAd,CAA2BD,QAA3B,GAAsCA,QAAtC;AACH;AAED;;;;4BACqB;AACjB,iBAAO,KAAKpG,QAAL,CAAcuJ,OAAd,CAAsB,wBAAtB,KAAmD,EAA1D;AACH;AAED;;;;4BACe;AACX,iBAAO,KAAKvJ,QAAL,CAAcuJ,OAAd,CAAsB,gBAAtB,CAAP;AACH;AAED;;;;4BACoB;AAChB,iBAAO,KAAKvJ,QAAL,CAAcqG,YAAd,CAA2BC,SAA3B,IAAwC,EAA/C;AACH;;;;;;;uBAvBQ82B,gB,EAAgB,gJ;AAAA,K;;;YAAhBA,gB;AAAgB,gC;AAAA,c;AAAA,a;AAAA,yhB;AAAA;AAAA;ACX7B;;AACI;;AACA;;AACJ;;AACA;;AACI;;AAeJ;;AACA;;;;AApBO;;AAAA;;AACE;;AAAA;;AAMD;;AAAA;;AAawB;;AAAA;;;;;;;;;;sEDVnBA,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACP97B,kBAAQ,EAAE,WADH;AAEPC,qBAAW,EAAE,0BAFN;AAGPC,mBAAS,EAAE,CAAC,0BAAD;AAHJ,S;AAKkB,Q;;;;;;;;;;;;;;;;;;;;;;AEX7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;QAca67B,qB;;;;;;;AAcT,qCAAoBr9B,QAApB,EAAkD;AAAA;;AAAA;;AAC9C;AADgB,iBAAAA,QAAA,GAAAA,QAAA;AAXpB;;AACiB,iBAAAs9B,UAAA,GAAa,IAAI,0DAAJ,EAAb;AAUiC;AAEjD;AARD;;;;;mCAUe;AAAA;;AACX,eAAKt9B,QAAL,CAAcU,WAAd,CAA0BmG,IAA1B,CAA+B,6DAAM,UAAAC,CAAC;AAAA,mBAAIA,CAAJ;AAAA,WAAP,CAA/B,EAA8CnG,SAA9C,CAAwD,YAAM;AAC1D,gBAAMgD,IAAI,GAAG,CAAEtD,YAAY,CAAC8uB,OAAb,CAAqB,gBAArB,CAAf;AACA;;AACA,gBAAIxrB,IAAI,IAAIA,IAAI,KAAK,QAAI,CAACA,IAA1B,EAAgC;AAC5B,sBAAI,CAAC9C,OAAL,CAAa,MAAb,EAAqB,YAAM;AACvB,wBAAI,CAAC8C,IAAL,GAAYA,IAAZ;;AACA,wBAAI,CAAC25B,UAAL,CAAgBr6B,IAAhB,CAAqB,QAAI,CAACU,IAA1B;AACH,eAHD,EAGG,EAHH;AAIH;AACJ,WATD;AAUH;AAED;;;;mCACkB4D,K,EAAe;AAC7B,cAAI5D,IAAI,GAAG,kCAAK,CAAC,KAAKA,IAAN,CAAL,CAAiBqG,OAAjB,CAAyB,GAAzB,CAAX;AACArG,cAAI,GAAGA,IAAI,CAACwB,GAAL,CAASoC,KAAT,EAAgB,GAAhB,CAAP;AACA,eAAK5D,IAAL,GAAYA,IAAI,CAACsG,OAAL,EAAZ;AACA,eAAKqzB,UAAL,CAAgBr6B,IAAhB,CAAqB,KAAKU,IAA1B;AACAtD,sBAAY,CAAC+R,OAAb,CAAqB,gBAArB,YAA0C,KAAKzO,IAA/C;AACH;AAED;;;;oCACmB;AACf,eAAKA,IAAL,GAAY,kCAAK,GAAGqG,OAAR,CAAgB,GAAhB,EAAqBC,OAArB,EAAZ;AACA,eAAKqzB,UAAL,CAAgBr6B,IAAhB,CAAqB,KAAKU,IAA1B;AACAtD,sBAAY,CAAC+R,OAAb,CAAqB,gBAArB,YAA0C,KAAKzO,IAA/C;AACH;;;0CAEwB;AACrB,eAAK45B,OAAL,CAAatE,SAAb;AACH;;;4BAxCsB;AACnB,cAAMt1B,IAAI,GAAG,kCAAK,CAAC,KAAKA,IAAN,CAAlB;AACA,iBAAO,CAACA,IAAI,CAAC0B,MAAL,CAAY,kCAAK,EAAjB,EAAqB,GAArB,CAAD,GAA6B1B,IAAI,CAACyB,MAAL,CAAY,aAAZ,CAA7B,GAA0D,EAAjE;AACH;;;;MAZsC,6D;;;uBAA9Bi4B,qB,EAAqB,gJ;AAAA,K;;;YAArBA,qB;AAAqB,sC;AAAA;AAAA;0EAMnB,qE,EAAgB,I;;;;;;;;;;;;;;;;;;;;;;;;ACpB/B;;AACI;;AACI;;AACJ;;AACA;;AACI;;AACI;;AAAwC;AAAA,mBAAU,IAAAG,UAAA,CAAW,IAAC,CAAZ,CAAV;AAAwB,WAAxB;;AACpC;;AAGJ;;AACA;;AAAkB;AAAA,mBAAY,IAAAC,SAAA,EAAZ;AAAuB,WAAvB;;AAAyB;;AAA6B;;AACxE;;AAAoC;AAAA,mBAAU,IAAAD,UAAA,CAAW,CAAX,CAAV;AAAuB,WAAvB;;AAChC;;AAGJ;;AACJ;;AACA;;AACI;;AACJ;;AACJ;;AACJ;;AACA;;AACI;;AAAuC;AAAA,mBAASlE,MAAM,CAACC,eAAP,EAAT;AAAiC,WAAjC;;AACnC;;AACI;AAAA;AAAA,aAAkB,eAAlB,EAAkB;AACD,gBAAA+D,UAAA;AAAyB,uBAAA9D,eAAA;AAAiB,WAD3D;;AAEH;;AACL;;AACJ;;;;;;AAtBoB;;AAAA;;AAGmC;;AAAA;;AAGnC;;AAAA;;AAI6B;;AAAA;;AAC3B;;AAAA;;AAOV;;AAAA;;;;;;;;;sEDZC6D,qB,EAAqB;cALjC,uDAKiC;eALvB;AACP/7B,kBAAQ,EAAE,iBADH;AAEPC,qBAAW,EAAE,gCAFN;AAGPC,mBAAS,EAAE,CAAC,gCAAD;AAHJ,S;AAKuB,Q;;;;;;gBAE7B;;;gBAEA;;;gBAEA,uD;iBAAU,qE,EAAgB;AAAE,sBAAQ;AAAV,W;;;;;;;;;;;;;;;;;;;;AEpB/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACCI;;AAA4D;;AAAc;;;;;;AAAd;;AAAA;;;;;;AADhE;;AACI;;AACJ;;;;;;;;AAFsC;;AACZ;;AAAA,6FAAqC,UAArC,EAAqC,GAArC;;;;;;AAGtB;;;;;;;;AAAK;;;;QDIIk8B,mB;;;;;;;;;4BAIU;AACf,cAAI,CAAC,KAAKppB,IAAV,EAAgB;AACZ,mBAAO,IAAP;AACH;;AACD,cAAM+T,KAAK,GAAG,KAAK/T,IAAL,CAAU/P,IAAV,CAAe+jB,KAAf,CAAqB,GAArB,CAAd;AACA,iBAAOD,KAAK,CAACxkB,MAAN,GAAe,CAAf,aACEwkB,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,CADF,SACgBA,KAAK,CAACA,KAAK,CAACxkB,MAAN,GAAe,CAAhB,CAAL,CAAwB,CAAxB,CADhB,IAED,KAAKyQ,IAAL,CAAU/P,IAAV,CAAek2B,KAAf,CAAqB,CAArB,EAAwB,CAAxB,CAFN;AAGH;;;;;;;uBAZQiD,mB;AAAmB,K;;;YAAnBA,mB;AAAmB,oC;AAAA;AAAA;AAAA,O;AAAA,c;AAAA,a;AAAA,uK;AAAA;AAAA;ACRhC;;AAGA;;;;AAHyB;;;;;;;;;;sEDQZA,mB,EAAmB;cAL/B,uDAK+B;eALrB;AACPp8B,kBAAQ,EAAE,eADH;AAEPC,qBAAW,EAAE,8BAFN;AAGPC,mBAAS,EAAE,CAAC,8BAAD;AAHJ,S;AAKqB,Q;;gBAE3B;;;;;;;;;;;;;;;;;;;;AEVL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAcA,QAAYm8B,eAAZ;;AAAA,eAAYA,eAAZ,EAA2B;AACvB;AACA;AACA;AACA;AACH,KALD,EAAYA,eAAe,KAAfA,eAAe,MAA3B;;QAUaC,0B;;;;;;;AAcT,0CAAoBC,YAApB,EAAuDC,SAAvD,EAA6E;AAAA;;AAAA;;AACzE;AADgB,iBAAAD,YAAA,GAAAA,YAAA;AAAmC,iBAAAC,SAAA,GAAAA,SAAA;AAZvD;;AACS,iBAAAC,SAAA,GAA6BJ,eAAe,CAACK,CAA7C;AAKT;;AACO,iBAAAC,WAAA,GAAwC;AAAE5S,WAAC,EAAE,CAAL;AAAQG,WAAC,EAAE;AAAX,SAAxC;AAKsE;AAE5E;;;;oCAEkB9nB,O,EAAsB;AACrC,cAAIA,OAAO,CAACw6B,eAAR,IAA2B,KAAKA,eAApC,EAAqD;AACjD,iBAAKC,OAAL,GAAe,KAAKN,YAAL,CAAkBM,OAAlB,CAA0B1tB,aAA1B,CAAwC2tB,OAAxC,CACX,KAAKF,eADM,CAAf;AAGH;AACJ;;;6CAEwB;AAAA;;AACrB,eAAKz9B,YAAL,CACI,YADJ,EAEI,KAAKsK,KAAL,CAAWrH,OAAX,CAAmB/C,SAAnB,CAA6B,UAACoK,KAAD,EAA+B;AACxD,gBAAMV,IAAI,GAAGU,KAAK,CAACszB,OAAN,EAAb;AACAh0B,gBAAI,CAAC0D,OAAL,CAAa,UAACrI,CAAD,EAAIiE,KAAJ,EAAc;AACvB,sBAAI,CAAClJ,YAAL,qBACiBkJ,KADjB,GAEI,QAAI,CAACm0B,SAAL,CAAexvB,MAAf,CAAsB5I,CAAC,CAACy4B,OAAF,CAAU1tB,aAAhC,EAA+C,WAA/C,EAA4D,YAAM;AAC9D,wBAAI,CAAChQ,YAAL,CACI,cADJ,EAEI,QAAI,CAACq9B,SAAL,CAAexvB,MAAf,CAAsB,QAAtB,EAAgC,SAAhC,EAA2C;AAAA,yBAAM,QAAI,CAACgwB,MAAL,EAAN;AAAA,iBAA3C,CAFJ;;AAIA,wBAAI,CAACC,MAAL;AACH,eAND,CAFJ;;AAUA,sBAAI,CAAC99B,YAAL,2BACuBkJ,KADvB,GAEI,QAAI,CAACm0B,SAAL,CAAexvB,MAAf,CAAsB5I,CAAC,CAACy4B,OAAF,CAAU1tB,aAAhC,EAA+C,YAA/C,EAA6D,YAAM;AAC/D,wBAAI,CAAChQ,YAAL,CACI,cADJ,EAEI,QAAI,CAACq9B,SAAL,CAAexvB,MAAf,CAAsB,QAAtB,EAAgC,UAAhC,EAA4C;AAAA,yBAAM,QAAI,CAACgwB,MAAL,EAAN;AAAA,iBAA5C,CAFJ;;AAIA,wBAAI,CAACC,MAAL;AACH,eAND,CAFJ;AAUH,aArBD;AAsBH,WAxBD,CAFJ;AA4BH;AAED;;;;iCACgB;AAAA;;AACZ,cAAI,KAAKJ,OAAT,EAAkB;AACd,iBAAK19B,YAAL,CACI,QADJ,EAEI,KAAKq9B,SAAL,CAAexvB,MAAf,CAAsB,KAAK6vB,OAA3B,EAAoC,QAApC,EAA8C;AAAA,qBAAM,QAAI,CAACK,kBAAL,EAAN;AAAA,aAA9C,CAFJ;AAIH;AACJ;AAED;;;;iCACgB;AACZ,eAAKn9B,KAAL,CAAW,QAAX;AACH;AAED;;;;;;6CAG6B;AAAA;;AACzB,eAAKR,OAAL,CACI,kBADJ,EAEI,YAAM;AACF,gBAAM49B,MAAM,GAAG;AAAEpT,eAAC,EAAE,QAAI,CAAC8S,OAAL,CAAaO,UAAlB;AAA8BlT,eAAC,EAAE,QAAI,CAAC2S,OAAL,CAAaQ;AAA9C,aAAf;;AACA,gBACK,CAAC,QAAI,CAACZ,SAAL,KAAmBJ,eAAe,CAACiB,IAAnC,IACE,QAAI,CAACb,SAAL,KAAmBJ,eAAe,CAACkB,CADtC,KAEGJ,MAAM,CAACjT,CAAP,KAAa,QAAI,CAACyS,WAAL,CAAiBzS,CAFlC,IAGC,CAAC,QAAI,CAACuS,SAAL,KAAmBJ,eAAe,CAACiB,IAAnC,IACE,QAAI,CAACb,SAAL,KAAmBJ,eAAe,CAACK,CADtC,KAEGS,MAAM,CAACpT,CAAP,KAAa,QAAI,CAAC4S,WAAL,CAAiB5S,CANtC,EAOE;AACG,sBAAI,CAACwS,YAAL,CAAkBiB,YAAlB,CAAuCC,iBAAvC;;AACA,sBAAI,CAAClB,YAAL,CAAkBiB,YAAlB,CAAuCE,SAAvC,CAAiDjxB,OAAjD,CAAyD,UAAArI,CAAC;AAAA,uBACvDA,CAAC,CAACu5B,WAAF,KAAkBv5B,CAAC,CAACq5B,iBAAF,EAAlB,GAA0C,IADa;AAAA,eAA1D;AAGJ;;AACD,oBAAI,CAACd,WAAL,GAAmBQ,MAAnB;AACH,WAlBL,EAmBI,EAnBJ;AAqBH;;;;MAjG2C,6D;;;uBAAnCb,0B,EAA0B,mI,EAAA,wH;AAAA,K;;;YAA1BA,0B;AAA0B,iE;AAAA;AAAA;iFAYlB,8D,EAAO,K;;;;;;;;;;;;;;;;;;sEAZfA,0B,EAA0B;cAHtC,uDAGsC;eAH5B;AACPt8B,kBAAQ,EAAE;AADH,S;AAG4B,Q;;;;;;;;gBAGlC;;;gBAEA;;;gBAOA,6D;iBAAgB,8D;;;;;;;;;;;;;;;;;;;;ACpCrB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAEO,QAAM49B,0BAA0B,GAAG,oEAAQ,MAAR,EAAgB,CACtD,uEAAW,QAAX,EAAqB,CACjB,kEAAM;AAAEC,aAAO,EAAE,CAAX;AAAcrvB,YAAM,EAAE;AAAtB,KAAN,CADiB,EAEjB,oEAAQ,GAAR,EAAa,kEAAM;AAAEqvB,aAAO,EAAE,CAAX;AAAcrvB,YAAM,EAAE;AAAtB,KAAN,CAAb,CAFiB,CAArB,CADsD,EAKtD,uEAAW,QAAX,EAAqB,CACjB,kEAAM;AAAEqvB,aAAO,EAAE,CAAX;AAAcrvB,YAAM,EAAE;AAAtB,KAAN,CADiB,EAEjB,oEAAQ,GAAR,EAAa,kEAAM;AAAEqvB,aAAO,EAAE,CAAX;AAAcrvB,YAAM,EAAE;AAAtB,KAAN,CAAb,CAFiB,CAArB,CALsD,CAAhB,CAAnC;AAWA,QAAMsvB,8BAA8B,GAAG,oEAAQ,MAAR,EAAgB,CAC1D,kEAAM,MAAN,EAAc,kEAAM;AAAED,aAAO,EAAE,CAAX;AAAcrvB,YAAM,EAAE;AAAtB,KAAN,CAAd,CAD0D,EAE1D,kEAAM,MAAN,EAAc,kEAAM;AAAEqvB,aAAO,EAAE,CAAX;AAAcrvB,YAAM,EAAE,CAAtB;AAAyB,wBAAkB;AAA3C,KAAN,CAAd,CAF0D,EAG1D,uEAAW,eAAX,EAA4B,oEAAQ,eAAR,CAA5B,CAH0D,CAAhB,CAAvC;;;;;;;;;;;;;;;;ACZP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;;;AACO,QAAMuvB,OAAO,GAAG,WAAhB;AACP;;AACO,QAAMC,YAAY,GAAG,OAArB;AACP;;AACO,QAAMC,KAAK,GAAG,kCAAK,EAAnB;;;;;;;;;;;;;;;;ACLP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAQA39B,UAAM,CAACwkB,OAAP,GAAiBxkB,MAAM,CAACwkB,OAAP,IAAkB,EAAnC;AACAxkB,UAAM,CAACwkB,OAAP,CAAegH,OAAf,GAAyBxrB,MAAM,CAACwkB,OAAP,CAAegH,OAAf,IAA0B,EAAnD;AACAxrB,UAAM,CAACwkB,OAAP,CAAeoZ,QAAf,GAA0B59B,MAAM,CAACwkB,OAAP,CAAeoZ,QAAf,IAA2B,EAArD;AAEO,QAAMC,aAAa,GAAGjqB,KAAK,CAAC,GAAD,CAAL,CACxBC,IADwB,CACnB,CADmB,EAExBvR,GAFwB,CAEpB,UAAAwB,CAAC,EAAI;AACN,UAAMg6B,KAAK,GAAG,4EAAOlqB,KAAK,CAAC,+EAAU,CAAV,CAAD,CAAL,CAChBC,IADgB,CACX,CADW,EAEhBvR,GAFgB,CAEZ,UAAAwB,CAAC;AAAA,eAAI,yDAAYwG,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,yDAAY9gB,MAAvC,CAAZ,CAAJ;AAAA,OAFW,CAAP,EAE8D,IAF9D,CAAd,CADM,CAIN;;AACA,UAAMa,SAAS,GAAG,+EAAU,IAAV,IAAkB,EAAlB,KAAyB,CAAzB,GAA6B,uDAAW,uDAAWb,MAAX,GAAoB,CAA/B,CAA7B,GAAiE,uDAAW,+EAAU,uDAAWA,MAArB,CAAX,CAAnF,CALM,CAMN;;AACA,UAAM2B,SAAS,GAAG,4EACdgQ,KAAK,CAAC,+EAAU,EAAV,CAAD,CAAL,CACKC,IADL,CACU,CADV,EAEKvR,GAFL,CAES,UAAAwB,CAAC;AAAA,eAAI,uDAAW,+EAAU,uDAAW7B,MAArB,CAAX,CAAJ;AAAA,OAFV,CADc,EAId,OAJc,CAAlB;AAMA,aAAO,6GAAoB;AACvBa,iBAAS,EAATA,SADuB;AAEvBc,iBAAS,EAATA,SAFuB;AAGvBvB,gBAAQ,EAAEy7B,KAAK,CAACx7B,GAAN,CAAU,UAAAwB,CAAC;AAAA,iBAAIA,CAAC,CAACC,KAAN;AAAA,SAAX;AAHa,OAApB,CAAP;AAKH,KApBwB,CAAtB;;AAsBP,6DAAYoI,OAAZ,CAAoB,UAAArI,CAAC;AAAA,aAAIA,CAAC,CAAC8iB,QAAF,GAAaiX,aAAa,CAACh6B,MAAd,CAAqB,UAAA6hB,CAAC;AAAA,eAAIA,CAAC,CAACrjB,QAAF,CAAWmf,OAAX,CAAmB1d,CAAC,CAACC,KAArB,KAA+B,CAAnC;AAAA,OAAtB,CAAjB;AAAA,KAArB,E,CAEA;;;AACA/D,UAAM,CAACwkB,OAAP,CAAeoZ,QAAf,CAAwB11B,IAAxB,CAA6B;AACzBhL,UAAI,YAAK,gDAAL,cADqB;AAEzB2I,cAAQ,EAAEg4B,aAFe;AAGzB/f,YAAM,EAAE,KAHiB;AAIzBigB,cAAQ,EAAE,kBAAAj9B,KAAK,EAAI;AACf,YAAM4R,IAAI,GAAG,uDAAW,uDAAWzQ,MAAX,GAAoB,CAA/B,CAAb;AACA,YAAIN,IAAI,GAAG,CAACb,KAAK,CAACqc,YAAN,CAAmBpZ,KAApB,GACL85B,aAAa,CAACh6B,MAAd,CACI,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAAChB,SAAF,CAAYiB,KAAZ,KAAsB2O,IAAI,CAAC3O,KAA3B,IAAoCD,CAAC,CAAChB,SAAF,KAAgB4P,IAAI,CAAC3O,KAAzD,IAAkED,CAAC,CAACF,SAAF,CAAYb,MAAZ,CAAmB,UAAC0Z,CAAD,EAAIgF,CAAJ;AAAA,mBAAUhF,CAAC,IAAIgF,CAAC,CAAC1d,KAAF,KAAY2O,IAAI,CAAC3O,KAAhC;AAAA,WAAnB,EAA0D,KAA1D,CAAtE;AAAA,SADL,CADK,GAIL85B,aAAa,CAACh6B,MAAd,CACI,UAAAC,CAAC;AAAA,iBACDA,CAAC,CAAChB,SAAF,CAAYiB,KAAZ,KAAsBjD,KAAK,CAACqc,YAAN,CAAmBpZ,KAAzC,IACCD,CAAC,CAAChB,SAAF,KAAwBhC,KAAK,CAACqc,YAAN,CAAmBpZ,KAD5C,IAEID,CAAC,CAACF,SAAF,CAAYb,MAAZ,CAAmB,UAAC0Z,CAAD,EAAIgF,CAAJ;AAAA,mBAAUhF,CAAC,IAAIgF,CAAC,CAAC1d,KAAF,KAAYjD,KAAK,CAACqc,YAAN,CAAmBpZ,KAA9C;AAAA,WAAnB,EAAwE,KAAxE,CAHH;AAAA,SADL,CAJN,CAFe,CAYf;;AACA,YAAIjD,KAAK,CAACqc,YAAN,CAAmB6gB,IAAvB,EAA6B;AACzB,cAAMp0B,KAAK,GAAG,kCAAK,CAAC,CAAC9I,KAAK,CAACqc,YAAN,CAAmB6gB,IAApB,GAA2B,IAA5B,CAAnB;AACA,cAAM16B,GAAG,GAAGxC,KAAK,CAACqc,YAAN,CAAmB8gB,EAAnB,GAAwB,kCAAK,CAAC,CAACn9B,KAAK,CAACqc,YAAN,CAAmB8gB,EAApB,GAAyB,IAA1B,CAAL,CAAqCtzB,KAArC,CAA2C,GAA3C,CAAxB,GAA0Ef,KAAK,CAACe,KAAN,CAAY,GAAZ,CAAtF;AACAhJ,cAAI,GAAGA,IAAI,CAACkC,MAAL,CAAY,UAAAC,CAAC,EAAI;AACpB,gBAAMwf,SAAS,GAAG,kCAAK,CAACxf,CAAC,CAAC0b,WAAF,GAAgB,IAAjB,CAAL,CAA4BpX,OAA5B,CAAoC,GAApC,EAAyCqb,MAAzC,CAAgD,CAAhD,CAAlB;AACA,gBAAMF,OAAO,GAAG,kCAAK,CAACzf,CAAC,CAAC6b,SAAF,GAAc,IAAf,CAArB;AACA,mBAAQ2D,SAAS,CAACpY,OAAV,CAAkBtB,KAAlB,EAAyB,GAAzB,KAAiC0Z,SAAS,CAAC9Y,QAAV,CAAmBlH,GAAnB,EAAwB,GAAxB,CAAlC,IAAoEigB,OAAO,CAACrY,OAAR,CAAgBtB,KAAhB,EAAuB,GAAvB,KAA+B2Z,OAAO,CAAC/Y,QAAR,CAAiBlH,GAAjB,EAAsB,GAAtB,CAA1G;AACH,WAJM,CAAP;AAKH;;AACD,eAAO3B,IAAP;AACH;AA3BwB,KAA7B,E,CA8BA;;AACA3B,UAAM,CAACwkB,OAAP,CAAeoZ,QAAf,CAAwB11B,IAAxB,CAA6B;AACzBhL,UAAI,YAAK,gDAAL,kBADqB;AAEzB2I,cAAQ,EAAEg4B,aAFe;AAGzB/f,YAAM,EAAE,KAHiB;AAIzBigB,cAAQ,EAAE,kBAAAj9B,KAAK,EAAI;AACf,YAAIA,KAAK,CAACo9B,YAAN,CAAmBlhC,EAAvB,EAA2B;AACvB,cAAMkE,OAAO,GAAG28B,aAAa,CAACl6B,IAAd,CAAmB,UAAAG,CAAC;AAAA,mBAAIA,CAAC,CAAC9G,EAAF,KAAS8D,KAAK,CAACo9B,YAAN,CAAmBlhC,EAA5B,IAAkC8G,CAAC,CAAC4N,OAAF,KAAc5Q,KAAK,CAACo9B,YAAN,CAAmBlhC,EAAvE;AAAA,WAApB,CAAhB;;AACA,cAAIkE,OAAJ,EAAa;AACT,mBAAOA,OAAP;AACH,WAFD,MAEO;AACH,kBAAM;AAAE0P,oBAAM,EAAE,GAAV;AAAejB,qBAAO,EAAE;AAAxB,aAAN;AACH;AACJ,SAPD,MAOO;AACH,gBAAM;AAAEiB,kBAAM,EAAE,GAAV;AAAejB,mBAAO,EAAE;AAAxB,WAAN;AACH;AACJ;AAfwB,KAA7B,E,CAkBA;;AACA3P,UAAM,CAACwkB,OAAP,CAAeoZ,QAAf,CAAwB11B,IAAxB,CAA6B;AACzBhL,UAAI,YAAK,gDAAL,cADqB;AAEzB2I,cAAQ,EAAEg4B,aAFe;AAGzB/f,YAAM,EAAE,MAHiB;AAIzBigB,cAAQ,EAAE,kBAACj9B,KAAD,EAAW;AACjB,YAAIA,KAAK,CAACoD,IAAV,EAAgB;AACZpD,eAAK,CAACoD,IAAN,CAAWlH,EAAX,iBAAuB,+EAAU,OAAV,CAAvB;AACA8D,eAAK,CAACoD,IAAN,CAAWwN,OAAX,kBAA6B5Q,KAAK,CAACoD,IAAN,CAAWlH,EAAxC;AACA6gC,uBAAa,CAAC31B,IAAd,CAAmBpH,KAAK,CAACoD,IAAzB;;AACA,mEAAYiI,OAAZ,CAAoB,UAAA5J,KAAK;AAAA,mBAAIA,KAAK,CAACqkB,QAAN,GAAiBiX,aAAa,CAACh6B,MAAd,CAAqB,UAAA3C,OAAO;AAAA,qBAAIA,OAAO,CAACmB,QAAR,CAAiBmf,OAAjB,CAAyBjf,KAAK,CAACwB,KAA/B,KAAyC,CAA7C;AAAA,aAA5B,CAArB;AAAA,WAAzB;;AACA,iBAAOjD,KAAK,CAACoD,IAAb;AACH,SAND,MAMO;AACH,gBAAM;AAAE0M,kBAAM,EAAE,GAAV;AAAejB,mBAAO,EAAE;AAAxB,WAAN;AACH;AACJ;AAdwB,KAA7B,E,CAiBA;;AACA3P,UAAM,CAACwkB,OAAP,CAAeoZ,QAAf,CAAwB11B,IAAxB,CAA6B;AACzBhL,UAAI,YAAK,gDAAL,kBADqB;AAEzB2I,cAAQ,EAAEg4B,aAFe;AAGzB/f,YAAM,EAAE,KAHiB;AAIzBigB,cAAQ,EAAE,kBAACj9B,KAAD,EAAW;AACjB,YAAIA,KAAK,CAACo9B,YAAN,CAAmBlhC,EAAvB,EAA2B;AACvB,cAAM+K,KAAK,GAAG81B,aAAa,CAAC71B,SAAd,CAAwB,UAAAlE,CAAC;AAAA,mBAAIA,CAAC,CAAC9G,EAAF,KAAS8D,KAAK,CAACo9B,YAAN,CAAmBlhC,EAA5B,IAAkC8G,CAAC,CAAC4N,OAAF,KAAc5Q,KAAK,CAACo9B,YAAN,CAAmBlhC,EAAvE;AAAA,WAAzB,CAAd;;AACA,cAAI+K,KAAK,IAAI,CAAb,EAAgB;AACZ81B,yBAAa,CAAC91B,KAAD,CAAb,GAAuBjH,KAAK,CAACoD,IAA7B;;AACA,qEAAYiI,OAAZ,CAAoB,UAAArI,CAAC;AAAA,qBAAIA,CAAC,CAAC8iB,QAAF,GAAaiX,aAAa,CAACh6B,MAAd,CAAqB,UAAA6hB,CAAC;AAAA,uBAAKA,CAAC,CAACrjB,QAAH,CAAamf,OAAb,CAAqB1d,CAAC,CAACC,KAAvB,KAAiC,CAArC;AAAA,eAAtB,CAAjB;AAAA,aAArB;;AACA,mBAAOjD,KAAK,CAACoD,IAAb;AACH,WAJD,MAIO;AACH,kBAAM;AAAE0M,oBAAM,EAAE,GAAV;AAAejB,qBAAO,EAAE;AAAxB,aAAN;AACH;AACJ,SATD,MAUI,MAAM;AAAEiB,gBAAM,EAAE,GAAV;AAAejB,iBAAO,EAAE;AAAxB,SAAN;AACP;AAhBwB,KAA7B,E,CAmBA;;AACA3P,UAAM,CAACwkB,OAAP,CAAeoZ,QAAf,CAAwB11B,IAAxB,CAA6B;AACzBhL,UAAI,YAAK,gDAAL,kBADqB;AAEzB2I,cAAQ,EAAEg4B,aAFe;AAGzB/f,YAAM,EAAE,QAHiB;AAIzBigB,cAAQ,EAAE,kBAACj9B,KAAD,EAAW;AACjB,YAAIA,KAAK,CAACo9B,YAAN,CAAmBlhC,EAAvB,EAA2B;AACvB,cAAM+K,KAAK,GAAG81B,aAAa,CAAC71B,SAAd,CAAwB,UAAAlE,CAAC;AAAA,mBAAIA,CAAC,CAAC9G,EAAF,KAAS8D,KAAK,CAACo9B,YAAN,CAAmBlhC,EAA5B,IAAkC8G,CAAC,CAAC4N,OAAF,KAAc5Q,KAAK,CAACo9B,YAAN,CAAmBlhC,EAAvE;AAAA,WAAzB,CAAd;;AACA,cAAI+K,KAAK,IAAI,CAAb,EAAgB;AACZ81B,yBAAa,CAAC11B,MAAd,CAAqBJ,KAArB,EAA4B,CAA5B;;AACA,qEAAYoE,OAAZ,CAAoB,UAAArI,CAAC;AAAA,qBAAIA,CAAC,CAAC8iB,QAAF,GAAaiX,aAAa,CAACh6B,MAAd,CAAqB,UAAA6hB,CAAC;AAAA,uBAAIA,CAAC,CAACrjB,QAAF,CAAWmf,OAAX,CAAmB1d,CAAC,CAACC,KAArB,KAA+B,CAAnC;AAAA,eAAtB,CAAjB;AAAA,aAArB;AACH,WAHD,MAGO;AACH,kBAAM;AAAE6M,oBAAM,EAAE,GAAV;AAAejB,qBAAO,EAAE;AAAxB,aAAN;AACH;AACJ,SARD,MASI,MAAM;AAAEiB,gBAAM,EAAE,GAAV;AAAejB,iBAAO,EAAE;AAAxB,SAAN;AACP;AAfwB,KAA7B;;;;;;;;;;;;;;;;AC7HA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGA3P,UAAM,CAACwkB,OAAP,GAAiBxkB,MAAM,CAACwkB,OAAP,IAAkB,EAAnC;AACAxkB,UAAM,CAACwkB,OAAP,CAAegH,OAAf,GAAyBxrB,MAAM,CAACwkB,OAAP,CAAegH,OAAf,IAA0B,EAAnD;AACAxrB,UAAM,CAACwkB,OAAP,CAAeoZ,QAAf,GAA0B59B,MAAM,CAACwkB,OAAP,CAAeoZ,QAAf,IAA2B,EAArD;AAEO,QAAMO,cAAc,GAAG,CAAC;AAC3BnhC,QAAE,EAAE,aADuB;AAE3Boe,aAAO,EAAE,aAFkB;AAG3BzY,UAAI,EAAE,QAHqB;AAI3BmW,cAAQ,EAAE;AACN2R,sBAAc,EAAE;AACZ6B,kBAAQ,EAAE,kBADE;AAEZ+E,eAAK,EAAE;AACH+M,qBAAS,EAAE,YADR;AAEHC,mBAAO,EAAE,YAFN;AAGHC,qBAAS,EAAE;AAHR,WAFK;AAOZhyB,mBAAS,EAAE,EAPC;AAQZiyB,uBAAa,EAAE,QARH;AASZ/S,iBAAO,EAAE;AACLgT,yBAAa,EAAE;AADV,WATG;AAYZC,mBAAS,EAAE,QAZC;AAaZC,kBAAQ,EAAE,EAbE;AAcZv6B,kBAAQ,EAAE,EAdE;AAeZ2nB,wBAAc,EAAE;AACZ,2BAAe;AACX,iCAAmB;AADR;AADH,WAfJ;AAoBZU,uBAAa,EAAE,8BApBH;AAqBZvB,gBAAM,EAAE,CACJ;AACIiB,oBAAQ,EAAE,aADd;AAEIU,sBAAU,EAAE,SAFhB;AAGI+R,kBAAM,EAAE,CAHZ;AAIIzR,mBAAO,EAAE,0BAJb;AAKIC,sBAAU,EAAE,OALhB;AAMIrU,oBAAQ,EAAE;AACN8lB,0BAAY,EAAE,CACV;AAAE5hC,kBAAE,EAAE,cAAN;AAAsB2F,oBAAI,EAAE;AAA5B,eADU,EAEV;AAAE3F,kBAAE,EAAE,QAAN;AAAgB2F,oBAAI,EAAE;AAAtB,eAFU;AADR,aANd;AAYIk8B,iBAAK,EAAE;AAZX,WADI,EAeJ;AACI3S,oBAAQ,EAAE,aADd;AAEIU,sBAAU,EAAE,SAFhB;AAGI+R,kBAAM,EAAE,CAHZ;AAIIzR,mBAAO,EAAE,0BAJb;AAKIC,sBAAU,EAAE,QALhB;AAMI+B,qBAAS,EAAE,SANf;AAOI2P,iBAAK,EAAE;AAPX,WAfI,EAwBJ;AACI3S,oBAAQ,EAAE,aADd;AAEIU,sBAAU,EAAE,SAFhB;AAGI+R,kBAAM,EAAE,CAHZ;AAIIzR,mBAAO,EAAE,0BAJb;AAKIC,sBAAU,EAAE,OALhB;AAMI0R,iBAAK,EAAE;AANX,WAxBI,EAgCJ;AACI3S,oBAAQ,EAAE,aADd;AAEIU,sBAAU,EAAE,UAFhB;AAGI+R,kBAAM,EAAE,EAHZ;AAIIzR,mBAAO,EAAE,0BAJb;AAKIC,sBAAU,EAAE,OALhB;AAMI0R,iBAAK,EAAE;AANX,WAhCI,CArBI;AA8DZ1T,eAAK,EAAE;AACH,2BAAe,CACX;AAAExoB,kBAAI,EAAE,eAAR;AAAyBoB,mBAAK,0BAAmB,mDAAnB,CAA9B;AAA2DstB,mBAAK,EAAE;AAAlE,aADW,EAEX;AAAE1uB,kBAAI,EAAE,UAAR;AAAoBoB,mBAAK,qBAAc,mDAAd,CAAzB;AAAiDstB,mBAAK,EAAE;AAAxD,aAFW,EAGX;AAAE1uB,kBAAI,EAAE,QAAR;AAAkBoB,mBAAK,mBAAY,mDAAZ,CAAvB;AAA6CstB,mBAAK,EAAE;AAApD,aAHW,CADZ;AAMH,2BAAe,CACX;AAAE1uB,kBAAI,EAAE,UAAR;AAAoBoB,mBAAK,qBAAc,mDAAd,CAAzB;AAAiDstB,mBAAK,EAAE;AAAxD,aADW,EAEX;AAAE1uB,kBAAI,EAAE,aAAR;AAAuBoB,mBAAK,wBAAiB,mDAAjB,CAA5B;AAAuDstB,mBAAK,EAAE;AAA9D,aAFW,EAGX;AAAE1uB,kBAAI,EAAE,QAAR;AAAkBoB,mBAAK,mBAAY,mDAAZ,CAAvB;AAA6CstB,mBAAK,EAAE;AAApD,aAHW;AANZ,WA9DK;AA0EZ1G,gBAAM,EAAE,CACJ;AAAEC,oBAAQ,EAAE,SAAZ;AAAuBC,sBAAU,EAAE;AAAnC,WADI,EAEJ;AAAED,oBAAQ,EAAE,IAAZ;AAAkBC,sBAAU,EAAE;AAA9B,WAFI,EAGJ;AAAED,oBAAQ,EAAE,cAAZ;AAA4BC,sBAAU,EAAE;AAAxC,WAHI,EAIJ;AAAED,oBAAQ,EAAE,OAAZ;AAAqBC,sBAAU,EAAE;AAAjC,WAJI,CA1EI;AAgFZE,oBAAU,EAAE,CACR;AAAEH,oBAAQ,EAAE,SAAZ;AAAuBC,sBAAU,EAAE;AAAnC,WADQ,EAER;AAAED,oBAAQ,EAAE,QAAZ;AAAsBC,sBAAU,EAAE;AAAlC,WAFQ;AAhFA;AADV;AAJiB,KAAD,CAAvB;AA6FPsT,kBAAc,CAACj2B,IAAf,CAAoB,MAAD,OAAC,CAAD,kBAAMi2B,cAAc,CAAC,CAAD,CAApB,CAAC,EAAsB;AAAEx7B,UAAI,EAAE;AAAR,KAAtB,CAApB;AAEA,gEAAS,CAAT,EAAY8nB,cAAZ,CAA2B/lB,SAA3B,GAAuCy5B,cAAvC;AAEA9+B,cAAU,CAAC,YAAM;AACbW,YAAM,CAACwkB,OAAP,CAAeoZ,QAAf,CAAwB11B,IAAxB,CAA6B;AACzBhL,YAAI,EAAE,sBADmB;AAEzB2I,gBAAQ,EAAEs4B,cAFe;AAGzBJ,gBAAQ,EAAE,kBAACj9B,KAAD,EAAW;AACjB,cAAIA,KAAK,CAACqc,YAAN,CAAmB0Q,IAAnB,KAA4B,UAAhC,EAA4C;AACxC,mBAAO;AAAEpiB,mBAAK,EAAE0yB,cAAc,CAACl8B,MAAxB;AAAgCwb,qBAAO,EAAE0gB;AAAzC,aAAP;AACH,WAFD,MAEO,IAAIr9B,KAAK,CAACqc,YAAN,CAAmB0Q,IAAnB,KAA4B,KAAhC,EAAuC;AAC1C,mBAAO;AAAEpiB,mBAAK,EAAE,4DAASxJ,MAAlB;AAA0Bwb,qBAAO,EAAE;AAAnC,aAAP;AACH,WAFM,MAEA,IAAI3c,KAAK,CAACqc,YAAN,CAAmB0Q,IAAnB,KAA4B,OAAhC,EAAyC;AAC5C,mBAAO;AAAEpiB,mBAAK,EAAE,CAAT;AAAYgS,qBAAO,EAAE;AAArB,aAAP;AACH;AACJ;AAXwB,OAA7B;AAaH,KAdS,CAAV;;;;;;;;;;;;;;;;AC1GA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AACO,QAAMqhB,MAAM,GAAG,iBAAf;AACP;;AACO,QAAMC,GAAG,GAAG,YAAZ;;;;;;;;;;;;;;;;ACFP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMO,QAAMC,cAAc,GAAU,EAA9B;;AAEP,QAAMn9B,MAAM,GAAG,yDAAYS,GAAZ,CAAgB,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACgnB,MAAV;AAAA,KAArB,CAAf;;AACA,QAAM0B,MAAM,GAAG,+DAAeloB,MAAf,CAAsB,UAACk8B,IAAD,EAAOt6B,GAAP,EAAe;AAChDA,SAAG,CAACmU,QAAJ,CAAa2R,cAAb,CAA4BQ,MAA5B,CAAmC9e,OAAnC,CAA2C,UAAA4f,GAAG;AAAA,eAAIkT,IAAI,CAAC/2B,IAAL,CAAU6jB,GAAG,CAACG,QAAd,CAAJ;AAAA,OAA9C;AACA,aAAO+S,IAAP;AACH,KAHc,EAGZ,EAHY,CAAf;;iDAKmB,sD;;;;AAAnB,gEAA+B;AAAA,YAApBvsB,IAAoB;;AAC3B,YAAIA,IAAI,CAACrU,QAAL,IAAiB,+EAAU,KAAV,IAAmB,CAAnB,KAAyB,CAA9C,EAAiD;AAC7CqU,cAAI,CAACrU,QAAL,GAAgB,+GAAqB,IAArB,EAA2BwD,MAA3B,EAAmCopB,MAAnC,CAAhB;AACA+T,wBAAc,CAAC92B,IAAf,CAAoBwK,IAAI,CAACrU,QAAzB;AACH;AACJ;;;;;;;AAEDgB,cAAU,CAAC,YAAM;AACbW,YAAM,CAACwkB,OAAP,CAAeoZ,QAAf,CAAwB11B,IAAxB,CAA6B;AACzBhL,YAAI,EAAE,0BADmB;AAEzB2I,gBAAQ,EAAEm5B,cAFe;AAGzBjB,gBAAQ,EAAE,kBAACj9B,KAAD,EAAW;AACjB,cAAIA,KAAK,CAACo9B,YAAN,CAAmBn6B,KAAvB,EAA8B;AAC1B,gBAAM2O,IAAI,GAAG,uDAAW/O,IAAX,CAAgB,UAAA+O,IAAI;AAAA,qBAAIA,IAAI,CAAC3O,KAAL,KAAejD,KAAK,CAACo9B,YAAN,CAAmBn6B,KAAlC,IAA2C2O,IAAI,CAAC1V,EAAL,KAAY8D,KAAK,CAACo9B,YAAN,CAAmBn6B,KAA9E;AAAA,aAApB,CAAb;;AACA,gBAAI2O,IAAJ,EAAU;AACN,qBAAOA,IAAI,CAACrU,QAAZ;AACH;AACJ;;AACD,gBAAM;AAAEuS,kBAAM,EAAE,GAAV;AAAejB,mBAAO,6CAAsC7O,KAAK,CAACo9B,YAAN,CAAmBn6B,KAAzD;AAAtB,WAAN;AACH;AAXwB,OAA7B;AAaH,KAdS,CAAV;;;;;;;;;;;;;;;;ACvBA;AAAA;;;AAAA;AAAA;AAAA;;AAAO,QAAMm7B,QAAQ,GAAG,CACpB;AACIC,qBAAe,EAAE,IADrB;AAEI1U,oBAAc,EAAE;AACZ/lB,iBAAS,EAAE;AADC;AAFpB,KADoB,CAAjB;;;;;;;;;;;;;;;;ACAP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA1E,UAAM,CAACwkB,OAAP,GAAiBxkB,MAAM,CAACwkB,OAAP,IAAkB,EAAnC;AACAxkB,UAAM,CAACwkB,OAAP,CAAegH,OAAf,GAAyBxrB,MAAM,CAACwkB,OAAP,CAAegH,OAAf,IAA0B,EAAnD;AACAxrB,UAAM,CAACwkB,OAAP,CAAeoZ,QAAf,GAA0B59B,MAAM,CAACwkB,OAAP,CAAeoZ,QAAf,IAA2B,EAArD;AAEO,QAAMwB,WAAW,GAAG,CACvB;AAAEpiC,QAAE,EAAE,MAAN;AAAc2F,UAAI,EAAE,SAApB;AAA+BkiB,WAAK,EAAE,CAAC,aAAD,EAAgB,aAAhB;AAAtC,KADuB,EAEvB;AAAE7nB,QAAE,EAAE,MAAN;AAAc2F,UAAI,EAAE,eAApB;AAAqCkiB,WAAK,EAAE,CAAC,aAAD,EAAgB,aAAhB;AAA5C,KAFuB,EAGvB;AAAE7nB,QAAE,EAAE,MAAN;AAAc2F,UAAI,EAAE,cAApB;AAAoCkiB,WAAK,EAAE,CAAC,aAAD,EAAgB,aAAhB;AAA3C,KAHuB,EAIvB;AAAE7nB,QAAE,EAAE,MAAN;AAAc2F,UAAI,EAAE,KAApB;AAA2BkiB,WAAK,EAAE,CAAC,aAAD,EAAgB,aAAhB;AAAlC,KAJuB,EAKvB;AAAE7nB,QAAE,EAAE,MAAN;AAAc2F,UAAI,EAAE,YAApB;AAAkCkiB,WAAK,EAAE,CAAC,aAAD,EAAgB,aAAhB;AAAzC,KALuB,EAMzBviB,GANyB,CAMrB,UAAC+8B,UAAD,EAAqB;AACvB,UAAM98B,KAAK,GAAG,uGAAkB,MAAD,OAAC,CAAD,kBACxB88B,UADwB,CAAC,EACf;AACb9V,cAAM,iBAAU8V,UAAU,CAACriC,EAArB,YADO;AAEbA,UAAE,mBAAYqiC,UAAU,CAACriC,EAAvB,CAFW;AAGb2F,YAAI,YAAK08B,UAAU,CAAC18B,IAAhB,cAAwB08B,UAAU,CAACriC,EAAnC;AAHS,OADe,CAAlB,CAAd;AAMAgD,YAAM,CAACwkB,OAAP,CAAegH,OAAf,CAAuBjpB,KAAK,CAACvF,EAA7B,IAAmC;AAC/BoU,gBAAQ,EAAE,CACN;AACIkuB,eAAK,EAAE/8B,KAAK,CAACqkB;AADjB,SADM;AADqB,OAAnC;AAOA,aAAOrkB,KAAP;AACH,KArB0B,CAApB,C,CAuBP;;AACAvC,UAAM,CAACwkB,OAAP,CAAeoZ,QAAf,CAAwB11B,IAAxB,CAA6B;AACzBhL,UAAI,YAAK,gDAAL,WADqB;AAEzB2I,cAAQ,EAAEu5B,WAFe;AAGzBrB,cAAQ,EAAE,kBAAAj9B,KAAK,EAAI;AACf,YAAI2c,OAAO,GAAG2hB,WAAd;;AACA,YAAIt+B,KAAK,CAACqc,YAAN,CAAmByb,CAAvB,EAA0B;AACtB,cAAM3uB,KAAK,GAAGnJ,KAAK,CAACqc,YAAN,CAAmByb,CAAnB,CAAqBvrB,WAArB,EAAd;AACAoQ,iBAAO,GAAGA,OAAO,CAAC5Z,MAAR,CACN,UAAAC,CAAC;AAAA,mBACG,CAACA,CAAC,CAAC9G,EAAF,IAAQ,EAAT,EAAaqQ,WAAb,GAA2BmU,OAA3B,CAAmCvX,KAAnC,KAA6C,CAA7C,IACA,CAACnG,CAAC,CAACnB,IAAF,IAAU,EAAX,EAAe0K,WAAf,GAA6BmU,OAA7B,CAAqCvX,KAArC,KAA+C,CAD/C,IAEA,CAACnG,CAAC,CAACC,KAAF,IAAW,EAAZ,EAAgBsJ,WAAhB,GAA8BmU,OAA9B,CAAsCvX,KAAtC,KAAgD,CAHnD;AAAA,WADK,CAAV;AAMH,SAVc,CAWf;;;AACA,YAAInJ,KAAK,CAACqc,YAAN,CAAmBrQ,QAAvB,EAAiC;AAC7B,cAAMA,QAAQ,GAAGhM,KAAK,CAACqc,YAAN,CAAmBrQ,QAAnB,CAA4B4Z,KAA5B,CAAkC,GAAlC,CAAjB;AACAjJ,iBAAO,GAAGA,OAAO,CAAC5Z,MAAR,CAAe,UAAAC,CAAC,EAAI;AAC1B,gBAAIyK,KAAK,GAAG,CAAZ;;AAD0B,yDAEPzB,QAFO;AAAA;;AAAA;AAE1B,wEAA6B;AAAA,oBAAlBgY,IAAkB;;AACzB,oBAAIhhB,CAAC,CAAC+gB,KAAF,CAAQrD,OAAR,CAAgBsD,IAAhB,KAAyB,CAA7B,EAAgC;AAC5BvW,uBAAK;AACR;AACJ;AANyB;AAAA;AAAA;AAAA;AAAA;;AAO1B,mBAAOA,KAAK,IAAIzB,QAAQ,CAAC7K,MAAzB;AACH,WARS,CAAV;AASH,SAvBc,CAwBf;;;AACA,YAAInB,KAAK,CAACqc,YAAN,CAAmB9a,QAAvB,EAAiC;AAC7B,cAAMA,QAAQ,GAAGvB,KAAK,CAACqc,YAAN,CAAmB9a,QAAnB,CAA4BqkB,KAA5B,CAAkC,GAAlC,CAAjB;AACAjJ,iBAAO,GAAGA,OAAO,CAAC5Z,MAAR,CAAe,UAAAC,CAAC;AAAA,mBAAIzB,QAAQ,CAACmf,OAAT,CAAiB1d,CAAC,CAAC9G,EAAnB,KAA0B,CAA9B;AAAA,WAAhB,CAAV;AACH,SA5Bc,CA6Bf;;;AACA,YAAI8D,KAAK,CAACqc,YAAN,CAAmB8K,cAAvB,EAAuC;AACnC,cAAM+V,IAAI,GAAG,kCAAK,CAAC,CAACl9B,KAAK,CAACqc,YAAN,CAAmB8K,cAApB,GAAqC,IAAtC,CAAlB;AACA,cAAMgW,EAAE,GAAG,kCAAK,CAAC,CAACn9B,KAAK,CAACqc,YAAN,CAAmBgL,YAApB,GAAmC,IAApC,CAAhB;AACA1K,iBAAO,CAACtR,OAAR,CAAgB,UAAA5J,KAAK,EAAI;AAAA,yDACCA,KAAK,CAACqkB,QADP;AAAA;;AAAA;AACrB,wEAAsC;AAAA,oBAA3B1lB,OAA2B;AAClC,oBAAM0I,KAAK,GAAG,kCAAK,CAAC1I,OAAO,CAACse,WAAR,GAAsB,IAAvB,CAAnB;AACA,oBAAMlc,GAAG,GAAG,kCAAK,CAACpC,OAAO,CAACye,SAAR,GAAoB,IAArB,CAAjB;;AACA,oBACKqe,IAAI,CAAC9yB,OAAL,CAAatB,KAAb,EAAoB,GAApB,KAA4Bo0B,IAAI,CAACxzB,QAAL,CAAclH,GAAd,EAAmB,GAAnB,CAA7B,IACC26B,EAAE,CAAC/yB,OAAH,CAAWtB,KAAX,EAAkB,GAAlB,KAA0Bq0B,EAAE,CAACzzB,QAAH,CAAYlH,GAAZ,EAAiB,GAAjB,CAD3B,IAECsG,KAAK,CAACsB,OAAN,CAAc8yB,IAAd,EAAoB,GAApB,KAA4Bp0B,KAAK,CAACY,QAAN,CAAeyzB,EAAf,EAAmB,GAAnB,CAHjC,EAIE;AACE17B,uBAAK,CAACuW,QAAN,GAAiB;AAAE1W,6BAAS,EAAE;AAAb,mBAAjB;AACH,iBAND,MAMO;AACHG,uBAAK,CAACuW,QAAN,GAAiB;AAAE1W,6BAAS,EAAE;AAAb,mBAAjB;AACH;AACJ;AAboB;AAAA;AAAA;AAAA;AAAA;AAcxB,WAdD;AAeH;;AACD,eAAOqb,OAAP;AACH;AArDwB,KAA7B;;;;;;;;;;;;;;;;AC/BA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGAzd,UAAM,CAACwkB,OAAP,GAAiBxkB,MAAM,CAACwkB,OAAP,IAAkB,EAAnC;AACAxkB,UAAM,CAACwkB,OAAP,CAAegH,OAAf,GAAyBxrB,MAAM,CAACwkB,OAAP,CAAegH,OAAf,IAA0B,EAAnD;AACAxrB,UAAM,CAACwkB,OAAP,CAAeoZ,QAAf,GAA0B59B,MAAM,CAACwkB,OAAP,CAAeoZ,QAAf,IAA2B,EAArD;AAEO,QAAM2B,UAAU,GAAG3rB,KAAK,CAACtJ,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,GAAhB,GAAsB,GAAjC,CAAD,CAAL,CAA6ClP,IAA7C,CAAkD,CAAlD,EACrBvR,GADqB,CACjB,UAAAwB,CAAC;AAAA,aAAI,qGAAJ;AAAA,KADgB,CAAnB;AAEA,QAAM07B,aAAa,GAAG5rB,KAAK,CAACtJ,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB,GAAhB,GAAsB,GAAjC,CAAD,CAAL,CAA6ClP,IAA7C,CAAkD,CAAlD,EACxBvR,GADwB,CACpB,UAAAwB,CAAC;AAAA,aAAI,oGAAiB;AAAEstB,eAAO,EAAE;AAAX,OAAjB,CAAJ;AAAA,KADmB,CAAtB;AAGA,QAAMqO,gBAAgB,GAAG,CAC5B,oBAD4B,EAE5B,oBAF4B,EAG5B,eAH4B,EAI5B,aAJ4B,EAK5B,iBAL4B,EAM5B,eAN4B,EAO5B,UAP4B,EAQ5B,aAR4B,EAS5B,WAT4B,EAU5B,YAV4B,EAW5B,eAX4B,EAY5B,UAZ4B,CAAzB,C,CAeP;;AACA,0CAAmBA,gBAAnB,yCAAqC;AAAhC,UAAM/sB,IAAI,yBAAV;AACD,UAAM1V,EAAE,GAAG0V,IAAI,CAACgU,KAAL,CAAW,GAAX,EAAgBlkB,IAAhB,CAAqB,GAArB,EAA0B6K,WAA1B,EAAX;AACA,UAAMsF,QAAQ,GAAG,oGAAiB;AAAE3V,UAAE,EAAFA,EAAF;AAAM2F,YAAI,EAAE+P;AAAZ,OAAjB,CAAjB;AACAC,cAAQ,CAACtU,QAAT,GAAoB,IAApB;AACAkhC,gBAAU,CAACr3B,IAAX,CAAgByK,QAAhB;AACH,K,CAED;;;AACA3S,UAAM,CAACwkB,OAAP,CAAeoZ,QAAf,CAAwB11B,IAAxB,CAA6B;AACzBhL,UAAI,YAAK,gDAAL,WADqB;AAEzB2I,cAAQ,EAAE05B,UAFe;AAGzBxB,cAAQ,EAAE,kBAACj9B,KAAD,EAAW;AACjB,YAAIA,KAAK,CAACqc,YAAN,CAAmByb,CAAvB,EAA0B;AACtB,cAAM3uB,KAAK,GAAGnJ,KAAK,CAACqc,YAAN,CAAmByb,CAAnB,CAAqBvrB,WAArB,EAAd;AACA,iBAAOkyB,UAAU,CAAC17B,MAAX,CAAkB,UAAAC,CAAC;AAAA,mBACtB,CAACA,CAAC,CAAC9G,EAAF,IAAQ,EAAT,EAAaqQ,WAAb,GAA2BmU,OAA3B,CAAmCvX,KAAnC,KAA6C,CAA7C,IACA,CAACnG,CAAC,CAACnB,IAAF,IAAU,EAAX,EAAe0K,WAAf,GAA6BmU,OAA7B,CAAqCvX,KAArC,KAA+C,CAD/C,IAEA,CAACnG,CAAC,CAACC,KAAF,IAAW,EAAZ,EAAgBsJ,WAAhB,GAA8BmU,OAA9B,CAAsCvX,KAAtC,KAAgD,CAH1B;AAAA,WAAnB,CAAP;AAKH;;AACD,eAAOs1B,UAAP;AACH;AAbwB,KAA7B,E,CAgBA;;AACAv/B,UAAM,CAACwkB,OAAP,CAAeoZ,QAAf,CAAwB11B,IAAxB,CAA6B;AACzBhL,UAAI,gCADqB;AAEzB2I,cAAQ,EAAE05B,UAAU,CAACA,UAAU,CAACt9B,MAAX,GAAoB,CAArB;AAFK,KAA7B,E,CAKA;;AACAjC,UAAM,CAACwkB,OAAP,CAAeoZ,QAAf,CAAwB11B,IAAxB,CAA6B;AACzBhL,UAAI,YAAK,gDAAL,eADqB;AAEzB2I,cAAQ,EAAE05B,UAFe;AAGzBxB,cAAQ,EAAE,kBAACj9B,KAAD,EAAW;AACjB,YAAM4R,IAAI,GAAG6sB,UAAU,CAAC57B,IAAX,CAAgB,UAAAG,CAAC;AAAA,iBAAIA,CAAC,CAAC9G,EAAF,KAAS8D,KAAK,CAACo9B,YAAN,CAAmBlhC,EAA5B,IAAkC8G,CAAC,CAACnB,IAAF,KAAW7B,KAAK,CAACo9B,YAAN,CAAmBlhC,EAAhE,IAAsE8G,CAAC,CAACC,KAAF,KAAYjD,KAAK,CAACo9B,YAAN,CAAmBlhC,EAAzG;AAAA,SAAjB,CAAb;;AACA,YAAI0V,IAAJ,EAAU;AACN,iBAAOA,IAAP;AACH;;AACD,cAAM;AAAE9B,gBAAM,EAAE,GAAV;AAAejB,iBAAO,EAAE;AAAxB,SAAN;AACH;AATwB,KAA7B,E,CAYA;;AACA3P,UAAM,CAACwkB,OAAP,CAAeoZ,QAAf,CAAwB11B,IAAxB,CAA6B;AACzBhL,UAAI,YAAK,gDAAL,cADqB;AAEzB2I,cAAQ,EAAE25B,aAFe;AAGzBzB,cAAQ,EAAE,kBAACj9B,KAAD,EAAW;AACjB,YAAIA,KAAK,CAACqc,YAAN,CAAmByb,CAAvB,EAA0B;AACtB,cAAM3uB,KAAK,GAAGnJ,KAAK,CAACqc,YAAN,CAAmByb,CAAnB,CAAqBvrB,WAArB,EAAd;AACA,iBAAOmyB,aAAa,CAAC37B,MAAd,CAAqB,UAAAC,CAAC;AAAA,mBACzB,CAACA,CAAC,CAAC9G,EAAF,IAAQ,EAAT,EAAaqQ,WAAb,GAA2BmU,OAA3B,CAAmCvX,KAAnC,KAA6C,CAA7C,IACA,CAACnG,CAAC,CAACnB,IAAF,IAAU,EAAX,EAAe0K,WAAf,GAA6BmU,OAA7B,CAAqCvX,KAArC,KAA+C,CAD/C,IAEA,CAACnG,CAAC,CAACC,KAAF,IAAW,EAAZ,EAAgBsJ,WAAhB,GAA8BmU,OAA9B,CAAsCvX,KAAtC,KAAgD,CAHvB;AAAA,WAAtB,CAAP;AAKH;;AACD,eAAOs1B,UAAP;AACH;AAbwB,KAA7B,E,CAgBA;;AACAv/B,UAAM,CAACwkB,OAAP,CAAeoZ,QAAf,CAAwB11B,IAAxB,CAA6B;AACzBhL,UAAI,YAAK,gDAAL,kBADqB;AAEzB2I,cAAQ,EAAE05B,UAFe;AAGzBxB,cAAQ,EAAE,kBAACj9B,KAAD,EAAW;AACjB,YAAM4R,IAAI,GAAG6sB,UAAU,CAAC57B,IAAX,CAAgB,UAAAG,CAAC;AAAA,iBAAIA,CAAC,CAAC9G,EAAF,KAAS8D,KAAK,CAACo9B,YAAN,CAAmBlhC,EAA5B,IAAkC8G,CAAC,CAACnB,IAAF,KAAW7B,KAAK,CAACo9B,YAAN,CAAmBlhC,EAApE;AAAA,SAAjB,CAAb;;AACA,YAAI0V,IAAJ,EAAU;AACN,iBAAOA,IAAP;AACH;;AACD,cAAM;AAAE9B,gBAAM,EAAE,GAAV;AAAejB,iBAAO,EAAE;AAAxB,SAAN;AACH;AATwB,KAA7B;;;;;;;;;;;;;;;;AC3FA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AASA3P,UAAM,CAACwkB,OAAP,GAAiBxkB,MAAM,CAACwkB,OAAP,IAAkB,EAAnC;AACAxkB,UAAM,CAACwkB,OAAP,CAAegH,OAAf,GAAyB,gCAClBxrB,MAAM,CAACwkB,OAAP,CAAegH,OADG,uBAEpB,QAFoB,EAET,mEAAa,QAAb,CAFS,MAGpB,EAHL;AAIAxrB,UAAM,CAACwkB,OAAP,CAAeoZ,QAAf,GAA0B59B,MAAM,CAACwkB,OAAP,CAAeoZ,QAAf,IAA2B,EAArD;;;;;;;;;;;;;;;;ACbA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AA6DA,QAAM8B,OAAO,GAAG,6BAA6BhZ,KAA7B,CAAmC,EAAnC,CAAhB;AACA,QAAMiZ,OAAO,GAAG,aAAajZ,KAAb,CAAmB,EAAnB,CAAhB;AAEA,QAAI3e,KAAK,GAAG,CAAZ;AAEA,QAAM63B,UAAU,GAAU,EAA1B;AAEA,QAAMC,MAAM,GAAa,CAAC,YAAD,EAAe,UAAf,EAA2B,YAA3B,EAAyC,UAAzC,CAAzB;AAEA;;;;AAGO,aAASC,YAAT,CAAsB9iC,EAAtB,EAAmC;AAAA;;AACtCA,QAAE,GAAGA,EAAE,kBAAW0iC,OAAO,CAACp1B,IAAI,CAACqH,KAAL,CAAW5J,KAAK,GAAG43B,OAAO,CAAC19B,MAA3B,CAAD,CAAlB,SAAyD09B,OAAO,CAAE53B,KAAK,EAAN,GAAY43B,OAAO,CAAC19B,MAArB,CAAhE,CAAP;AACA,oHAA4B,kCAAK,GAAGoI,MAAR,CAAe,CAAC,EAAhB,EAAoBhC,OAApB,EAA5B;AACA,UAAM9F,KAAK,GAAG,gGAAkB;AAAEvF,UAAE,EAAFA;AAAF,OAAlB,CAAd;AACA4iC,gBAAU,CAAC13B,IAAX,CAAgB3F,KAAhB;AAEA,UAAMw9B,gBAAgB,GAA0B;AAC5CC,qBAAa,EAAE,IAD6B;AAE5C/gC,eAAO,EAAE,GAFmC;AAG5CghC,sBAAc,EAAE,GAH4B;AAI5Cj6B,oBAAY,EAAE,IAJ8B;AAK5Ck6B,mBAAW,EAAE,kCAL+B;AAM5C5vB,YAAI,wBAAiBuvB,MAAM,CAACv1B,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,KAAgB8c,MAAM,CAAC59B,MAAlC,CAAD,CAAvB;AANwC,OAAhD;AASA,UAAMq9B,KAAK,GAAG,kCAAK,EAAnB;AACA,UAAMa,aAAa,GAAG;AAClB,gCAAwB;AACpB,kEACKb,KAAK,CAAC97B,MAAN,CAAa,YAAb,CADL,EACkC;AAC1B;AACA,wCAA4B;AACxBoG,mBAAK,EAAE01B,KAAK,CAAC3zB,QAAN,CAAe,CAAf,EAAkB,GAAlB,EAAuB4B,IAAvB,EADiB;AAExBjK,iBAAG,EAAEg8B,KAAK,CAAC/7B,GAAN,CAAU,CAAV,EAAa,GAAb,EAAkBgK,IAAlB,EAFmB;AAGxBoT,wBAAU,EAAE;AAHY;AAFF,WADlC,6BASK2e,KAAK,CAAC/7B,GAAN,CAAU,CAAV,EAAa,GAAb,EAAkBC,MAAlB,CAAyB,YAAzB,CATL,EAS8C;AACtC,sCAA0B;AACtBoG,mBAAK,EAAE01B,KAAK,CAAC/7B,GAAN,CAAU,CAAV,EAAa,GAAb,EAAkBoI,QAAlB,CAA2B,CAA3B,EAA8B,GAA9B,EAAmC4B,IAAnC,EADe;AAEtBjK,iBAAG,EAAEg8B,KAAK,CAAC/7B,GAAN,CAAU,CAAV,EAAa,GAAb,EAAkBA,GAAlB,CAAsB,CAAtB,EAAyB,GAAzB,EAA8BgK,IAA9B;AAFiB;AADY,WAT9C,YADoB;AAiBpB,wBAAc,EAjBM;AAkBpB,wBAAc;AAlBM,SADN;AAqBlB,gCAAwB;AACpB,kEACK+xB,KAAK,CAAC97B,MAAN,CAAa,YAAb,CADL,EACkC;AAC1B,qCAAyB;AACrBoG,mBAAK,EAAE01B,KAAK,CAAC3zB,QAAN,CAAe,CAAf,EAAkB,GAAlB,EAAuB4B,IAAvB,EADc;AAErBjK,iBAAG,EAAEg8B,KAAK,CAAC/7B,GAAN,CAAU,CAAV,EAAa,GAAb,EAAkBgK,IAAlB,EAFgB;AAGrBoT,wBAAU,EAAE;AAHS;AADC,WADlC,6BAQK2e,KAAK,CAAC/7B,GAAN,CAAU,CAAV,EAAa,GAAb,EAAkBC,MAAlB,CAAyB,YAAzB,CARL,EAQ8C;AACtC,sCAA0B;AACtBoG,mBAAK,EAAE01B,KAAK,CAAC/7B,GAAN,CAAU,CAAV,EAAa,GAAb,EAAkBoI,QAAlB,CAA2B,CAA3B,EAA8B,GAA9B,EAAmC4B,IAAnC,EADe;AAEtBjK,iBAAG,EAAEg8B,KAAK,CAAC/7B,GAAN,CAAU,CAAV,EAAa,GAAb,EAAkBA,GAAlB,CAAsB,CAAtB,EAAyB,GAAzB,EAA8BgK,IAA9B;AAFiB;AADY,WAR9C,YADoB;AAgBpB,wBAAc,EAhBM;AAiBpB,wBAAc;AAjBM;AArBN,OAAtB;AA0CA,UAAM6yB,MAAM,GAAG;AACXpjC,UAAE,EAAFA,EADW;AACP2F,YAAI,EAAEJ,KAAK,CAACI,IADL;AAEXyO,gBAAQ,EAAE,EAFC;AAGXivB,sBAAc,EAAE,CAAC;AACb,kCAAwB,CAAC,YAAD,EAAe,YAAf,EAA6B,YAA7B;AADX,SAAD,CAHL;AAMXC,oBAAY,EAAE;AANH,OAAf;AAQAF,YAAM,CAAChvB,QAAP,CAAgBlJ,IAAhB,CAAqB,MAAD,OAAC,CAAD,kBACb63B,gBADa,CAAC,EACE;AACnBQ,iBAAS,EAAEh+B,KAAK,CAACI,IADE;AAEnB28B,aAAK,EAAE/8B,KAAK,CAACqkB,QAFM;AAGnB4Z,sBAAc,EAAE,wBAAC72B,IAAD,EAAkB;AAC9By2B,gBAAM,CAAChvB,QAAP,CAAgB,CAAhB,EAAmBqvB,oBAAnB,GAA0C92B,IAA1C;AACH,SALkB;AAMnB+2B,uBAAe,EAAE,yBAAC/2B,IAAD,EAAevC,MAAf,EAAkC;AAC/C,cAAMqB,IAAI,GAAG23B,MAAM,CAAChvB,QAAP,CAAgB,CAAhB,EAAmBkuB,KAAhC;AACAc,gBAAM,CAAChvB,QAAP,CAAgB,CAAhB,EAAmBkuB,KAAnB,GAA2B72B,IAAI,CAAC5E,MAAL,CAAY,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAAC/B,IAAF,KAAW4H,IAAf;AAAA,WAAb,CAA3B;AACH,SATkB;AAUnBg3B,oBAAY,EAAE,wBAAM;AAChB7oB,iBAAO,CAACX,GAAR,kBAAsBna,EAAtB;AACH;AAZkB,OADF,CAArB;AAeAojC,YAAM,CAACE,YAAP,CAAoBp4B,IAApB,CAAyB,MAAD,OAAC,CAAD,kBACjBi4B,aADiB,CAAC,EACL;AAChBS,aAAK,EAAE,eAAC78B,KAAD,EAAgBiuB,IAAhB,EAA8BjwB,IAA9B,EAA+C;AAClD+V,iBAAO,CAACX,GAAR,CAAY,oBAAZ;AACH,SAHe;AAIhB0pB,iBAAS,EAAE,mBAAC98B,KAAD,EAAgBiuB,IAAhB,EAAiC;AACxCoO,gBAAM,CAACE,YAAP,CAAoB,CAApB,EAAuB,sBAAvB,EAA+CtO,IAA/C,EAAqD,kCAAK,GAAGxuB,MAAR,CAAe,YAAf,CAArD,EAAmFO,KAAnF,EAA0F4c,UAA1F,GAAuG,IAAvG;AACH,SANe;AAOhBmgB,kBAAU,EAAE,oBAAC/8B,KAAD,EAAgBiuB,IAAhB,EAAiC;AACzCla,iBAAO,CAACX,GAAR;AACH;AATe,OADK,CAAzB;AAYA,aAAOipB,MAAP;AACH;;;;;;;;;;;;;;;;;ACxwDA,QAAMW,UAAU,GAAgB,CAC5B,8DAD4B,EAE5B,iFAF4B,EAG5B,8EAH4B,EAI5B,kGAJ4B,EAK5B,wGAL4B,EAM5B,6FAN4B,EAO5B,kGAP4B,EAS5B,kGAT4B,EAU5B,2GAV4B,EAY5B,kGAZ4B,EAa5B,0FAb4B,EAc5B,uFAd4B,CAAhC;AAiBA,QAAMC,UAAU,GAAgB,CAC5B,gHAD4B,CAAhC;AAIA,QAAMC,eAAe,GAAgB,CACjC,6GADiC,EAEjC,mHAFiC,EAGjC,6GAHiC,EAIjC,yHAJiC,EAKjC,iIALiC,EAMjC,2HANiC,EAOjC,qGAPiC,CAArC;AAUA,QAAMC,gBAAgB,GAAU,CAC5B,wEAD4B,EAE5B,8EAF4B,EAG5B,yEAH4B,EAI5B,gFAJ4B,EAK5B,uEAL4B,EAM5B,4FAN4B,EAO5B,oFAP4B,EAQ5B,qFAR4B,EAS5B,yEAT4B,EAU5B,uEAV4B,EAW5B,uEAX4B,EAY5B,qEAZ4B,EAa5B,6EAb4B,EAc5B,2EAd4B,EAe5B,uEAf4B,EAgB5B,qEAhB4B,EAiB5B,oFAjB4B,CAAhC;AAoBA,QAAMC,WAAW,GAAU,CACvB,sEADuB,EAEvB,qEAFuB,EAGvB,iEAHuB,CAA3B;;QAoCaC,mB;;;;;YAAAA;;;;yBAAAA,mB;AAAmB,O;AAAA,iBAvBxB,4DAuBwB,EAtBxB,0DAsBwB,EArBxB,kEAqBwB,EApBxB,oEAoBwB,EAnBxB,+EAmBwB,EAlBxB,mFAkBwB,EAjBxB,4DAiBwB,EAhBxB,qEAgBwB,EAfxB,gEAewB,SAdrBF,gBAcqB,EAbrBC,WAaqB,GAVxB,oEAUwB,EATxB,mFASwB,EARxB,+EAQwB,EAvD5B,wEAuD4B,EAtD5B,8EAsD4B,EArD5B,yEAqD4B,EApD5B,gFAoD4B,EAnD5B,uEAmD4B,EAlD5B,4FAkD4B,EAjD5B,oFAiD4B,EAhD5B,qFAgD4B,EA/C5B,yEA+C4B,EA9C5B,uEA8C4B,EA7C5B,uEA6C4B,EA5C5B,qEA4C4B,EA3C5B,6EA2C4B,EA1C5B,2EA0C4B,EAzC5B,uEAyC4B,EAxC5B,qEAwC4B,EAvC5B,oFAuC4B,EAnC5B,sEAmC4B,EAlC5B,qEAkC4B,EAjC5B,iEAiC4B;;;;0HAAnBC,mB,EAAmB;AAAA,uBAtF5B,8DAsF4B,EArF5B,iFAqF4B,EApF5B,8EAoF4B,EAnF5B,kGAmF4B,EAlF5B,wGAkF4B,EAjF5B,6FAiF4B,EAhF5B,kGAgF4B,EA9E5B,kGA8E4B,EA7E5B,2GA6E4B,EA3E5B,kGA2E4B,EA1E5B,0FA0E4B,EAzE5B,uFAyE4B,EAjE5B,6GAiE4B,EAhE5B,mHAgE4B,EA/D5B,6GA+D4B,EA9D5B,yHA8D4B,EA7D5B,iIA6D4B,EA5D5B,2HA4D4B,EA3D5B,qGA2D4B,EArE5B,gHAqE4B;AArEF,kBA8CtB,4DA9CsB,EA+CtB,0DA/CsB,EAgDtB,kEAhDsB,EAiDtB,oEAjDsB,EAkDtB,+EAlDsB,EAmDtB,mFAnDsB,EAoDtB,4DApDsB,EAqDtB,qEArDsB,EAsDtB,gEAtDsB,EAc1B,wEAd0B,EAe1B,8EAf0B,EAgB1B,yEAhB0B,EAiB1B,gFAjB0B,EAkB1B,uEAlB0B,EAmB1B,4FAnB0B,EAoB1B,oFApB0B,EAqB1B,qFArB0B,EAsB1B,yEAtB0B,EAuB1B,uEAvB0B,EAwB1B,uEAxB0B,EAyB1B,qEAzB0B,EA0B1B,6EA1B0B,EA2B1B,2EA3B0B,EA4B1B,uEA5B0B,EA6B1B,qEA7B0B,EA8B1B,oFA9B0B,EAkC1B,sEAlC0B,EAmC1B,qEAnC0B,EAoC1B,iEApC0B,CAqEE;AAjCd,kBAuBV,oEAvBU,EAwBV,mFAxBU,EAyBV,+EAzBU,EArDd,8DAqDc,EApDd,iFAoDc,EAnDd,8EAmDc,EAlDd,kGAkDc,EAjDd,wGAiDc,EAhDd,6FAgDc,EA/Cd,kGA+Cc,EA7Cd,kGA6Cc,EA5Cd,2GA4Cc,EA1Cd,kGA0Cc,EAzCd,0FAyCc,EAxCd,uFAwCc,EApCd,gHAoCc,EAhCd,6GAgCc,EA/Bd,mHA+Bc,EA9Bd,6GA8Bc,EA7Bd,yHA6Bc,EA5Bd,iIA4Bc,EA3Bd,2HA2Bc,EA1Bd,qGA0Bc,EAtBd,wEAsBc,EArBd,8EAqBc,EApBd,yEAoBc,EAnBd,gFAmBc,EAlBd,uEAkBc,EAjBd,4FAiBc,EAhBd,oFAgBc,EAfd,qFAec,EAdd,yEAcc,EAbd,uEAac,EAZd,uEAYc,EAXd,qEAWc,EAVd,6EAUc,EATd,2EASc,EARd,uEAQc,EAPd,qEAOc,EANd,oFAMc,EAFd,sEAEc,EADd,qEACc,EAAd,iEAAc;AAiCc,O;AAjCd,K;;;;;sEAiCLA,mB,EAAmB;cA9B/B,sDA8B+B;eA9BtB;AACN7gC,sBAAY,YACLwgC,UADK,EAELE,eAFK,EAGLD,UAHK,CADN;AAMNhjC,iBAAO,GACH,4DADG,EAEH,0DAFG,EAGH,kEAHG,EAIH,oEAJG,EAKH,+EALG,EAMH,mFANG,EAOH,4DAPG,EAQH,qEARG,EASH,gEATG,SAUAkjC,gBAVA,EAWAC,WAXA,CAND;AAmBNpkC,iBAAO,GACH,oEADG,EAEH,mFAFG,EAGH,+EAHG,SAIAgkC,UAJA,EAKAC,UALA,EAMAC,eANA,EAOAC,gBAPA,EAQAC,WARA;AAnBD,S;AA8BsB,Q;;;;;;;;;;;;;;;;;;AC9IhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;;;;AAIO,aAASE,aAAT,CAAuB/+B,GAAvB,EAAqC;AACxC,UAAIkkB,GAAG,GAAG,EAAV;;AACA,UAAIlkB,GAAJ,EAAS;AACL,aAAK,IAAMyC,GAAX,IAAkBzC,GAAlB,EAAuB;AACnB,cAAIA,GAAG,CAAC8hB,cAAJ,CAAmBrf,GAAnB,KAA2BzC,GAAG,CAACyC,GAAD,CAAH,KAAakX,SAAxC,IAAqD3Z,GAAG,CAACyC,GAAD,CAAH,KAAa,IAAtE,EAA4E;AACxEyhB,eAAG,cAAQA,GAAG,GAAG,GAAH,GAAS,EAApB,SAA0BzhB,GAA1B,cAAiCzC,GAAG,CAACyC,GAAD,CAApC,CAAH;AACH;AACJ;AACJ;;AACD,aAAOyhB,GAAP;AACH;;;;;;;;;;;;;;;;;ACfD;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,8D,CAOA;AACA;AACA;AACA;;AAEA;;;;;;AAIO,aAAS8a,uBAAT,CAAiCz+B,IAAjC,EAA2C;AAC9C,aAAO,UAACovB,CAAD;AAAA,eAAOsP,eAAe,CAACtP,CAAD,EAAIpvB,IAAJ,CAAtB;AAAA,OAAP;AACH;AAED;;;;;;;AAKO,aAAS0+B,eAAT,CAAyB94B,IAAzB,EAAuC5F,IAAvC,EAAoD;AACvD,UAAI2+B,YAAY,GAAW,EAA3B;;AACA,UAAI/4B,IAAI,IAAIA,IAAI,CAACxG,MAAL,GAAc,CAA1B,EAA6B;AACzB,YAAMw/B,KAAK,sBAAOh5B,IAAP,CAAX;;AACA,YAAI5F,IAAJ,EAAU;AACN,cAAMya,MAAM,GAAGmkB,KAAK,CAAC99B,IAAN,CAAW,UAAA8Y,CAAC;AAAA,mBAAIA,CAAC,CAAC1Y,KAAF,KAAYlB,IAAI,CAACkB,KAArB;AAAA,WAAZ,CAAf;;AACA,cAAIuZ,MAAJ,EAAY;AACRmkB,iBAAK,CAACt5B,MAAN,CAAas5B,KAAK,CAACjgB,OAAN,CAAclE,MAAd,CAAb,EAAoC,CAApC;AACH;AACJ;;AACD,YAAMrb,MAAM,GAAGw/B,KAAK,CAACx/B,MAAN,IAAgBY,IAAI,GAAG,CAAH,GAAO,CAA3B,CAAf;AACA2+B,oBAAY,aAAMv/B,MAAN,sBAAwBA,MAAM,KAAK,CAAX,GAAe,EAAf,GAAoB,GAA5C,eAAoDY,IAAI,GAAGA,IAAI,CAACF,IAAR,GAAe,EAAvE,CAAZ;;AATyB,qDAUN8+B,KAVM;AAAA;;AAAA;AAUzB,oEAA0B;AAAA,gBAAf/4B,IAAe;;AACtB,gBAAI84B,YAAJ,EAAkB;AACdA,0BAAY,IAAI,IAAhB;AACH;;AACDA,wBAAY,IAAI94B,IAAI,CAAC/F,IAArB;AACH;AAfwB;AAAA;AAAA;AAAA;AAAA;;AAgBzB6+B,oBAAY,GAAGA,YAAY,CAACzU,OAAb,CAAqB,KAArB,EAA4B,GAA5B,CAAf;AACH;;AACD,aAAOyU,YAAP;AACH;AAED;;;;;;AAIO,aAASE,UAAT,CAAoB3/B,IAApB,EAAkC;AACrC,aAAO,kCAAK,CAACA,IAAD,CAAL,CAAYyB,MAAZ,CAAmB,cAAnB,CAAP;AACH;AAED;;;;;;AAIO,aAASm+B,UAAT,CAAoB5/B,IAApB,EAAkC;AACrC,aAAO,kCAAK,CAACA,IAAD,CAAL,CAAYyB,MAAZ,CAAmB,QAAnB,CAAP;AACH;AAED;;;;;;AAIO,aAASo+B,wBAAT,CAAkC5/B,QAAlC,EAAoD;AACvD,aAAO,UAAC6/B,CAAD;AAAA,eAAOC,YAAY,CAACD,CAAD,EAAI7/B,QAAJ,CAAnB;AAAA,OAAP;AACH;AAED;;;;;;;AAKO,aAAS8/B,YAAT,CAAsBC,SAAtB,EAAgE;AAAA,UAAvB//B,QAAuB,uEAAJ,EAAI;AACnE,UAAMykB,KAAK,GAAGsb,SAAS,CAACrb,KAAV,CAAgB,GAAhB,CAAd;AACA,UAAM3kB,IAAI,GAAG,kCAAK,GAAG+I,IAAR,CAAa,CAAC2b,KAAK,CAAC,CAAD,CAAnB,EAAwBpc,MAAxB,CAA+B,CAACoc,KAAK,CAAC,CAAD,CAArC,CAAb;AACA,uBAAU1kB,IAAI,CAACyB,MAAL,CAAY,QAAZ,CAAV,gBAAqCzB,IAAI,CAACwB,GAAL,CAASvB,QAAT,EAAmB,GAAnB,EAAwBwB,MAAxB,CAA+B,QAA/B,CAArC,eAAkF,4EAAiBxB,QAAjB,CAAlF;AACH;AAED;;;;;;AAIO,aAASggC,cAAT,CAAwBhgC,QAAxB,EAA0C;AAC7C,aAAO,4EAAiBA,QAAjB,CAAP;AACH;AAED;;;AACO,QAAMigC,kBAAkB,GAAa,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,EAA4B,SAA5B,EAAuC,QAAvC,CAArC;AAEP;;;;;AAIO,aAASC,gBAAT,CAA0Bv8B,KAA1B,EAA2E;AAC9E,UAAI,CAACA,KAAD,IAAU,CAACA,KAAK,CAACwH,MAAjB,IAA2BxH,KAAK,CAACwH,MAAN,IAAuB80B,kBAAkB,CAAChgC,MAAzE,EAAiF;AAC7E,eAAO,eAAP;AACH;;AACD,UAAMkL,MAAM,GAAG,OAAOxH,KAAK,CAACwH,MAAb,KAAwB,QAAxB,GAAmCxH,KAAK,CAACwH,MAAzC,GAAkD80B,kBAAkB,CAACt8B,KAAK,CAACwH,MAAP,CAAnF;AACA,UAAM7J,GAAG,GAAGqC,KAAK,CAACrC,GAAN,mBAAqB,kCAAK,CAACqC,KAAK,CAACrC,GAAP,CAAL,CAAiBE,MAAjB,CAAwB,aAAxB,CAArB,IAAgE,SAA5E;AACA,uBAAU2J,MAAV,cAAoB7J,GAApB;AACH;AAED;;;;;;AAIO,aAAS6+B,YAAT,CAAsB15B,IAAtB,EAA6C;AAChD,UAAI,CAACA,IAAD,IAAUA,IAAI,YAAYmL,KAAhB,IAAyBnL,IAAI,CAACxG,MAAL,IAAe,CAAtD,EAA0D;AACtD,eAAO,mBAAP;AACH;;AACD,UAAIwG,IAAI,YAAYmL,KAApB,EAA2B;AACvB,eAAOnL,IAAI,CAACxG,MAAL,KAAgB,CAAhB,GAAoBwG,IAAI,CAAC,CAAD,CAAJ,CAAQ9F,IAA5B,aAAsC8F,IAAI,CAACxG,MAA3C,mBAA0DwG,IAAI,CAACxG,MAAL,KAAgB,CAAhB,GAAoB,GAApB,GAA0B,EAApF,CAAP;AACH,OAFD,MAEO;AACH,YAAMwtB,QAAQ,GAAGhnB,IAAI,CAACgnB,QAAL,GAAgB,MAAMhnB,IAAI,CAACgnB,QAAX,GAAsB,GAAtB,IAA6BhnB,IAAI,CAACgnB,QAAL,KAAkB,CAAlB,GAAsB,QAAtB,GAAiC,QAA9D,IAA0E,GAA1F,GAAgG,EAAjH;AACA,yBAAUhnB,IAAI,CAAC9F,IAAf,cAAuB8sB,QAAvB;AACH;AACJ;;;;;;;;;;;;;;;;;ACxHD;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAEO,aAAS2S,eAAT,CAAyBvlC,IAAzB,EAAyCyF,GAAzC,EAAuD;AAC1D,UAAMyC,GAAG,GAAGlI,IAAI,CAAC04B,KAAL,EAAZ;;AACA,UAAIjzB,GAAG,CAACyC,GAAD,CAAP,EAAc;AACV,eAAOlI,IAAI,CAACoF,MAAL,GAAc,CAAd,GAAkBmgC,eAAe,CAACvlC,IAAD,EAAOyF,GAAG,CAACyC,GAAD,CAAV,CAAjC,GAAoDzC,GAAG,CAACyC,GAAD,CAA9D;AACH;;AACD,aAAO,IAAP;AACH;AAED;;AACA;;;;;AAGO,aAASs9B,cAAT,GAAuB;AAC1B,UAAMC,CAAC,GAAG,gEAAV;AACA,aAAO,CAAC,CAACC,SAAS,CAACC,SAAV,CAAoB3c,KAApB,CAA0Byc,CAA1B,CAAT;AACH;AAED;;AACA;;;;;AAGO,aAASG,cAAT,GAAuB;AAC1B,UAAMC,KAAK,GAAGH,SAAS,CAACC,SAAxB;AACA,aAAO,CAAC,EACJE,KAAK,CAAC7c,KAAN,CAAY,kBAAZ,KACA6c,KAAK,CAAC7c,KAAN,CAAY,aAAZ,CADA,IAEA,CAAC6c,KAAK,CAAC7c,KAAN,CAAY,OAAZ,CAHG,CAAR;AAKH;AAED;;AACA;;;;;AAGO,aAAS8c,eAAT,GAAwB;AAC3B,UAAMD,KAAK,GAAGH,SAAS,CAACC,SAAxB;AACA,aAAO,CAAC,EAAEE,KAAK,CAAC7c,KAAN,CAAY,SAAZ,KAA0B6c,KAAK,CAAC7c,KAAN,CAAY,QAAZ,CAA5B,CAAR;AACH;AAED;;;;;;;AAKO,aAAS+c,OAAT,CAAiBj9B,KAAjB,EAAgC1D,MAAhC,EAA8C;AACjD,UAAIukB,GAAG,GAAG7gB,KAAK,CAACk9B,QAAN,EAAV;;AACA,aAAOrc,GAAG,CAACvkB,MAAJ,GAAaA,MAApB,EAA4B;AACxBukB,WAAG,GAAG,MAAMA,GAAZ;AACH;;AACD,aAAOA,GAAP;AACH;AAED;;;;;;;AAKO,aAASsc,MAAT,CAAgBC,KAAhB,EAAgD;AAAA,UAAlBh+B,GAAkB,uEAAJ,EAAI;AACnD,aAAOg+B,KAAK,CAACl/B,MAAN,CACH,UAACuiB,EAAD,EAAK4c,GAAL,EAAUC,GAAV;AAAA,eACIA,GAAG,CAACzhB,OAAJ,CAAYzc,GAAG,GAAGk+B,GAAG,CAACt/B,IAAJ,CAAS,UAACG,CAAD;AAAA,iBAAOA,CAAC,CAACiB,GAAD,CAAD,KAAWqhB,EAAE,CAACrhB,GAAD,CAApB;AAAA,SAAT,CAAH,GAAyCk+B,GAAG,CAACt/B,IAAJ,CAAS,UAACG,CAAD;AAAA,iBAAOA,CAAC,KAAKsiB,EAAb;AAAA,SAAT,CAAxD,MACA4c,GAFJ;AAAA,OADG,CAAP;AAKH;AAED;;;;;;;AAKO,aAASE,gBAAT,CAA0BlhC,QAA1B,EAAoE;AAAA,UAAxBmhC,MAAwB,uEAAP,KAAO;;AACvE,UAAI,CAACnhC,QAAD,IAAaA,QAAQ,GAAG,CAA5B,EAA+B;AAC3B,eAAO,EAAP;AACH;;AACD,UAAMohC,CAAC,GAAG94B,IAAI,CAACqH,KAAL,CAAW3P,QAAQ,GAAG,EAAtB,CAAV;AACA,UAAIsZ,CAAC,aAAM8nB,CAAC,IAAI,CAAL,GAASA,CAAC,IAAID,MAAK,GAAG,GAAH,GAAS,WAAWC,CAAC,KAAK,CAAN,GAAU,EAAV,GAAe,GAA1B,CAAlB,CAAV,GAA8D,EAApE,CAAL;;AACA,UAAIphC,QAAQ,GAAG,EAAX,KAAkB,CAAtB,EAAyB;AACrB,YAAIsZ,CAAJ,EAAO;AACHA,WAAC,IAAI6nB,MAAK,GAAG,GAAH,GAAS,IAAnB;AACH;;AACD,YAAM7lC,CAAC,GAAG0E,QAAQ,GAAG,EAArB;AACAsZ,SAAC,cAAOhe,CAAC,IAAI,CAAL,GAASA,CAAC,IAAI6lC,MAAK,GAAG,GAAH,GAAS,aAAa7lC,CAAC,KAAK,CAAN,GAAU,EAAV,GAAe,GAA5B,CAAlB,CAAV,GAAgE,EAAvE,CAAD;AACH;;AACD,aAAOge,CAAP;AACH;AAED;;;;;;;;AAMO,aAAS+nB,UAAT,CACHx/B,MADG,EAEHsF,KAFG,EAGsB;AAAA,UAAzB0a,MAAyB,uEAAN,CAAC,IAAD,CAAM;AAEzB,UAAIpG,OAAJ,CAFyB,CAGzB;;AACA,UAAM6lB,OAAO,GAAG,CAACz/B,MAAM,IAAI,EAAX,EAAewJ,WAAf,GAA6BqZ,KAA7B,CAAmC,GAAnC,CAAhB;AACA,UAAMje,IAAI,GAAG,EAAb;;AALyB,mDAMT66B,OANS;AAAA;;AAAA;AAMzB,kEAAyB;AAAA,cAAdC,GAAc;;AACrB;AACA,cAAIA,GAAJ,EAAO;AACH;AACA,gBAAI,CAAC96B,IAAI,CAAC86B,GAAD,CAAT,EAAc;AACV96B,kBAAI,CAAC86B,GAAD,CAAJ,GAAU,CAAV;AACH;;AACD96B,gBAAI,CAAC86B,GAAD,CAAJ;AACH;AACJ,SAfwB,CAgBzB;;AAhByB;AAAA;AAAA;AAAA;AAAA;;AAiBzB,UAAM9c,KAAK,GAAG,EAAd;;AACA,WAAK,IAAM8c,CAAX,IAAgB96B,IAAhB,EAAsB;AAClB;AACA,YAAIA,IAAI,CAAC2b,cAAL,CAAoBmf,CAApB,CAAJ,EAA4B;AACxB9c,eAAK,CAACve,IAAN,CAAW;AAAEs7B,gBAAI,EAAED,CAAR;AAAWh1B,iBAAK,EAAE9F,IAAI,CAAC86B,CAAD,CAAtB;AAA2BE,iBAAK,EAAE,IAAIC,MAAJ,CAAWH,CAAX,EAAc,IAAd;AAAlC,WAAX;AACH;AACJ;;AACD9c,WAAK,CAACrF,IAAN,CAAW,UAAC3E,CAAD,EAAIC,CAAJ;AAAA,eAAUA,CAAC,CAAC8mB,IAAF,CAAOvhC,MAAP,GAAgBwa,CAAC,CAAC+mB,IAAF,CAAOvhC,MAAvB,IAAiCwa,CAAC,CAAC+mB,IAAF,CAAOhc,aAAP,CAAqB9K,CAAC,CAAC8mB,IAAvB,CAA3C;AAAA,OAAX;AACA,UAAMr0B,SAAS,GAAGsB,IAAI,CAAC0L,KAAL,CAAW1L,IAAI,CAACC,SAAL,CAAevH,KAAK,IAAI,EAAxB,CAAX,CAAlB;AACA;;AACA,UAAItF,MAAJ,EAAY;AACR4Z,eAAO,GAAGtO,SAAS,CAACtL,MAAV,CAAiB,UAAC6E,IAAD,EAAU;AACjC,cAAIi7B,WAAW,GAAG,CAAlB;AACAj7B,cAAI,CAACk7B,WAAL,GAAmB,KAAnB;AACAl7B,cAAI,CAACmd,KAAL,GAAa,EAAb;AACA,cAAMge,UAAU,GAAG,EAAnB,CAJiC,CAKjC;;AALiC,uDAMjBhgB,MANiB;AAAA;;AAAA;AAMjC,sEAAwB;AAAA,kBAAb0f,EAAa;AACpBM,wBAAU,CAACN,EAAD,CAAV,GAAgB;AACZ59B,qBAAK,EAAE,CAAC+C,IAAI,CAAC66B,EAAD,CAAJ,IAAW,EAAZ,EAAgBl2B,WAAhB,EADK;AAEZtF,qBAAK,EAAE,KAFK;AAGZ+7B,uBAAO,EAAE;AAHG,eAAhB;AAKH,aAZgC,CAajC;;AAbiC;AAAA;AAAA;AAAA;AAAA;;AAAA,uDAcjBrd,KAdiB;AAAA;;AAAA;AAcjC,sEAAuB;AAAA,kBAAZ3iB,CAAY;;AACnB;AACA,kBAAIA,CAAC,CAAC0/B,IAAN,EAAY;AACR;AADQ,6DAEQ3f,MAFR;AAAA;;AAAA;AAER,4EAAwB;AAAA,wBAAb0f,GAAa;AACpB,wBAAM/6B,KAAK,GAAGq7B,UAAU,CAACN,GAAD,CAAxB;AACA,wBAAMx7B,KAAK,GAAGS,KAAK,CAAC7C,KAAN,CAAY6b,OAAZ,CAAoB1d,CAAC,CAAC0/B,IAAtB,CAAd;AACAh7B,yBAAK,CAACT,KAAN,GAAcA,KAAK,GAAGS,KAAK,CAACT,KAAd,GAAsBA,KAAtB,GAA8BS,KAAK,CAACT,KAAlD;AACAS,yBAAK,CAAC8c,OAAN,GAAgB,CAAC9c,KAAK,CAAC7C,KAAN,CAAYkgB,KAAZ,CAAkB/hB,CAAC,CAAC2/B,KAApB,KAA8B,EAA/B,EAAmCxhC,MAAnD;AACAuG,yBAAK,CAAC7C,KAAN,GAAc6C,KAAK,CAAC7C,KAAN,CAAYonB,OAAZ,CAAoBjpB,CAAC,CAAC2/B,KAAtB,EAA6B,GAA7B,CAAd;AACH,mBARO,CASR;;AATQ;AAAA;AAAA;AAAA;AAAA;;AAAA,6DAUQ5f,MAVR;AAAA;;AAAA;AAUR,4EAAwB;AAAA,wBAAb0f,GAAa;AACpB,wBAAM/6B,MAAK,GAAGq7B,UAAU,CAACN,GAAD,CAAxB;AACA;;AACA,wBAAI/6B,MAAK,CAAC8c,OAAN,IAAiBxhB,CAAC,CAACyK,KAAvB,EAA8B;AAC1Bo1B,iCAAW,GADe,CAE1B;;AACA,0BAAII,OAAO,GAAG,CAAd;AACA,0BAAMC,MAAM,GAAG,CAACt7B,IAAI,iBAAU66B,GAAV,EAAJ,IAAsB76B,IAAI,CAAC66B,GAAD,CAA1B,IAAiC,EAAlC,EAAsC7c,KAAtC,CAA4C,GAA5C,CAAf;;AAJ0B,mEAKVsd,MALU;AAAA;;AAAA;AAK1B,kFAAwB;AAAA,8BAAbC,CAAa;;AACpB;AACA,8BAAIF,OAAO,IAAIjgC,CAAC,CAACyK,KAAjB,EAAwB;AACpB;AACH;AACD;;;AACA,8BAAI01B,CAAC,CAAC52B,WAAF,GAAgBmU,OAAhB,CAAwB1d,CAAC,CAAC0/B,IAA1B,KAAmC,CAAnC,IAAwCS,CAAC,CAACziB,OAAF,CAAU,GAAV,IAAiB,CAA7D,EAAgE;AAC5DwiB,kCAAM,CAACA,MAAM,CAACxiB,OAAP,CAAeyiB,CAAf,CAAD,CAAN,GAA4BA,CAAC,CAAClX,OAAF,CAAUjpB,CAAC,CAAC2/B,KAAZ,EAAmB,MAAnB,CAA5B;AACAM,mCAAO;AACV;AACJ;AAfyB;AAAA;AAAA;AAAA;AAAA;;AAgB1Br7B,0BAAI,iBAAU66B,GAAV,EAAJ,GAAqBS,MAAM,CAACxhC,IAAP,CAAY,GAAZ,CAArB;AACA;AACH;AACJ;AAhCO;AAAA;AAAA;AAAA;AAAA;AAiCX;AACJ,aAlDgC,CAmDjC;;AAnDiC;AAAA;AAAA;AAAA;AAAA;;AAAA,uDAoDjBqhB,MApDiB;AAAA;;AAAA;AAoDjC,sEAAwB;AAAA,kBAAb0f,GAAa;AACpB,kBAAM/6B,OAAK,GAAGq7B,UAAU,CAACN,GAAD,CAAxB;AACA;;AACA,kBAAI/6B,OAAK,CAACT,KAAN,GAAcW,IAAI,CAACk7B,WAAnB,IAAkCp7B,OAAK,CAACT,KAAN,IAAe,CAArD,EAAwD;AACpDW,oBAAI,CAACk7B,WAAL,GAAmBp7B,OAAK,CAACT,KAAzB;AACAW,oBAAI,CAACmd,KAAL,GAAa0d,GAAb;AACH;AACJ;AA3DgC;AAAA;AAAA;AAAA;AAAA;;AA4DjC,iBAAO76B,IAAI,CAACk7B,WAAL,IAAoB,CAApB,IAAyBl7B,IAAI,CAACmd,KAA9B,IAAuC8d,WAAW,IAAIld,KAAK,CAACxkB,MAAnE;AACH,SA7DS,CAAV;AA8DH,OA/DD,MA+DO;AACHwb,eAAO,GAAGtO,SAAV;AACH,OA5FwB,CA6FzB;;;AACAsO,aAAO,CAAC2D,IAAR,CAAa,UAAC3E,CAAD,EAAIC,CAAJ,EAAU;AACnB,YAAMhS,IAAI,GAAG+R,CAAC,CAACmnB,WAAF,GAAgBlnB,CAAC,CAACknB,WAA/B;AACA,eAAOl5B,IAAI,KAAK,CAAT,GAAa+R,CAAC,CAAC9Z,IAAF,CAAO6kB,aAAP,CAAqB9K,CAAC,CAAC/Z,IAAvB,CAAb,GAA4C+H,IAAnD;AACH,OAHD;AAIA,aAAO+S,OAAP;AACH;AAED;;;;;;AAIO,aAASymB,gBAAT,CAA0B1d,GAA1B,EAAqC;AACxC;AACA,UAAIA,GAAJ,EAAS;AACLA,WAAG,GAAGA,GAAG,CAACuG,OAAJ,CAAY,yBAAZ,EAAuC,mCAAvC,CAAN;AACAvG,WAAG,GAAGA,GAAG,CAACuG,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,CAAN;AACH;;AACD,aAAOvG,GAAP;AACH;AAED;;;;;;AAIO,aAAS2d,UAAT,CAAoBx6B,IAApB,EAAgC;AACnC,UAAM8c,KAAK,GAAG9c,IAAI,CAAC+c,KAAL,CAAW,GAAX,CAAd;AACA,UAAM3kB,IAAI,GAAG,kCAAK,GACb+I,IADQ,CACH,CAAC2b,KAAK,CAAC,CAAD,CADH,EAERpc,MAFQ,CAED,CAACoc,KAAK,CAAC,CAAD,CAFL,EAGRre,OAHQ,CAGA,GAHA,CAAb;AAIA,aAAOrG,IAAI,CAACsG,OAAL,EAAP;AACH;AAED;;;;;;;AAKO,aAAS+7B,SAAT,CAAmB75B,IAAnB,EAAoD;AAAA,UAAnBoH,KAAmB,uEAAH,CAAG;AACvD,aAAOrH,IAAI,CAACqH,KAAL,CAAWrH,IAAI,CAACyY,MAAL,MAAiBxY,IAAI,GAAGoH,KAAxB,CAAX,IAA6CA,KAApD;AACH;AAED;;;AACO,aAAS0yB,gBAAT,GAAyB;AAC5B,aAAOC,YAAY,KAAK,OAAL,GAAe,QAAlC;AACH;AAED;;;AACO,aAASA,YAAT,GAAqB;AACxB,UAAMviC,IAAI,GAAG,IAAI0e,IAAJ,EAAb;AACA,UAAM8jB,YAAY,GAAGxiC,IAAI,CAACyiC,kBAAL,EAArB;AACA,aAAOD,YAAY,CAAC/iB,OAAb,CAAqB,IAArB,IAA6B,CAA7B,IAAkC+iB,YAAY,CAAC/iB,OAAb,CAAqB,IAArB,IAA6B,CAAtE;AACH;AAED;;;;;;;AAKO,aAASijB,YAAT,CAAsBC,QAAtB,EAAwCC,QAAxC,EAA0D;AAC7D,UAAMpI,OAAO,GAAGlC,QAAQ,CAACuK,aAAT,CAAuB,GAAvB,CAAhB;AACArI,aAAO,CAACsI,YAAR,CAAqB,MAArB,EAA6B,mCAAmCC,kBAAkB,CAACH,QAAD,CAAlF;AACApI,aAAO,CAACsI,YAAR,CAAqB,UAArB,EAAiCH,QAAjC;AAEAnI,aAAO,CAACwI,KAAR,CAAcxjB,OAAd,GAAwB,MAAxB;AACA8Y,cAAQ,CAACn2B,IAAT,CAAc8gC,WAAd,CAA0BzI,OAA1B;AAEAA,aAAO,CAAC0I,KAAR;AAEA5K,cAAQ,CAACn2B,IAAT,CAAcghC,WAAd,CAA0B3I,OAA1B;AACH;AAED;;;;;;AAIO,aAAS4I,SAAT,CAAmBC,GAAnB,EAAgC;AACnC,UAAMC,KAAK,GAAGD,GAAG,CAAC1e,KAAJ,CAAU,IAAV,CAAd;AACA,UAAI7C,MAAM,GAAGwhB,KAAK,CAACl9B,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsBue,KAAtB,CAA4B,GAA5B,CAAb;AACA7C,YAAM,GAAGA,MAAM,CAACvhB,GAAP,CAAW,UAACmf,CAAD;AAAA,eAAOA,CAAC,CAACsL,OAAF,CAAU,IAAV,EAAgB,EAAhB,CAAP;AAAA,OAAX,CAAT;AACA,UAAMtkB,IAAI,GAAU,EAApB;;AAJmC,mDAKhB48B,KALgB;AAAA;;AAAA;AAKnC,kEAA0B;AAAA,cAAfC,IAAe;AACtB,cAAI7e,KAAK,GAAG6e,IAAI,CAAC5e,KAAL,CAAW,GAAX,CAAZ;AACAD,eAAK,GAAGA,KAAK,CAACnkB,GAAN,CAAU,UAACmf,CAAD;AAAA,mBAAOA,CAAC,CAACsL,OAAF,CAAU,IAAV,EAAgB,EAAhB,CAAP;AAAA,WAAV,CAAR;AACA;;AACA,cAAItG,KAAK,CAACxkB,MAAN,IAAgB4hB,MAAM,CAAC5hB,MAA3B,EAAmC;AAC/B,gBAAMyG,IAAI,GAAQ,EAAlB;;AACA,iBAAK,IAAI5E,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI2iB,KAAK,CAACxkB,MAA3B,EAAmC6B,CAAC,EAApC,EAAwC;AACpC,kBAAIyhC,IAAI,GAAG,IAAX;AACAA,kBAAI,GAAG9e,KAAK,CAAC3iB,CAAD,CAAZ;AACA;;AACA,kBAAIyhC,IAAI,KAAKtpB,SAAb,EAAwB;AACpBvT,oBAAI,CAAC,CAACmb,MAAM,CAAC/f,CAAD,CAAN,IAAa,EAAd,EAAkB4iB,KAAlB,CAAwB,GAAxB,EAA6BlkB,IAA7B,CAAkC,GAAlC,EAAuC6K,WAAvC,EAAD,CAAJ,GAA6Dk4B,IAA7D;AACH;AACJ;;AACD98B,gBAAI,CAACP,IAAL,CAAUQ,IAAV;AACH;AACJ;AArBkC;AAAA;AAAA;AAAA;AAAA;;AAuBnC,aAAOD,IAAP;AACH;AAED;;;;;;AAIO,aAAS+8B,SAAT,CAAmBC,IAAnB,EAAoC;AACvC;AACA,UAAIA,IAAI,YAAY7xB,KAAhB,IAAyB6xB,IAAI,CAACxjC,MAAL,GAAc,CAA3C,EAA8C;AAC1C,YAAMpF,IAAI,GAAGiI,MAAM,CAACjI,IAAP,CAAY4oC,IAAI,CAAC,CAAD,CAAhB,CAAb;AACA,YAAMC,UAAU,GAAG7oC,IAAI,CAACgH,MAAL,CAAY,UAACkB,GAAD;AAAA,iBAAS0gC,IAAI,CAAC,CAAD,CAAJ,CAAQrhB,cAAR,CAAuBrf,GAAvB,CAAT;AAAA,SAAZ,CAAnB;AACA,+BAAgB2gC,UAAU,CAACljC,IAAX,CAAgB,GAAhB,CAAhB,eAAyCijC,IAAI,CACxCnjC,GADoC,CAChC,UAACoG,IAAD;AAAA,iBAAUg9B,UAAU,CAACpjC,GAAX,CAAe,UAACyC,GAAD;AAAA,mBAAS2D,IAAI,CAAC3D,GAAD,CAAb;AAAA,WAAf,EAAmCvC,IAAnC,CAAwC,GAAxC,CAAV;AAAA,SADgC,EAEpCA,IAFoC,CAE/B,IAF+B,CAAzC;AAGH;;AACD,aAAO,EAAP;AACH;AAGD;;AACA;;;;;;AAIO,aAASmjC,QAAT,GAAoB;AACvB,UAAIC,EAAE,GAAG5lC,MAAM,CAACuiC,SAAP,CAAiBC,SAA1B;AAEA,UAAIqD,IAAI,GAAGD,EAAE,CAACpkB,OAAH,CAAW,OAAX,CAAX;;AACA,UAAIqkB,IAAI,GAAG,CAAX,EAAc;AACV;AACA,eAAOC,QAAQ,CAACF,EAAE,CAACG,SAAH,CAAaF,IAAI,GAAG,CAApB,EAAuBD,EAAE,CAACpkB,OAAH,CAAW,GAAX,EAAgBqkB,IAAhB,CAAvB,CAAD,EAAgD,EAAhD,CAAf;AACH;;AAED,UAAIG,OAAO,GAAGJ,EAAE,CAACpkB,OAAH,CAAW,UAAX,CAAd;;AACA,UAAIwkB,OAAO,GAAG,CAAd,EAAiB;AACb;AACA,YAAIC,EAAE,GAAGL,EAAE,CAACpkB,OAAH,CAAW,KAAX,CAAT;AACA,eAAOskB,QAAQ,CAACF,EAAE,CAACG,SAAH,CAAaE,EAAE,GAAG,CAAlB,EAAqBL,EAAE,CAACpkB,OAAH,CAAW,GAAX,EAAgBykB,EAAhB,CAArB,CAAD,EAA4C,EAA5C,CAAf;AACH;;AAED,UAAIC,IAAI,GAAGN,EAAE,CAACpkB,OAAH,CAAW,OAAX,CAAX;;AACA,UAAI0kB,IAAI,GAAG,CAAX,EAAc;AACV;AACA,eAAOJ,QAAQ,CAACF,EAAE,CAACG,SAAH,CAAaG,IAAI,GAAG,CAApB,EAAuBN,EAAE,CAACpkB,OAAH,CAAW,GAAX,EAAgB0kB,IAAhB,CAAvB,CAAD,EAAgD,EAAhD,CAAf;AACH,OApBsB,CAsBvB;;;AACA,aAAO,KAAP;AACH;AAED;;;;;;AAIO,aAASC,YAAT,CAAsBrlC,KAAtB,EAAoD;AACvD,UAAI,CAACA,KAAL,EAAY;AACR,eAAO;AAAE2oB,WAAC,EAAE,CAAC,CAAN;AAASG,WAAC,EAAE,CAAC;AAAb,SAAP;AACH;;AACD,UAAI9oB,KAAK,YAAYslC,UAArB,EAAiC;AAC7B,eAAO;AAAE3c,WAAC,EAAE3oB,KAAK,CAACulC,OAAX;AAAoBzc,WAAC,EAAE9oB,KAAK,CAACwlC;AAA7B,SAAP;AACH,OAFD,MAEO;AACH,eAAOxlC,KAAK,CAACylC,OAAN,IAAiBzlC,KAAK,CAACylC,OAAN,CAActkC,MAAd,GAAuB,CAAxC,GACD;AAAEwnB,WAAC,EAAE3oB,KAAK,CAACylC,OAAN,CAAc,CAAd,EAAiBF,OAAtB;AAA+Bzc,WAAC,EAAE9oB,KAAK,CAACylC,OAAN,CAAc,CAAd,EAAiBD;AAAnD,SADC,GAED;AAAE7c,WAAC,EAAE,CAAC,CAAN;AAASG,WAAC,EAAE,CAAC;AAAb,SAFN;AAGH;AACJ;AAED;;;;;;AAIO,aAAS4c,OAAT,CAA0BC,QAA1B,EAAyC;AAC5C,UAAMC,KAAK,sBAAOD,QAAP,CAAX;;AACA,UAAME,GAAG,GAAG,EAAZ;;AACA,aAAOD,KAAK,CAACzkC,MAAb,EAAqB;AACjB;AACA,YAAMmK,IAAI,GAAGs6B,KAAK,CAACE,GAAN,EAAb;;AACA,YAAIhzB,KAAK,CAACizB,OAAN,CAAcz6B,IAAd,CAAJ,EAAyB;AACrB;AACAs6B,eAAK,CAACx+B,IAAN,OAAAw+B,KAAK,qBAASt6B,IAAT,EAAL;AACH,SAHD,MAGO;AACHu6B,aAAG,CAACz+B,IAAJ,CAASkE,IAAT;AACH;AACJ,OAZ2C,CAa5C;;;AACA,aAAOu6B,GAAG,CAACG,OAAJ,EAAP;AACH;;;;;;;;;;;;;;;;;ACvXD;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAEA,QAAMC,SAAS,GAAG,IAAlB;AAEA;;;;;;AAKO,aAASC,YAAT,CAAsBxiB,OAAtB,EAAqF;AAAA,UAArCyiB,OAAqC,uEAAnB,kCAAK,GAAG5+B,OAAR,EAAmB;AACxF,UAAM21B,IAAI,GAAG,kCAAK,CAACiJ,OAAD,CAAlB;AACA,UAAMllC,IAAI,GAAG,kCAAK,CAACyiB,OAAO,CAAC7e,KAAR,IAAiBsW,SAAlB,CAAlB;AACA,aAAOla,IAAI,CAACyI,QAAL,CAAcwzB,IAAd,EAAoB,GAApB,IAA2B;AAAEj8B,YAAI,EAAEglC,SAAR;AAAmBp3B,eAAO,EAAE;AAA5B,OAA3B,GAAoG,IAA3G;AACH;AAED;;;;;;;AAKO,aAASu3B,sBAAT,CAAgCnlC,IAAhC,EAAmF;AAAA,UAArCklC,OAAqC,uEAAnB,kCAAK,GAAG5+B,OAAR,EAAmB;AACtF,aAAO,UAAC8+B,CAAD;AAAA,eAAOC,iBAAiB,CAACD,CAAD,EAAIplC,IAAJ,EAAUklC,OAAV,CAAxB;AAAA,OAAP;AACH;AAED;;;;;;;;AAMO,aAASG,iBAAT,CAA2B5iB,OAA3B,EAAqDziB,IAArD,EAAwG;AAAA,UAArCklC,OAAqC,uEAAnB,kCAAK,GAAG5+B,OAAR,EAAmB;AAC3G,UAAMoE,GAAG,GAAG,kCAAK,CAACw6B,OAAD,CAAjB;AACA,UAAMxgB,KAAK,GAAGjC,OAAO,CAAC7e,KAAR,CAAc+gB,KAAd,CAAoB,GAApB,CAAd;AACA,UAAM2gB,QAAQ,GAAG,kCAAK,CAACtlC,IAAD,CAAL,CAAY+I,IAAZ,CAAiB,CAAC2b,KAAK,CAAC,CAAD,CAAvB,EAA4Bpc,MAA5B,CAAmC,CAACoc,KAAK,CAAC,CAAD,CAAzC,CAAjB;AACA,aAAO4gB,QAAQ,CAAC78B,QAAT,CAAkBiC,GAAlB,EAAuB,GAAvB,IAA8B;AAAE7C,aAAK,EAAEm9B,SAAT;AAAoBp3B,eAAO,EAAE;AAA7B,OAA9B,GAA6G,IAApH;AACH;;AAEM,aAAS23B,qBAAT,GAAoE;AAAA,UAArCphB,GAAqC,uEAAvB,EAAuB;AAAA,UAAnBxG,GAAmB,uEAAL,GAAK;AACvE,aAAO,UAACynB,CAAD;AAAA,eAAOI,gBAAgB,CAACJ,CAAD,EAAIjhB,GAAJ,EAASxG,GAAT,CAAvB;AAAA,OAAP;AACH;;AAEM,aAAS6nB,gBAAT,CAA0B/iB,OAA1B,EAAyF;AAAA,UAArC0B,GAAqC,uEAAvB,EAAuB;AAAA,UAAnBxG,GAAmB,uEAAL,GAAK;;AAC5F,UAAI8E,OAAO,CAAC7e,KAAR,IAAiBugB,GAAG,IAAI,EAAxB,CAAJ,EAAiC;AAC7B,eAAO;AAAElkB,kBAAQ,EAAE+kC,SAAZ;AAAuBp3B,iBAAO,wCAAiCuW,GAAjC,oBAA8CA,GAAG,KAAK,CAAR,GAAY,GAAZ,GAAkB,EAAhE;AAA9B,SAAP;AACH,OAFD,MAEO,IAAI1B,OAAO,CAAC7e,KAAR,IAAiB+Z,GAAG,IAAI,GAAxB,CAAJ,EAAkC;AACrC,eAAO;AAAEzd,gBAAM,EAAE8kC,SAAV;AAAqBp3B,iBAAO,wCAAiC+P,GAAjC,oBAA8CA,GAAG,KAAK,CAAR,GAAY,GAAZ,GAAkB,EAAhE;AAA5B,SAAP;AACH;;AACD,aAAO,IAAP;AACH;;AAEM,aAAS8nB,sBAAT,CAAgC3kC,IAAhC,EAA6D;AAAA,UAAjBqjB,GAAiB,uEAAH,CAAG;AAChE,aAAO,UAACihB,CAAD;AAAA,eAAOM,iBAAiB,CAACN,CAAD,EAAItkC,IAAJ,EAAUqjB,GAAV,CAAxB;AAAA,OAAP;AACH;;AAEM,aAASuhB,iBAAT,CAA2BjjB,OAA3B,EAAqD3hB,IAArD,EAAkF;AAAA,UAAjBqjB,GAAiB,uEAAH,CAAG;;AACrF,UAAI,CAAC1B,OAAD,IAAY,EAAEA,OAAO,CAAC7e,KAAR,YAAyBiO,KAA3B,CAAhB,EAAmD;AAC/C,eAAOsS,GAAG,GAAG,CAAN,GACD;AAAEwhB,iBAAO,EAAE,IAAX;AAAiB/3B,iBAAO,uBAAgBuW,GAAhB,sBAA+BA,GAAG,KAAK,CAAR,GAAY,KAAZ,GAAoB,OAAnD;AAAxB,SADC,GAED,IAFN;AAGH;;AACD,UAAMzd,IAAI,GAAW+b,OAAO,CAAC7e,KAA7B;;AACA,UAAI9C,IAAJ,EAAU;AACN,YAAMya,MAAM,GAAG7U,IAAI,CAAC9E,IAAL,CAAU,UAAA8Y,CAAC;AAAA,iBAAIA,CAAC,CAAC1Y,KAAF,KAAYlB,IAAI,CAACkB,KAArB;AAAA,SAAX,CAAf;;AACA,YAAIuZ,MAAJ,EAAY;AAAE7U,cAAI,CAACN,MAAL,CAAYM,IAAI,CAAC+Y,OAAL,CAAalE,MAAb,CAAZ,EAAkC,CAAlC;AAAuC;AACxD;;AACD,aAAO7U,IAAI,CAACxG,MAAL,IAAeikB,GAAf,GAAqB,IAArB,GAA4B;AAC/B3X,aAAK,EAAE,IADwB;AAE/BoB,eAAO,uBAAgBuW,GAAhB,sBAA+BA,GAAG,KAAK,CAAR,GAAY,KAAZ,GAAoB,OAAnD;AAFwB,OAAnC;AAIH;;AAEM,aAASyhB,eAAT,CAAyBC,YAAzB,EAAwD;AAC3D,aAAO,UAACpjB,OAAD,EAA8B;AACjC,YAAMziB,IAAI,GAAG,kCAAK,CAAC6lC,YAAY,GAAGA,YAAY,CAACjiC,KAAhB,GAAwBsW,SAArC,CAAL,CAAqD1Y,GAArD,CAAyDihB,OAAO,CAAC7e,KAAR,IAAiB,EAA1E,EAA8E,GAA9E,CAAb;AACA,eAAO5D,IAAI,CAACyI,QAAL,CAAc,kCAAK,EAAnB,EAAuB,GAAvB,IAA8B;AAAEq9B,kBAAQ,EAAE;AAAZ,SAA9B,GAAmD,IAA1D;AACH,OAHD;AAIH;;;;;;;;;;;;;;;;;AChFD;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACEI;;AACI;;AACJ;;;;;;AACA;;AACI;;AACJ;;;;;;AAKgB;;AAAsD;;AAAkB;;;;;;AAAvC;;AAAqB;;AAAA;;;;;;AACtD;;;;;;;;AAAkC;;;;;;AAO9B;;AACI;;AAAkC;;AAAI;;AAC1C;;;;;;AACA;;AACI;;AAAkC;;AAAK;;AAC3C;;;;;;AACA;;AACI;;AACJ;;;;;;AAZZ;;AACI;;AAAqB;;AAAkB;;AACvC;;AACI;;AACI;;AAGA;;AAGA;;AAGJ;;AACJ;;AACJ;;;;;;AAdyB;;AAAA;;AAEH;;AAAA;;AACI;;AAAA;;AAGA;;AAAA;;;;;;AAflC;;AACI;;AACI;;AACI;;AACI;;AACA;;AACJ;;AACJ;;AACA;;AAgBJ;;AACJ;;;;;;AAvB4B;;AAAA;;AAET;;AAAA;;AACE;;AAAA;;AAGK;;AAAA;;;;QDFjBC,qB;;;;;;;AAMT,qCAAoB1pC,QAApB,EAA0DuX,OAA1D,EAA2E;AAAA;;AAAA;;AACvE;AADgB,iBAAAvX,QAAA,GAAAA,QAAA;AAAsC,iBAAAuX,OAAA,GAAAA,OAAA;AAAiB;AAE1E;AAED;;;;;mCA4Be;AAAA;;AACX,eAAK9W,YAAL,CACI,SADJ,EAEI,KAAKT,QAAL,CAAcsO,MAAd,CAA8C,SAA9C,EAAyD3N,SAAzD,CAAmE,UAAAgC,OAAO,EAAI;AAC1E,oBAAI,CAACgnC,aAAL,GAAqBhnC,OAArB;AACH,WAFD,CAFJ;;AAMA,eAAK3C,QAAL,CAAcU,WAAd,CAA0BmG,IAA1B,CAA+B,6DAAM,UAAAC,CAAC;AAAA,mBAAIA,CAAJ;AAAA,WAAP,CAA/B,EAA8CnG,SAA9C,CAAwD,YAAM;AAC1D,oBAAI,CAAC+7B,IAAL,GAAY,QAAI,CAAC18B,QAAL,CAAcuJ,OAAd,CAAsB,eAAtB,KAA0C;AAAErG,kBAAI,EAAE;AAAR,aAAtD;AACH,WAFD;AAGH;;;4BArCoB;AACjB,iBAAO,CAAC,KAAKlD,QAAL,CAAc4F,KAAd,CAAoBgkC,YAA5B;AACH;AAED;;;;4BACqB;AACjB,cAAI,KAAKD,aAAT,EAAwB;AACpB,iBAAK,IAAME,GAAX,IAAkB,KAAKF,aAAvB,EAAsC;AAClC,kBAAI,KAAKA,aAAL,CAAmBE,GAAnB,KAA2B,KAAKF,aAAL,CAAmBE,GAAnB,EAAwBjpC,KAAxB,KAAkC,SAAjE,EAA4E;AACxE,uBAAO,IAAP;AACH;AACJ;AACJ;;AACD,iBAAO,KAAP;AACH;AAED;;;;4BAC6B;AACzB,cAAMyJ,IAAI,GAAmB,EAA7B;;AACA,eAAK,IAAMw/B,GAAX,IAAkB,KAAKF,aAAvB,EAAsC;AAClC,gBAAI,KAAKA,aAAL,CAAmBE,GAAnB,CAAJ,EAA6B;AACzBx/B,kBAAI,CAACP,IAAL,CAAU,KAAK6/B,aAAL,CAAmBE,GAAnB,CAAV;AACH;AACJ;;AACD,iBAAOx/B,IAAP;AACH;;;;MApCsC,oE;;;uBAA9Bq/B,qB,EAAqB,yI,EAAA,uH;AAAA,K;;;YAArBA,qB;AAAqB,wC;AAAA,0F;AAAA,c;AAAA,a;AAAA,ohB;AAAA;AAAA;ACblC;;AACI;;AAGA;;AAGA;;AA0BJ;;;;AAhCsB;;AAAA;;AAGQ;;AAAA;;AAGC;;AAAA;;;;;;;;;;sEDMlBA,qB,EAAqB;cALjC,uDAKiC;eALvB;AACPpoC,kBAAQ,EAAE,mBADH;AAEPC,qBAAW,EAAE,wBAFN;AAGPC,mBAAS,EAAE,CAAC,wBAAD;AAHJ,S;AAKuB,Q;;;;;;;;;;;;;;;;;;;;;;;;AEdlC;AAAA;;;AAAA;AAAA;AAAA;;AAAO,QAAMsoC,WAAW,GAAG;AACzB5nC,gBAAU,EAAE;AADa,KAApB;;;;;;;;;;;;;;;;ACCP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyB6nC,eAAzB,CAAyC,yDAAzC,WACS,UAAA3mC,GAAG;AAAA,aAAIsW,OAAO,CAACG,KAAR,CAAczW,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ShellWrapperComponent } from './shell/shell.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: ShellWrapperComponent,\n        children: [\n            {\n                path: 'day-view',\n                loadChildren: () =>\n                    import('./shell/day-view/day-view.module').then(m => m.DayViewModule)\n            },\n            {\n                path: 'week-view',\n                loadChildren: () =>\n                    import('./shell/week-view/week-view.module').then(m => m.WeekViewModule)\n            },\n            {\n                path: 'catering',\n                loadChildren: () =>\n                    import('./shell/catering/catering.module').then(m => m.CateringModule)\n            },\n            {\n                path: 'visitors',\n                loadChildren: () =>\n                    import('./shell/visitors/visitors.module').then(m => m.VisitorsModule)\n            },\n            {\n                path: 'reports',\n                loadChildren: () =>\n                    import('./shell/reports/reports.module').then(m => m.ReportsModule)\n            },\n            { path: '**', redirectTo: 'day-view' }\n        ]\n    },\n    { path: '**', redirectTo: 'day-view' }\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes, { useHash: true })],\n    exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n","import { Component, ViewEncapsulation } from '@angular/core';\nimport { UploadManager, Amazon, Md5Workers } from '@acaprojects/ngx-uploads';\n\nimport { detectIE } from './shared/utilities/general.utilities';\nimport { BaseDirective } from './shared/base.directive';\nimport { ApplicationService } from './services/app.service';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: [\n        './styles/app.component.scss',\n        './styles/custom-element.styles.scss',\n        './styles/native-element.styles.scss',\n    ],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class AppComponent extends BaseDirective {\n    constructor(\n        private _uploads: UploadManager,\n        private _md5_workers: Md5Workers,\n        private _service: ApplicationService\n    ) {\n        super();\n        /* istanbul ignore if */\n        if (detectIE() && detectIE() < 12) {\n            location.href = `${location.origin}${location.pathname}assets/not-supported.html`;\n            return;\n        }\n        localStorage.removeItem('CONCIERGE.date');\n        this._md5_workers.setup('assets/md5_worker.js');\n        this.initUploads();\n    }\n\n    private initUploads() {\n        this.subscription(\n            'composer',\n            this._service.initialised.subscribe((state) => {\n                /* istanbul ignore else */\n                if (state) {\n                    this.timeout('init_uploads', () => {\n                        const token = this._service.Composer.auth.token;\n                        if (!token) {\n                            return setTimeout(() => this.initUploads(), 300);\n                        }\n                        this._uploads.token = token;\n                        this._uploads.autoStart = true;\n                        this._uploads.endpoint = '/api/staff/uploads';\n                        UploadManager.addProvider(Amazon);\n                    });\n                    this.unsub('composer');\n                }\n            })\n        );\n    }\n}\n","<div class=\"app\">\n    <router-outlet></router-outlet>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { MAT_LABEL_GLOBAL_OPTIONS } from '@angular/material/core';\n\nimport './shared/mocks';\n\nimport { ComposerModule } from '@placeos/composer';\nimport { AGoogleAnalyticsModule } from '@acaprojects/ngx-google-analytics';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\n\nimport { SharedOverlaysModule } from './overlays/overlays.module';\nimport { SharedContentModule } from './shared/shared.module';\n\nimport { ShellWrapperComponent } from './shell/shell.component';\n\ndeclare global {\n    interface Window {\n        app_loaded: boolean;\n    }\n}\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        ShellWrapperComponent,\n    ],\n    imports: [\n        BrowserModule,\n        BrowserAnimationsModule,\n        AppRoutingModule,\n        ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production }),\n        HttpClientModule,\n        FormsModule,\n        ComposerModule,\n        AGoogleAnalyticsModule,\n        SharedOverlaysModule,\n        SharedContentModule\n    ],\n    providers: [\n        { provide: MAT_LABEL_GLOBAL_OPTIONS, useValue: {float: 'nevet'} }\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n    constructor() {\n        window.app_loaded = true;\n    }\n}\n","import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material/dialog';\n\nimport { Booking } from 'src/app/services/data/bookings/booking.class';\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { HashMap } from 'src/app/shared/utilities/types.utilities';\nimport { Space } from 'src/app/services/data/spaces/space.class';\nimport { humaniseDuration } from 'src/app/shared/utilities/general.utilities';\nimport { User } from 'src/app/services/data/users/user.class';\nimport { CateringOrder } from 'src/app/services/data/catering/catering-order.class';\nimport { BookingModalComponent } from '../booking-modal/booking-modal.component';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'a-booking-confirm-modal',\n    templateUrl: './booking-confirm.component.html',\n    styleUrls: ['./booking-confirm.component.scss']\n})\nexport class BookingConfirmComponent extends BaseDirective {\n    /** Emitter for user actions on the modal */\n    @Output() public event = new EventEmitter();\n    /** Display string for changes are being processed */\n    public loading: string;\n    /** Whether space availability is being checked */\n    public checking_available: boolean;\n    /** Whether to show all attendees */\n    public show_attendees: boolean;\n    /** Whether to show all attendees */\n    public show_locations: boolean;\n    /** Whether to show all catering orders */\n    public show_orders: boolean;\n    /** Whether booking has succeeded */\n    public success: boolean;\n\n    /** Whether booking needs to be accepted */\n    public get is_request(): boolean {\n        const options = {\n            date: this.booking.changes.date || this.booking.date,\n            duration: this.booking.changes.duration || this.booking.duration,\n            host: this.organiser\n        };\n        return this.spaces.reduce((request, space) => request || space.byRequest(options), false);\n    }\n\n    /** Booking to confirm changes to */\n    public get booking(): Booking {\n        return this._data.booking;\n    }\n\n    /** Title of the displayed event */\n    public get title(): string {\n        return this.booking.changes.title || this.booking.title;\n    }\n\n    /** Display string of when the event will occur */\n    public get when(): string {\n        const date_value = this.booking.changes.date || this.booking.date;\n        const duration_value = this.booking.changes.duration || this.booking.duration;\n        const all_day = this.booking.changes.all_day || this.booking.all_day;\n        const date = dayjs(date_value);\n        const end = date.add(duration_value, 'm');\n        if (all_day || duration_value > 23 * 60) {\n            return `${date.format('DD MMM YYYY')} - All Day`;\n        } else {\n            if (date.isSame(end, 'd')) {\n                return `${date.format('DD MMM YYYY, h:mm A')} - ${end.format('h:mm A')}`;\n            } else {\n                return `${date.format('DD MMM YYYY, h:mm A')} - ${end.format(\n                    'DD MMM YYYY, h:mm A'\n                )}`;\n            }\n        }\n    }\n\n    /** Display string for the event's duration */\n    public get duration(): string {\n        const duration_value = this.booking.changes.duration || this.booking.duration;\n        return humaniseDuration(duration_value);\n    }\n\n    /** List of spaces associated with the event */\n    public get spaces(): Space[] {\n        const spaces =\n            this.booking.changes.space_ids ||\n            this.booking.space_ids;\n        return spaces.map(id => this._service.Spaces.find(id));\n    }\n\n    /** List of attendees associated with the event not including the host */\n    public get attendees(): User[] {\n        const attendees = this.booking.changes.attendees || this.booking.attendees;\n        return attendees.filter(i => i.email !== this.organiser.email);\n    }\n\n    /** Host of the event */\n    public get organiser(): User {\n        return (\n            this.booking.changes.organiser || this.booking.organiser || this._service.Users.current\n        );\n    }\n\n    /** Details about the event */\n    public get notes(): string {\n        return this.booking.changes.body || this.booking.body;\n    }\n\n    /** List of catering orders in the booking */\n    public get catering(): CateringOrder[] {\n        return (this.booking.changes.catering || this.booking.catering || []).map(order => {\n            const space: any = this.spaces.find(a_space => a_space.id === order.location_id) || {\n                level: {}\n            };\n            const building: any =\n                this._service.Organisation.buildings.find(bld => bld.id === space.level.id) || {};\n            return new CateringOrder({ ...order, location: space.name, symbol: building.currency });\n        });\n    }\n\n    /** Map of changes to the booking */\n    public get changes(): HashMap<boolean> {\n        if (!this.booking.id) {\n            return {};\n        }\n        const changes = this.booking.changes;\n        return Object.keys(changes).reduce((map, key) => {\n            if (changes[key]) {\n                map[key] = changes[key] !== this.booking[key];\n            }\n            return map;\n        }, {});\n    }\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog: MatDialog,\n        private _dialog_ref: MatDialogRef<BookingConfirmComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: { booking: Booking }\n    ) {\n        super();\n    }\n\n    /**\n     * Save booking changes\n     */\n    public saveChanges() {\n        this.loading = 'Checking availability of selected spaces';\n        this._dialog_ref.disableClose = true;\n        this.checkSpaceAvailability().then(\n            () => {\n                this.loading = 'Processing booking request...';\n                this.booking.save().then(\n                    () => {\n                        this.loading = null;\n                        this.success = true;\n                        this._dialog_ref.disableClose = false;\n                        this.event.emit({ type: 'success' });\n                        this._service.notifySuccess(\n                            `Successfully ${this.booking.id ? 'updated' : 'created'} booking`\n                        );\n                    },\n                    err => {\n                        this.loading = null;\n                        this._dialog_ref.disableClose = false;\n                        this._service.notifyError(\n                            `Error ${this.booking.id ? 'updating' : 'creating'} booking: ${err}`\n                        );\n                    }\n                );\n            },\n            err => {\n                this.loading = null;\n                this._dialog_ref.disableClose = false;\n                this._service.notifyError(`Error checking space availability: ${err}`);\n            }\n        );\n    }\n\n    public newBooking() {\n        this._dialog.open(BookingModalComponent, {\n            data: {\n                booking: new Booking({})\n            }\n        });\n        this._dialog_ref.close();\n    }\n\n    /**\n     * Check whether the selected spaces are available for the selected time period\n     */\n    public checkSpaceAvailability(): Promise<void> {\n        const spaces: Space[] = this.spaces;\n        if (\n            (this.booking.id && !this.changes.date && !this.changes.duration) ||\n            (spaces && spaces.length <= 0)\n        ) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            this._service.Spaces.available({\n                room_ids: spaces.map(space => space.id).join(','),\n                date: this.booking.changes.date || this.booking.date,\n                duration: this.booking.changes.duration || this.booking.duration\n            }).then(\n                space_list => {\n                    for (const space of space_list) {\n                        if (!space.was_available) {\n                            return reject(\n                                `${space.name} is not available at the select time period.`\n                            );\n                        }\n                    }\n                    resolve();\n                },\n                err => reject(err)\n            );\n        });\n    }\n}\n","<mat-dialog-content *ngIf=\"!loading; else load_state\">\n    <main>\n        <button name=\"close\" mat-icon-button mat-dialog-close>\n            <app-icon\n                [icon]=\"{ type: 'icon', class: 'material-icons', content: 'close' }\"\n            ></app-icon>\n        </button>\n        <div class=\"details\">\n            <img\n                [src]=\"\n                    success\n                        ? is_request\n                            ? 'assets/img/requested.svg'\n                            : 'assets/img/confirmed.svg'\n                        : 'assets/img/edit.svg'\n                \"\n            />\n            <div class=\"text\">\n                Booking Details\n                <span *ngIf=\"success && !is_request\">Confirmed!</span>\n                <span class=\"request\" *ngIf=\"success && is_request\">Requested!</span>\n            </div>\n            <div class=\"info\" *ngIf=\"success && is_request\">Please await confirmation of room</div>\n        </div>\n        <div class=\"field\" name=\"title\">\n            <label>Title<span *ngIf=\"changes.title\">*</span>:</label>\n            <div class=\"value\">{{ title || 'No title' }}</div>\n        </div>\n        <div class=\"field\" name=\"when\">\n            <label>When<span *ngIf=\"changes.date\">*</span>:</label>\n            <div class=\"value\">{{ when }}</div>\n        </div>\n        <div class=\"field\" name=\"duration\">\n            <label>Duration<span *ngIf=\"changes.duration\">*</span>:</label>\n            <div class=\"value\">{{ duration }}</div>\n        </div>\n        <div class=\"field multi\" name=\"location\">\n            <label\n                >Locations({{ spaces.length || '0' }})<span *ngIf=\"changes.location\">*</span\n                >:</label\n            >\n            <div class=\"value\">\n                <div class=\"list\" [class.shown]=\"show_locations\">\n                    <div class=\"list-item\" *ngFor=\"let item of spaces\" [title]=\"item?.name\">\n                        <div class=\"text\">{{ item?.name }}</div>\n                    </div>\n                    <div class=\"list-item\" *ngIf=\"!spaces.length\">No Locations</div>\n                </div>\n                <button\n                    class=\"show\"\n                    *ngIf=\"spaces.length > 5\"\n                    (touchrelease)=\"show_locations = !show_locations\"\n                >\n                    {{ show_locations ? 'Hide' : 'Show' }} Locations\n                </button>\n            </div>\n        </div>\n        <div class=\"field\" name=\"host\">\n            <label>Host<span *ngIf=\"changes.organiser_email\">*</span>:</label>\n            <div class=\"value\">{{ organiser?.name || organiser?.email }}</div>\n        </div>\n        <div class=\"field\" name=\"attendees\">\n            <label\n                >Attendees({{ attendees.length || '0' }})<span *ngIf=\"changes.attendees\">*</span\n                >:</label\n            >\n            <div class=\"value\">\n                <span *ngIf=\"!attendees || !attendees.length\">&lt;No Attendees&gt;</span>\n                <div class=\"list\" [class.shown]=\"show_attendees\">\n                    <div\n                        class=\"list-item\"\n                        *ngFor=\"let item of attendees\"\n                        [title]=\"item?.name + (item?.email ? '\\n' + item.email : '')\"\n                    >\n                        <div class=\"text\">\n                            <div class=\"name\">{{ item.name }}</div>\n                            <div class=\"email\" *ngIf=\"item.email\">\n                                <a [href]=\"'mailto:' + item.email + '?subject=' + booking.title\">{{\n                                    item.email\n                                }}</a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <button\n                    class=\"show\"\n                    *ngIf=\"attendees.length > 5\"\n                    (touchrelease)=\"show_attendees = !show_attendees\"\n                >\n                    {{ show_attendees ? 'Hide' : 'Show' }} Attendees\n                </button>\n            </div>\n        </div>\n        <div class=\"field\" name=\"notes\">\n            <label>Notes<span *ngIf=\"changes.body\">*</span>:</label>\n            <div class=\"value\" [innerHTML]=\"notes || 'No notes'\"></div>\n        </div>\n        <div class=\"field\" name=\"catering\">\n            <label\n                >Catering Orders({{ catering.length || '0' }})<span *ngIf=\"changes.catering\">*</span\n                >:</label\n            >\n            <div class=\"value\">\n                <div class=\"list\" [class.shown]=\"show_orders\">\n                    <div class=\"list-item\" *ngFor=\"let order of catering\">\n                        <div class=\"text\">\n                            <div class=\"name\">{{ order.location || '&lt;Removed&gt;' }}</div>\n                            <div class=\"email\">\n                                {{ order.item_count }} item{{ order.item_count === 1 ? '' : '' }} |\n                                {{ order.total / 100 | currency: order.symbol }}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <button\n                    class=\"show\"\n                    *ngIf=\"attendees.length > 5\"\n                    (touchrelease)=\"show_orders = !show_orders\"\n                >\n                    {{ show_orders ? 'Hide' : 'Show' }} Catering orders\n                </button>\n            </div>\n        </div>\n        <div class=\"info\" *ngIf=\"booking?.id\">\n            * - changed fields\n        </div>\n    </main>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <footer>\n        <ng-container *ngIf=\"!success; else success_actions\">\n            <button mat-button class=\"inverse\" mat-dialog-close>Edit</button>\n            <button mat-button (tapped)=\"saveChanges()\">Save</button>\n        </ng-container>\n    </footer>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <main>\n        <div class=\"info-block center\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n            <div class=\"text\">\n                {{ loading }}\n            </div>\n        </div>\n    </main>\n</ng-template>\n<ng-template #success_actions>\n    <button mat-button class=\"inverse\" name=\"new\" (tapped)=\"newBooking()\">New Booking</button>\n    <button mat-button mat-dialog-close>Close</button>\n</ng-template>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog, MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { first } from 'rxjs/operators';\n\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { Booking } from 'src/app/services/data/bookings/booking.class';\nimport { AvailableBookingFields } from 'src/app/shared/utilities/settings.interfaces';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { HashMap, DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { generateBookingForm } from 'src/app/services/data/bookings/booking.utilities';\nimport { CateringDetailsModalComponent, CateringDetailsModalData } from '../catering-details-modal/catering-details-modal.component';\nimport { BookingConfirmComponent } from '../booking-confirm/booking-confirm.component';\nimport { RequirementDetailsModalComponent, RequirementDetailsModalData } from '../requirement-details-modal/requirement-details-modal.component';\n\n\nexport interface BookingFlowEvent {\n    /** Type of flow event */\n    type: 'previous' | 'next' | 'reset' | 'close' | 'error';\n    /** Step which the event was emitted from */\n    step: string;\n    /** Additional metadata for the event */\n    metadata?: HashMap;\n}\n\nexport interface BookingModalData {\n    /** Booking to create/edit */\n    booking: Booking;\n    /** Whether to edit only catering */\n    only_catering?: boolean;\n}\n\n@Component({\n    selector: 'a-booking-modal',\n    templateUrl: './booking-modal.component.html',\n    styleUrls: ['./booking-modal.component.scss'],\n})\nexport class BookingModalComponent extends BaseDirective implements OnInit {\n    /** Form fields */\n    public form: FormGroup;\n    /** Form data store */\n    public booking: Booking;\n    /** Step of the booking flow that is currently active */\n    public flow_step: string;\n\n    /** Whether to edit only catering */\n    public get only_catering(): boolean {\n        return !!this._data.only_catering;\n    }\n\n    /** List of available booking fields for the form */\n    public get available_fields(): AvailableBookingFields[] {\n        return this._service.setting('app.booking.show_fields') || [];\n    }\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog: MatDialog,\n        private _dialog_ref: MatDialogRef<BookingModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: BookingModalData\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._dialog_ref.disableClose = true;\n        this._service.initialised.pipe(first(_ => _)).subscribe(() => {\n            this.flow_step = this._data.only_catering ? 'catering' : 'form';\n            this._service.Spaces.initialised.pipe(first(_ => _)).subscribe(() => {\n                this.loadFormData();\n            });\n        });\n    }\n\n    /**\n     * Handle events from child components\n     * @param event Booking flow event\n     */\n    public handleFlowEvent(event: BookingFlowEvent) {\n        /* istanbul ignore else */\n        if (event.type === 'next') {\n            this.toNextFlowStep(event);\n        } else if (event.type === 'previous') {\n            this.toPreviousFlowStep(event);\n        } else if (event.type === 'reset') {\n            this.resetForm();\n        }\n    }\n\n    public close() {\n        this._dialog_ref.close();\n    }\n\n    private toNextFlowStep(event: BookingFlowEvent) {\n        const space_list = this.form.controls.space_list.value;\n        switch (event.step) {\n            case 'search':\n                if (\n                    space_list &&\n                    space_list.length &&\n                    (!event.metadata || !event.metadata.ref || event.metadata.ref !== 'equipment')\n                ) {\n                    this.openEquipmentDetailsModal();\n                } else {\n                    if (this.form.controls.has_catering && this.form.controls.has_catering.value) {\n                        this.navigate('catering');\n                    } else {\n                        this.navigate('form');\n                        this.confirmBooking();\n                    }\n                }\n                break;\n            case 'catering':\n                const order_list = this.form.controls.catering.value;\n                if (\n                    order_list &&\n                    order_list.length &&\n                    (!event.metadata || !event.metadata.ref || event.metadata.ref !== 'details')\n                ) {\n                    this.openCateringDetailsModal();\n                } else {\n                    this.navigate('form');\n                    this.confirmBooking();\n                }\n                break;\n            case 'form':\n                this.navigate('search');\n                break;\n        }\n    }\n\n    private toPreviousFlowStep(event: BookingFlowEvent) {\n        switch (event.step) {\n            case 'search':\n                this.navigate('form');\n                break;\n            case 'catering':\n                /* istanbul ignore else */\n                if (!this._data.only_catering) {\n                    this.navigate('search');\n                }\n                break;\n        }\n    }\n\n    private navigate(route: string) {\n        this.flow_step = route;\n    }\n\n    /** Clear user changes to the form data */\n    private resetForm() {\n        this.booking.clearPendingChanges();\n        delete this.form;\n        this.form = generateBookingForm(\n            this.booking,\n            this._service.Users.current,\n            this.available_fields\n        );\n    }\n\n    /**\n     * Load existing form data or generate a new booking form\n     */\n    private loadFormData(): void {\n        let form_data: HashMap = this._data.booking.toJSON();\n        this.booking = new Booking(form_data);\n        this.form = generateBookingForm(\n            this.booking,\n            this._service.Users.current,\n            this.available_fields\n        );\n        /* istanbul ignore else */\n        if (form_data && form_data.room_ids && this.form.controls.space_list) {\n            this.form.controls.space_list.setValue(\n                form_data.room_ids.map(id => this._service.Spaces.find(id) || { id, name: id })\n            );\n        }\n    }\n\n    /** Open modal for adding equipment requirements to booking */\n    private openEquipmentDetailsModal() {\n        const ref = this._dialog.open<\n            RequirementDetailsModalComponent,\n            RequirementDetailsModalData\n        >(RequirementDetailsModalComponent, {\n            maxWidth: '95vw',\n            width: '32em',\n            data: {\n                spaces: this.form.controls.space_list.value,\n                notes_field: this.form.controls.notes,\n                codes_field: this.form.controls.equipment_codes,\n                head_counts_field: this.form.controls.expected_attendees\n            }\n        });\n        this.subscription(\n            'modal_events',\n            ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                /* istanbul ignore else */\n                if (event.reason === 'done') {\n                    this.toNextFlowStep({\n                        type: 'next',\n                        step: 'search',\n                        metadata: { ref: 'equipment' }\n                    });\n                    ref.close();\n                }\n            })\n        );\n        ref.afterClosed().subscribe(() => this.unsub('modal_events'));\n    }\n\n    /** Open modal for adding equipment requirements to booking */\n    private openCateringDetailsModal() {\n        const ref = this._dialog.open<CateringDetailsModalComponent, CateringDetailsModalData>(\n            CateringDetailsModalComponent,\n            {\n                maxWidth: '95vw',\n                width: '32em',\n                data: {\n                    spaces: this.form.controls.space_list.value,\n                    notes_field: this.form.controls.notes,\n                    catering: this.form.controls.catering\n                }\n            }\n        );\n        this.subscription(\n            'modal_events',\n            ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                /* istanbul ignore else */\n                if (event.reason === 'done') {\n                    this.toNextFlowStep({\n                        type: 'next',\n                        step: 'catering',\n                        metadata: { ref: 'details' }\n                    });\n                    ref.close();\n                }\n            })\n        );\n        ref.afterClosed().subscribe(() => this.unsub('modal_events'));\n    }\n\n    /**\n     * Open modal to confirm the booking details\n     */\n    private confirmBooking() {\n        /* istanbul ignore else */\n        if (!this.booking.has_changes) {\n            this._service.notifyInfo('No changes have been made to booking');\n            return;\n        }\n        /* istanbul ignore else */\n        if (this.form.valid) {\n            const dialog_ref = this._dialog.open(BookingConfirmComponent, {\n                width: '32em',\n                maxWidth: '95vw',\n                maxHeight: '95vh',\n                data: { booking: this.booking }\n            });\n            dialog_ref.componentInstance.event.subscribe(event => {\n                /* istanbul ignore else */\n                if (event.reason === 'done') {\n                    this.close();\n                }\n            });\n        }\n    }\n}\n","<header>\n    <div class=\"heading\">{{ booking?.id ? 'Edit' : 'New' }} Booking</div>\n    <button mat-icon-button mat-dialog-close (tapped)=\"close()\">\n        <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <main>\n        <ng-container [ngSwitch]=\"flow_step\">\n            <ng-container *ngSwitchCase=\"'search'\">\n                <booking-find-space\n                    *ngIf=\"form\"\n                    [spaces]=\"form.controls.space_list\"\n                    [form]=\"form\"\n                    (event)=\"handleFlowEvent($event)\"\n                ></booking-find-space>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'catering'\">\n                <booking-catering\n                    *ngIf=\"form\"\n                    [form]=\"form\"\n                    [only]=\"only_catering\"\n                    (event)=\"handleFlowEvent($event)\"\n                ></booking-catering>\n            </ng-container>\n            <ng-container *ngSwitchDefault>\n                <booking-spaces-form\n                    *ngIf=\"form\"\n                    [form]=\"form\"\n                    (event)=\"handleFlowEvent($event)\"\n                ></booking-spaces-form>\n            </ng-container>\n        </ng-container>\n    </main>\n</mat-dialog-content>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Space } from 'src/app/services/data/spaces/space.class';\nimport { BookingFlowEvent } from '../booking-modal.component';\nimport { CateringOrder } from 'src/app/services/data/catering/catering-order.class';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'booking-catering',\n    templateUrl: './catering.component.html',\n    styleUrls: ['./catering.component.scss'],\n})\nexport class BookingCateringComponent {\n    /** Form fields for the booking */\n    @Input() public form: FormGroup;\n    /** Whether catering is the only action in the flow */\n    @Input() public only: boolean;\n    /** Emitter for flow update events */\n    @Output() public event = new EventEmitter<BookingFlowEvent>();\n    /** Active order to display details for */\n    public active_order: CateringOrder;\n\n    /** Field for storing catering details */\n    public get catering_field() {\n        return this.form && this.form.controls.catering ? this.form.controls.catering : null;\n    }\n\n    /** List of spaces selected for the booking */\n    public get space_list(): Space[] {\n        return this.form && this.form.controls.space_list\n            ? this.form.controls.space_list.value\n            : [];\n    }\n\n    /** Date of the booking */\n    public get date(): number {\n        return this.form && this.form.controls.date\n            ? this.form.controls.date.value\n            : dayjs().startOf('m').valueOf();\n    }\n\n    /** Duration of the booking */\n    public get duration(): number {\n        return this.form && this.form.controls.duration ? this.form.controls.duration.value : 60;\n    }\n\n    /** Whether booking is all day */\n    public get all_day(): boolean {\n        return this.form && this.form.controls.all_day && this.form.controls.all_day.value;\n    }\n\n    /** Create a new catering order */\n    public newOrder(): void {\n        const order = new CateringOrder({});\n        this.active_order = order;\n    }\n\n    /** Handle changes to catering order */\n    public handleOrderEvent(order: CateringOrder) {\n        /* istanbul ignore else */\n        if (order) {\n            const orders = this.form.controls.catering.value;\n            const index = orders.findIndex((an_order) => order.id === an_order.id);\n            if (index < 0) {\n                orders.push(order);\n            } else {\n                orders.splice(index, 1, order);\n            }\n            this.form.controls.catering.setValue(orders);\n        }\n        this.active_order = null;\n    }\n}\n","<div class=\"catering\">\n    <ng-container *ngIf=\"!active_order; else order_display\">\n        <a-catering-order-list\n            [catering]=\"catering_field\"\n            [date]=\"date\"\n            [all_day]=\"all_day\"\n            [only_catering]=\"only\"\n            (order)=\"$event ? (active_order = $event) : newOrder()\"\n            (event)=\"event.emit($event)\"\n        ></a-catering-order-list>\n    </ng-container>\n</div>\n<ng-template #order_display>\n    <a-catering-order-details\n        [space_list]=\"space_list\"\n        [order]=\"active_order\"\n        [date]=\"date\"\n        [duration]=\"duration\"\n        [all_day]=\"all_day\"\n        (event)=\"$event ? handleOrderEvent($event) : active_order = null\"\n    ></a-catering-order-details>\n</ng-template>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nimport { CateringCategory } from 'src/app/services/data/catering/catering-category.class';\n\n@Component({\n    selector: 'a-category-display',\n    templateUrl: './category.component.html',\n    styleUrls: ['./category.component.scss']\n})\nexport class CateringMenuCategoryComponent implements OnInit {\n    /** Category to display details for */\n    @Input() public category: CateringCategory;\n    /** Form control for the list of order items */\n    @Input() public items: FormControl;\n    /** Currency symbol for the active space */\n    @Input() public symbol: string;\n    /** Whether item should be disabled if not available anytime */\n    @Input() public disabled: boolean;\n    /** Emitter for close events */\n    @Output() public close = new EventEmitter<void>();\n\n    constructor() {}\n\n    ngOnInit(): void {}\n}\n","\n<div class=\"header\">\n    <div class=\"content\">\n        <button mat-icon-button (tapped)=\"close.emit()\">\n            <app-icon [icon]=\"{ class: 'material-icons', content: 'arrow_back' }\"></app-icon>\n        </button>\n        <div class=\"name\">{{ category?.name }}</div>\n    </div>\n</div>\n<ng-container *ngIf=\"category.items && category.items.length; else empty_state\">\n    <div class=\"item\" *ngFor=\"let item of category.items\">\n        <a-catering-order-item [disabled]=\"disabled\" [symbol]=\"symbol\" [item]=\"item\" [field]=\"items\"></a-catering-order-item>\n    </div>\n</ng-container>\n<ng-template #empty_state>\n    <div class=\"info-block center\">\n        <div class=\"icon\">\n            <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n        </div>\n        <div class=\"text\" i18n=\"Catering category empty label\">Category contains no available items</div>\n    </div>\n</ng-template>\n","import { Component, OnInit, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { FormControl } from '@angular/forms';\n\nimport { CateringCategory } from 'src/app/services/data/catering/catering-category.class';\nimport { ANIMATION_SHOW_CONTRACT_EXPAND } from 'src/app/shared/globals/angular-animations';\nimport { CateringItem } from 'src/app/services/data/catering/catering-item.class';\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { PackageOptionsModalComponent } from 'src/app/overlays/package-options-modal/package-options-modal.component';\n\n@Component({\n    selector: 'a-catering-order-item',\n    templateUrl: './item.component.html',\n    styleUrls: ['./item.component.scss'],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND],\n})\nexport class CateringMenuItemComponent extends BaseDirective implements OnChanges {\n    /** Whether item is a child of another */\n    @Input() public subitem: boolean;\n    /** Item to display */\n    @Input() public item: CateringCategory;\n    /** Field for storing items */\n    @Input() public field: FormControl;\n    /** Current symbol for the selected space */\n    @Input() public symbol: string;\n    /** Whether item should be disabled if not available anytime */\n    @Input() public disabled: boolean;\n    /** Whether to show children items */\n    public show_children: boolean;\n\n    /** List of contents of the package */\n    public get contents(): string {\n        return this.item.items\n            ? this.item.items.reduce((list, item) => {\n                  /* istanbul ignore else */\n                  if (list) {\n                      list += '\\n\\n';\n                  }\n                  return (list += `${item.name}${\n                      (item as any).items\n                          ? (item as any).items.reduce(\n                                (a_list, an_item) =>\n                                    (a_list += `\\n ${an_item.amount ? '✓' : '•'} ${an_item.name} `),\n                                ''\n                            )\n                          : ''\n                  } ${item.amount ? '✓' : ''}`);\n              }, '')\n            : '';\n    }\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        /* istanbul ignore else */\n        if (changes.field && this.field) {\n            const list = this.field.value;\n            const item = list.find((an_item) => an_item.id === this.item.id);\n            this.item.setAmount(item ? item.amount : 0);\n            this.subscription(\n                'field_change',\n                this.field.valueChanges.subscribe((list) => {\n                    const item = list.find((an_item) => an_item.id === this.item.id);\n                    this.item.setAmount(item ? item.amount : 0);\n                })\n            );\n        }\n    }\n\n    /**\n     * Update the amount of the item in the order\n     * @param value New amount\n     */\n    public updateAmount(value: number) {\n        /* istanbul ignore else */\n        if (this.field) {\n            const list: CateringItem[] = this.field.value;\n            const item = list.find((an_item) => an_item.id === this.item.id);\n            if (item) {\n                this.item.setAmount(value);\n                item.setAmount(value);\n            } else {\n                const amount = this.item.amount;\n                this.item.setAmount(value);\n                if (this.item.package && amount < value) {\n                    this.selectPackageOptions().then(\n                        (confirmed_item) => {\n                            list.push(new CateringItem(confirmed_item));\n                            this.field.setValue(list.filter((an_item) => an_item.amount));\n                        },\n                        () => {\n                            this.item.setAmount(999);\n                            this.timeout('amount', () => this.item.setAmount(0), 5);\n                            this._service.notifyWarn(\n                                'Package options not selected. Item removed from order'\n                            );\n                        }\n                    );\n                } else {\n                    list.push(new CateringItem(this.item));\n                }\n            }\n            this.field.setValue(list.filter((an_item) => an_item.amount));\n        }\n    }\n\n    /** Reselect package options */\n    public updatePackageOptions(): void {\n        this.selectPackageOptions().then(\n            () => null,\n            () => null\n        );\n    }\n\n    /**\n     * Open modal for user to select package options\n     */\n    private selectPackageOptions(): Promise<CateringCategory> {\n        return new Promise((resolve, reject) => {\n            const ref = this._dialog.open(PackageOptionsModalComponent, {\n                maxWidth: '95vw',\n                data: {\n                    item: new CateringCategory(this.item),\n                },\n            });\n            let done = false;\n            ref.componentInstance.event.subscribe((event) => {\n                /* istanbul ignore else */\n                if (event.reason === 'done') {\n                    done = true;\n                    resolve(ref.componentInstance.item);\n                    ref.close();\n                }\n            });\n            ref.afterClosed().subscribe(() => {\n                /* istanbul ignore else */\n                if (!done) {\n                    reject();\n                }\n            });\n        });\n    }\n}\n","<div\n    class=\"catering-item\"\n    *ngIf=\"item\"\n    [class.subitem]=\"subitem\"\n    [attr.disabled]=\"disabled && !item.can_order_anytime\"\n>\n    <div\n        class=\"image\"\n        *ngIf=\"!subitem\"\n        [style.background-image]=\"'url(' + item.image_path + ')'\"\n    ></div>\n    <div class=\"details\">\n        <div class=\"name\">{{ item.name }}</div>\n        <div class=\"description\">{{ item.package ? '[Package] ' : '' }}{{ item.description }}</div>\n        <div class=\"options\">\n            <div class=\"option price mobile-only\" *ngIf=\"item.unit_price\">\n                {{ item.unit_price / 100 | currency: symbol }}\n            </div>\n            <div\n                class=\"option\"\n                *ngIf=\"item.package && item.items.length && !item.must_select\"\n                [matTooltip]=\"contents\"\n                i18n=\"Catering order item available options label\"\n            >\n                { item.items.length, plural, =1 { Contains {{ item.items.length }} item } other {\n                Contains {{ item.items.length }} items } }\n            </div>\n            <div\n                class=\"option\"\n                *ngIf=\"item.package && item.must_select && item.amount > 0\"\n                [matTooltip]=\"contents\"\n            >\n                {{ item.must_select }}\n                <span class=\"not-mobile\" i18n=\"Catering order item selected options label\">\n                    Selected\n                </span>\n            </div>\n            <button\n                mat-button\n                *ngIf=\"item.package && item.must_select && item.amount > 0\"\n                (tapped)=\"updatePackageOptions()\"\n                i18n=\"Catering order item options change action\"\n            >\n                Customise\n            </button>\n        </div>\n    </div>\n    <div class=\"option price not-mobile\" *ngIf=\"item.unit_price\">\n        {{ item.unit_price / 100 | currency: symbol }}\n    </div>\n    <a-counter\n        *ngIf=\"!item.items || item.package\"\n        [ngModel]=\"item.amount\"\n        (ngModelChange)=\"updateAmount($event)\"\n    ></a-counter>\n    <button\n        mat-icon-button\n        *ngIf=\"item.items && item.items.length && !item.package\"\n        (tapped)=\"show_children = !show_children\"\n    >\n        <app-icon\n            [icon]=\"{\n                class: 'material-icons',\n                content: show_children ? 'keyboard_arrow_up' : 'keyboard_arrow_down'\n            }\"\n        ></app-icon>\n    </button>\n</div>\n<div class=\"children\" [@show]=\"show_children ? 'show' : 'hide'\">\n    <a-catering-order-item\n        *ngFor=\"let sub_item of item.items\"\n        [subitem]=\"true\"\n        [symbol]=\"symbol\"\n        [item]=\"sub_item\"\n        [field]=\"field\"\n    ></a-catering-order-item>\n</div>\n","import { Component, OnInit, Input, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { FormGroup, FormControl } from '@angular/forms';\n\nimport { CateringCategory } from 'src/app/services/data/catering/catering-category.class';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { Space } from 'src/app/services/data/spaces/space.class';\nimport { Building } from 'src/app/services/data/organisation/building.class';\nimport { Identity, DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { CateringItem } from 'src/app/services/data/catering/catering-item.class';\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { CateringOrder } from 'src/app/services/data/catering/catering-order.class';\nimport { BookingCateringConfirmModalComponent, CateringConfirmModalData } from 'src/app/overlays/catering-confirm-modal/catering-confirm-modal.component';\n\nimport * as dayjs from 'dayjs';\nimport spacetime from 'spacetime';\n\n@Component({\n    selector: 'a-catering-order-details',\n    templateUrl: './order-details.component.html',\n    styleUrls: ['./order-details.component.scss'],\n})\nexport class BookingCateringOrderDetailsComponent extends BaseDirective implements OnInit {\n    /** Catering order to edit details of */\n    @Input() public order: CateringOrder;\n    /** Booking date */\n    @Input() public date: number;\n    /** Booking duration */\n    @Input() public duration: number;\n    /** Booking duration */\n    @Input() public space_list: Space[];\n    /** Whether booking is all day */\n    @Input() public all_day: boolean;\n    /** Emitter for changes to the catering order */\n    @Output() public event = new EventEmitter<CateringOrder>();\n    /** Form controls for order */\n    public form: FormGroup;\n    /** List of available catering item categories */\n    public category_list: CateringCategory[] = [];\n    /** Active category to display details for */\n    public active_category: CateringCategory;\n    /** List of available times for delivering catering */\n    public available_times: Identity[] = [];\n    /** Whether the menu is loading */\n    public loading: boolean;\n\n    /** Whether user is able to order from the currently selected space */\n    public get can_order(): boolean {\n        return (\n            (this.active_building.has_catering || this.category_list.length) &&\n            (!this.within_restricted_time || this.has_available_items)\n        );\n    }\n\n    /** Building associated with the selected space */\n    public get active_building(): Building {\n        const form_controls = (this.form || { controls: { space: { value: '' } } }).controls;\n        const space: Space = form_controls.space.value || { level: {} };\n        return this._service.Organisation.buildings.find(\n            (bld) => space.level.building_id === bld.id\n        ) || { catering_restricted_from: 0 } as any;\n    }\n\n    /** Currency code for the active building */\n    public get symbol(): string {\n        return this.active_building.currency || 'USD';\n    }\n\n    /** Number of items in the order */\n    public get item_count(): number {\n        return this.form\n            ? this.form.controls.items.value.reduce((total, item) => total + item.amount, 0)\n            : 0;\n    }\n\n    /** Whether booking time is outside of catering hours */\n    public get out_of_hours(): boolean {\n        return this.form.controls.start.value < 0;\n    }\n\n    /** Whether booking is with the restricted ordering period */\n    public get within_restricted_time(): boolean {\n        const building = this.active_building;\n        /* istanbul ignore else */\n        if (!building.catering_restricted_from || building.catering_restricted_from <= 0) {\n            return false;\n        }\n        const date = dayjs();\n        const restricted = dayjs(this.date).subtract(building.catering_restricted_from, 'h');\n        return date.isAfter(restricted, 's');\n    }\n\n    /** Whether items are available for order at anytime */\n    public get has_available_items(): boolean {\n        return this.category_list.reduce(\n            (available, category) => available || category.can_order_anytime,\n            false\n        );\n    }\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.loadMenu();\n        this.generateAvailableTimes();\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        /* istanbul ignore else */\n        if (changes.date || changes.duration) {\n            this.generateAvailableTimes();\n            /* istanbul ignore else */\n            if (\n                this.form &&\n                !this.available_times.find((time) => time.id === this.form.controls.start.value)\n            ) {\n                this.form.controls.start.setValue(this.available_times[0].id);\n            }\n        }\n        /* istanbul ignore else */\n        if (changes.space_list) {\n            /* istanbul ignore else */\n            if (this.form && this.space_list && !this.form.controls.space.value) {\n                this.form.controls.space.setValue(this.space_list[0]);\n            }\n        }\n        /* istanbul ignore else */\n        if (changes.order && this.order) {\n            this.initForm();\n        }\n    }\n\n    public initForm() {\n        this.form = new FormGroup({\n            id: new FormControl(this.order.id),\n            booking_date: new FormControl(\n                this.all_day ? dayjs(this.date).startOf('d').valueOf() : this.date\n            ),\n            space: new FormControl(\n                this._service.Spaces.find(this.order.location_id) || this.space_list[0]\n            ),\n            location_id: new FormControl(this.order.location_id || this.space_list[0].id),\n            start: new FormControl(this.order.delivery_time || this.available_times[0].id),\n            items: new FormControl(this.order.items.map((item) => new CateringItem(item))),\n        });\n        this.subscription(\n            'space_change',\n            this.form.controls.space.valueChanges.subscribe((space) => {\n                this.form.controls.location_id.setValue(space.id);\n                this.generateAvailableTimes();\n                if (\n                    !this.available_times.find((time) => time.id === this.form.controls.start.value)\n                ) {\n                    this.form.controls.start.setValue(this.available_times[0].id);\n                }\n                this.loadMenu();\n            })\n        );\n        this.generateAvailableTimes();\n        if (\n            this.form &&\n            !this.available_times.find((time) => time.id === this.form.controls.start.value)\n        ) {\n            this.form.controls.start.setValue(this.available_times[0].id);\n        }\n    }\n\n    public confirmOrder() {\n        const ref = this._dialog.open<\n            BookingCateringConfirmModalComponent,\n            CateringConfirmModalData\n        >(BookingCateringConfirmModalComponent, {\n            maxWidth: '95vw',\n            data: {\n                date: this.date,\n                form: this.form,\n            },\n        });\n        this.subscription(\n            'confirm_event',\n            ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                /* istanbul ignore else */\n                if (event.reason === 'done') {\n                    const order = new CateringOrder(this.form.value);\n                    this.event.emit(order);\n                    ref.close();\n                }\n            })\n        );\n        ref.afterClosed().subscribe(() => this.unsub('confirm_event'));\n    }\n\n    private loadMenu() {\n        const space: Space = this.form ? this.form.controls.space.value : null;\n        /* istanbul ignore else */\n        if (!space) {\n            return;\n        }\n        this.form.controls.items.setValue([]);\n        this.loading = true;\n        this._service.Menu.query({ room_id: space.id }).then(\n            (list) => {\n                this.loading = false;\n                this.category_list = list.map((i) => new CateringCategory(i));\n            },\n            () => (this.loading = false)\n        );\n    }\n\n    /** Generate a list of available delivery times for the given booking time */\n    private generateAvailableTimes() {\n        const start_date = this.all_day ? dayjs(this.date).startOf('d') : dayjs(this.date);\n        let { start, end } = this.generateStartAndEndTimes();\n        start = start.minute(Math.ceil(start.minute() / 5) * 5);\n        this.available_times = [];\n        while (start.isBefore(end, 'm')) {\n            this.available_times.push({\n                id: Math.abs(start_date.diff(start, 'm')),\n                name: start.format('h:mm A'),\n            });\n            start = start.add(5, 'm');\n        }\n        /* istanbul ignore else */\n        if (this.available_times.length === 0) {\n            this.available_times.push({ id: -1, name: 'Out of hours' });\n        }\n    }\n\n    private generateStartAndEndTimes(): { start: dayjs.Dayjs; end: dayjs.Dayjs } {\n        let start = dayjs(this.date);\n        /* istanbul ignore else */\n        if (this.all_day) {\n            start = start.startOf('d');\n        }\n        let end = this.all_day ? start.endOf('d') : start.add(this.duration, 'm');\n        let building_time = spacetime(start.toDate());\n        // const space: Space = this.form ? this.form.controls.space.value : null;\n        // if (space) {\n        //     const building = this._service.Organisation.buildings.find((bld) =>bld.id === space.level.building_id);\n        //     if (building && building.timezone) {\n        //         building_time = building_time.goto(building.timezone);\n        //     }\n        // }\n        building_time = building_time.hour(7);\n        const as_dayjs = dayjs(building_time.toLocalDate());\n        if (start.isBefore(as_dayjs, 'm')) {\n            start = as_dayjs;\n            end = start.add(13, 'h');\n        } else {\n            const possible_end = as_dayjs.hour(20);\n            if (end.isAfter(possible_end)) {\n                end = possible_end;\n            }\n        }\n        return { start, end };\n    }\n}\n","<div class=\"catering order-details\">\n    <div class=\"header\" *ngIf=\"form\">\n        <form [formGroup]=\"form\">\n            <div class=\"field\">\n                <label i18n=\"Catering order location label\">Deliver to:</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select formControlName=\"space\">\n                        <mat-option *ngFor=\"let space of space_list\" [value]=\"space\">\n                            {{ space.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"field\">\n                <label for=\"start\" i18n=\"Catering order delivery time label\">At:</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select name=\"start\" formControlName=\"start\">\n                        <mat-option *ngFor=\"let time of available_times\" [value]=\"time.id\">\n                            {{ time.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n        </form>\n    </div>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <ng-container *ngIf=\"!active_category; else category_display\">\n            <div class=\"contents\" *ngIf=\"can_order && category_list.length; else empty_state\">\n                <button\n                    mat-button\n                    class=\"category\"\n                    *ngFor=\"let item of category_list\"\n                    [style.background-image]=\"'url(' + item.image_path + ')'\"\n                    [disabled]=\"within_restricted_time && !item.can_order_anytime\"\n                    (tapped)=\"active_category = item\"\n                >\n                    <div class=\"overlay\"></div>\n                    <div class=\"name\">{{ item.name }}</div>\n                </button>\n            </div>\n        </ng-container>\n    </div>\n    <div class=\"footer\">\n        <button mat-button class=\"inverse\" (tapped)=\"event.emit()\" i18n=\"Catering order cancel action\">Back</button>\n        <button mat-button name=\"confirm\" [disabled]=\"!item_count || out_of_hours\" (tapped)=\"confirmOrder()\" i18n=\"Catering order confirm action\">\n            Confirm Order({{ item_count || '0' }})\n        </button>\n    </div>\n</div>\n<ng-template #empty_state>\n    <div class=\"empty-state center\">\n        <div class=\"icon\">\n            <img alt=\"No Catering Available\" src=\"assets/img/no-catering.svg\" />\n        </div>\n        <p i18n=\"Catering order unavailable\">\n            Catering is <span class=\"bold\">not available</span> for this booking.<br />\n            Catering must be ordered within business hours\n            <span *ngIf=\"active_building?.catering_restricted_from\" class=\"bold\">\n                at least {{ active_building?.catering_restricted_from || '0' }} hours in advance for\n                meetings\n            </span>\n            at {{ active_building?.name }}.\n        </p>\n    </div>\n</ng-template>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block center\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"48\"></mat-spinner>\n            </div>\n            <div class=\"text\" i18n=\"Catering order loading label\">Loading menu for {{ active_building?.name }}...</div>\n        </div>\n    </div>\n</ng-template>\n<ng-template #category_display>\n    <a-category-display\n        [category]=\"active_category\"\n        [symbol]=\"symbol\"\n        [items]=\"form.controls.items\"\n        [disabled]=\"within_restricted_time\"\n        (close)=\"active_category = null\"\n    ></a-category-display>\n</ng-template>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { CateringOrder } from 'src/app/services/data/catering/catering-order.class';\nimport { ApplicationService } from 'src/app/services/app.service';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'catering-order-list-item',\n    templateUrl: './item.component.html',\n    styleUrls: ['./item.component.scss']\n})\nexport class CateringOrderListItemComponent {\n    /** Catering order to display */\n    @Input() order: CateringOrder;\n    /** Selected datetime */\n    @Input() date: number;\n    /** Emitter for edit events */\n    @Output() public edit = new EventEmitter<void>();\n    /** Emitter for delete events */\n    @Output() public delete = new EventEmitter<void>();\n\n    /** Space selected for delivery */\n    public get space(): string {\n        const space = this._service.Spaces.find((this.order || {}).location_id) || { name: '' };\n        return space.name || '<No Location>';\n    }\n    /** Delivery time for the order */\n    public get delivery_time(): string {\n        /* istanbul ignore else */\n        if (!this.order) {\n            return '<Meeting Start>';\n        }\n        const date = dayjs(this.order.booking_date).add(\n            this.order.changes.delivery_time || this.order.delivery_time,\n            'm'\n        );\n        return date.format('h:mm A');\n    }\n\n    /** Total cost of the order */\n    public get order_cost(): number {\n        const items = (this.order || { items: [] }).items as any;\n        return items.reduce((amount, item) => amount + item.amount * item.unit_price, 0);\n    }\n\n    /** Number of items in the order */\n    public get item_count(): number {\n        const items = (this.order || { items: [] }).items as any;\n        return items.reduce((amount, item) => amount + item.amount, 0);\n    }\n\n    /** Currency symbol for the selected space */\n    public get symbol(): string {\n        const space = this._service.Spaces.find((this.order || {}).location_id);\n        /* istanbul ignore else */\n        if (!space || !space.level) {\n            return 'USD';\n        }\n        const building = this._service.Organisation.buildings.find(\n            bld => bld.id === space.level.building_id\n        ) || { currency: 'USD' };\n        return building.currency;\n    }\n\n    constructor(private _service: ApplicationService) {}\n}\n","<div class=\"details\" i18n=\"Catering order item delivery details\">\n    Deliver to <span>{{ space }}</span> at <span>{{ delivery_time }}</span>\n</div>\n<div class=\"group\">\n    <div class=\"cost\">\n        {{ item_count }}\n        <span i18n=\"Items\">{ item_count, plural, =1 { item } other { items } }</span>\n    </div>\n    <div class=\"cost\">{{ order_cost / 100 | currency: symbol }}</div>\n</div>\n<div class=\"actions\">\n    <button mat-icon-button name=\"edit\" (tapped)=\"edit.emit()\">\n        <app-icon [icon]=\"{ class: 'material-icons', content: 'edit' }\"></app-icon>\n    </button>\n    <button mat-icon-button name=\"delete\" class=\"inverse\" (tapped)=\"delete.emit()\">\n        <app-icon [icon]=\"{ class: 'material-icons', content: 'delete' }\"></app-icon>\n    </button>\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nimport { BookingFlowEvent } from '../../booking-modal.component';\nimport { CateringOrder } from 'src/app/services/data/catering/catering-order.class';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'a-catering-order-list',\n    templateUrl: './order-list.component.html',\n    styleUrls: ['./order-list.component.scss']\n})\nexport class BookingCateringOrderListComponent {\n    /** Form field for storing catering orders */\n    @Input() public catering: FormControl;\n    /** Selected datetime for the booking */\n    @Input() public date: number;\n    /** Whether booking is all day */\n    @Input() public all_day: boolean;\n    /** Whether catering is the only action in the flow */\n    @Input() public only_catering: boolean;\n    /** Emitter for flow update events */\n    @Output() public event = new EventEmitter<BookingFlowEvent>();\n    /** Emiiter for order events */\n    @Output() public order = new EventEmitter<CateringOrder>();\n\n    /** List of orders in the booking */\n    public get orders(): CateringOrder[] {\n        /* istanbul ignore else */\n        if (!this.catering) {\n            return [];\n        }\n        const orders = this.catering.value;\n        orders.forEach(\n            order =>\n                (order.booking_date = this.all_day\n                    ? dayjs(this.date)\n                          .startOf('d')\n                          .valueOf()\n                    : this.date)\n        );\n        return orders;\n    }\n\n    /** Emit event for a new catering order */\n    public newOrder() {\n        this.order.emit();\n    }\n\n    /** Emit event for editing existing order */\n    public editOrder(order: CateringOrder) {\n        this.order.emit(order);\n    }\n\n    /** Remove order from the list */\n    public deleteOrder(order: CateringOrder) {\n        const orders = this.orders;\n        const index = orders.findIndex(an_order => order.id === an_order.id);\n        /* istanbul ignore else */\n        if (index >= 0) {\n            orders.splice(index, 1);\n            this.catering.setValue(orders);\n        }\n    }\n\n    /**\n     * Proceed to the next step in the space booking flow\n     */\n    public next(): void {\n        this.event.emit({ type: 'next', step: 'catering' });\n    }\n\n    /** Move flow to previous step */\n    public previous(): void {\n        this.event.emit({ type: 'previous', step: 'catering' });\n    }\n}\n","<div class=\"catering order-list\">\n    <div class=\"header\">\n        <h3 i18n=\"Catering order list header\">Catering Orders</h3>\n    </div>\n    <div class=\"body\">\n        <ng-container *ngIf=\"orders && orders.length; else empty_state\">\n            <div class=\"list\">\n                <catering-order-list-item\n                    *ngFor=\"let order of orders\"\n                    [order]=\"order\"\n                    [date]=\"date\"\n                    (edit)=\"editOrder(order)\"\n                    (delete)=\"deleteOrder(order)\"\n                ></catering-order-list-item>\n            </div>\n            <button mat-button name=\"new\" (tapped)=\"newOrder()\" i18n=\"Catering order list add action\">\n                Add Order\n            </button>\n        </ng-container>\n    </div>\n    <div class=\"footer\">\n        <button\n            mat-button\n            class=\"inverse\"\n            name=\"previous\"\n            *ngIf=\"!only_catering\"\n            (tapped)=\"previous()\"\n            i18n=\"Catering order list cancel action\"\n        >\n            Back\n        </button>\n        <button mat-button name=\"next\" (tapped)=\"next()\" i18n=\"Catering order list continue action\">\n            Next\n        </button>\n    </div>\n</div>\n<ng-template #empty_state>\n    <div class=\"info-block center\">\n        <div class=\"icon\">\n            <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n        </div>\n        <div class=\"text\" i18n=\"Catering order list empty label\">No catering orders</div>\n        <button mat-button name=\"new\" (tapped)=\"newOrder()\" i18n=\"Catering order list add action\">\n            Add Order\n        </button>\n    </div>\n</ng-template>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { Building } from 'src/app/services/data/organisation/building.class';\nimport { unique } from 'src/app/shared/utilities/general.utilities';\n\nimport * as dayjs from 'dayjs';\nimport { ANIMATION_SHOW_CONTRACT_EXPAND } from 'src/app/shared/globals/angular-animations';\n\n@Component({\n    selector: 'booking-space-filters',\n    templateUrl: './filters.component.html',\n    styleUrls: ['./filters.component.scss'],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND]\n})\nexport class BookingSpaceFiltersComponent extends BaseDirective implements OnInit {\n    /** Date selected for the booking */\n    @Input() public date: FormControl;\n    /** List of location IDs being filtered on */\n    @Input() public locations: string[] = [];\n    /** Emitter for changes to location filter */\n    @Output() public locationsChange = new EventEmitter<string[]>();\n    /** List of available buildings */\n    public building_list: Building[] = [];\n    /** Whether to show the location list */\n    public show_locations: boolean;\n\n    /** Whether active date is current day */\n    public get is_today(): boolean {\n        const date = dayjs(this.date.value);\n        return dayjs().isSame(date, 'd');\n    }\n\n    /** Display string for the selected date */\n    public get date_display(): string {\n        const date = dayjs(this.date.value);\n        return this.is_today ? 'Today' : date.format('DD MMM YYYY');\n    }\n\n    /** List of filtered location */\n    public get location_list(): Building[] {\n        return this.locations.map(id => this.building_list.find(bld => bld.id === id));\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public changeDate(amount: number) {\n        let date = dayjs(this.date.value).add(amount, 'd');\n        const now = dayjs().startOf('m');\n        if (date.isBefore(now, 's')) {\n            date = now;\n        }\n        this.date.setValue(date.valueOf());\n    }\n\n    public ngOnInit(): void {\n        this.subscription('buildings', this._service.Organisation.listen('buildings').subscribe((bld_list) => {\n            this.building_list = bld_list;\n        }));\n    }\n\n    /**\n     * Update location filter to include the given building\n     * @param building Building to add\n     */\n    public addLocationFilter(building: Building): void {\n        this.locations.push(building.id);\n        this.locations = unique(this.locations);\n        this.locationsChange.emit(this.locations);\n    }\n\n    /**\n     * Remove location from the active filters\n     * @param building Building to remove\n     */\n    public removeLocationFilter(building: Building) {\n        this.locations.splice(\n            this.locations.findIndex(id => building.id === id),\n            1\n        );\n        this.locationsChange.emit(this.locations);\n    }\n}\n","<div class=\"space-filters\" *ngIf=\"date\">\n    <div class=\"actions\">\n        <div class=\"date\">\n            <button mat-icon-button [disabled]=\"is_today\" (tapped)=\"changeDate(-1)\">\n                <app-icon\n                    [icon]=\"{ class: 'material-icons', content: 'keyboard_arrow_left' }\"\n                ></app-icon>\n            </button>\n            <div class=\"text\">{{ date_display }}</div>\n            <button mat-icon-button (tapped)=\"changeDate(1)\">\n                <app-icon\n                    [icon]=\"{ class: 'material-icons', content: 'keyboard_arrow_right' }\"\n                ></app-icon>\n            </button>\n        </div>\n        <div class=\"location-list\">\n            <div class=\"inner\" (tapped)=\"show_locations = !show_locations\">\n                <img src=\"assets/img/location-img.svg\" />\n                <div class=\"text\" i18n=\"Booking space filters locations label\">Select locations(s)</div>\n                <app-icon\n                    [icon]=\"{\n                        class: 'material-icons',\n                        content: 'keyboard_arrow_' + (show_locations ? 'up' : 'down')\n                    }\"\n                ></app-icon>\n            </div>\n            <div\n                class=\"list\"\n                [@show]=\"show_locations ? 'show' : 'hide'\"\n            >\n            <div class=\"item\" *ngFor=\"let building of building_list\">\n                <mat-checkbox\n                    (change)=\"\n                        $event.checked\n                            ? addLocationFilter(building)\n                            : removeLocationFilter(building)\n                    \"\n                >\n                    <div class=\"building-name\">\n                        <div class=\"code\">{{ building.code }}</div>\n                        <div class=\"name\">{{ building.name }}</div>\n                        <div class=\"address\">{{ building.address }}</div>\n                    </div>\n                </mat-checkbox>\n            </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"filters\" *ngIf=\"location_list && location_list.length\">\n        <mat-chip-list aria-label=\"Location Filters\">\n            <mat-chip\n                *ngFor=\"let building of location_list\"\n                [id]=\"building.id\"\n                color=\"primary\"\n                [removable]=\"true\"\n                (removed)=\"removeLocationFilter(building)\"\n            >\n                {{ building.name }}\n                <app-icon\n                    matChipRemove\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'close' }\"\n                ></app-icon>\n            </mat-chip>\n        </mat-chip-list>\n    </div>\n</div>\n","import {\n    Component,\n    OnInit,\n    Input,\n    SimpleChanges,\n    EventEmitter,\n    Output,\n    OnChanges\n} from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged, switchMap, catchError, map, first } from 'rxjs/operators';\nimport { Observable, of, Subject } from 'rxjs';\n\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { Space, ISpaceAvailabilityOptions } from 'src/app/services/data/spaces/space.class';\nimport { BookingFlowEvent } from '../booking-modal.component';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'booking-find-space',\n    templateUrl: './find-space.component.html',\n    styleUrls: ['./find-space.component.scss']\n})\nexport class BookingFindSpaceComponent extends BaseDirective implements OnInit, OnChanges {\n    /** Form control for setting the active space */\n    @Input() public spaces: FormControl;\n    /** Form group for booking */\n    @Input() public form: FormGroup;\n    /** Emitter for flow update events */\n    @Output() public event = new EventEmitter<BookingFlowEvent>();\n\n    /** List of spaces available during the required period */\n    public space_list: Space[] = [];\n    /** List of users from an API search */\n    public search_results$: Observable<Space[]>;\n    /** Whether space list is loading */\n    public loading: boolean;\n    /** List of zones to filter the spaces on */\n    public zone_ids: string[] = [];\n    /** Subject holding the value of the search */\n    public readonly change$ = new Subject<string>();\n\n    /**  Whether multiple spaces are allowed to be selected */\n    public get multiple(): boolean {\n        return this._service.setting('app.booking.multiple_spaces');\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._service.Spaces.initialised.pipe(first(_ => _)).subscribe(() => {\n            // Listen for input changes\n            this.search_results$ = this.change$.pipe(\n                debounceTime(400),\n                distinctUntilChanged(),\n                switchMap(_ => {\n                    this.loading = true;\n                    const recurrence = this.form.controls.recurrence ? this.form.controls.recurrence.value : null;\n                    const recurrence_properties = recurrence && recurrence.period && recurrence.period !== 'None' ? {\n                        recurr_period: (recurrence.period || '').toLowerCase(),\n                        recurr_end: dayjs(recurrence.end).unix()\n                    } : {};\n                    const query: ISpaceAvailabilityOptions = {\n                        date: this.form.controls.date.value,\n                        duration: this.form.controls.duration.value,\n                        zone_ids: this._service.Organisation.building.id,\n                        bookable: true,\n                        ...recurrence_properties\n                    };\n                    /* istanbul ignore else */\n                    if (this.zone_ids && this.zone_ids.length) {\n                        query.zone_ids = this.zone_ids.join(',');\n                    }\n                    return this._service.Spaces.available(query);\n                }),\n                catchError(_ => of([])),\n                map((list: Space[]) => {\n                    this.loading = false;\n                    return list;\n                })\n            );\n            // Process API results\n            this.subscription(\n                'search_results',\n                this.search_results$.subscribe(list => (this.space_list = list))\n            );\n            this.change$.next('');\n        });\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        /* istanbul ignore else */\n        if (changes.form) {\n            const onChange = _ => this.change$.next(_);\n            /* istanbul ignore else */\n            if (this.form.controls.date) {\n                this.subscription(\n                    'date_field',\n                    this.form.controls.date.valueChanges.subscribe(onChange)\n                );\n            }\n            /* istanbul ignore else */\n            if (this.form.controls.duration) {\n                this.subscription(\n                    'duration_field',\n                    this.form.controls.duration.valueChanges.subscribe(onChange)\n                );\n            }\n        }\n    }\n\n    /**\n     * Update the selected space list\n     * @param space Space to add/toggle in the selected list\n     */\n    public selectSpace(space: Space) {\n        if (this.multiple) {\n            const list = this.spaces.value;\n            if (list.find(item => item.id === space.id)) {\n                this.spaces.setValue(list.filter(item => item.id !== space.id));\n            } else {\n                this.spaces.setValue(list.concat([space]));\n            }\n        } else {\n            this.spaces.setValue([space]);\n            this.event.emit({ type: 'next', step: 'search' });\n        }\n    }\n\n    /**\n     * Proceed to the next step in the space booking flow\n     */\n    public next(): void {\n        this.event.emit({ type: 'next', step: 'search' });\n    }\n\n    /** Move flow to previous step */\n    public previous(): void {\n        this.event.emit({ type: 'previous', step: 'search' });\n    }\n}\n","<div class=\"find-space\">\n    <div class=\"background\"></div>\n    <div class=\"header\">\n        <booking-space-filters\n            [date]=\"form.controls.date\"\n            [(locations)]=\"zone_ids\"\n            (locationsChange)=\"change$.next($event)\"\n        ></booking-space-filters>\n    </div>\n    <ng-container *ngIf=\"!loading; else load_state\">\n        <cdk-virtual-scroll-viewport\n            *ngIf=\"space_list && space_list.length; else empty_state\"\n            [itemSize]=\"130\"\n        >\n            <ng-container *cdkVirtualFor=\"let space of space_list\">\n                <a-booking-space-item\n                    [form]=\"form\"\n                    [space]=\"space\"\n                    [multi]=\"multiple\"\n                    (select)=\"selectSpace(space)\"\n                ></a-booking-space-item>\n            </ng-container>\n        </cdk-virtual-scroll-viewport>\n    </ng-container>\n    <div class=\"footer\">\n        <div class=\"box\">\n            <button\n                mat-button\n                class=\"inverse\"\n                name=\"previous\"\n                (tapped)=\"previous()\"\n                i18n=\"Booking spaces cancel action\"\n            >\n                Back\n            </button>\n            <button\n                mat-button\n                *ngIf=\"multiple\"\n                name=\"next\"\n                [disabled]=\"!spaces.value || !spaces.value.length\"\n                (tapped)=\"next()\"\n                i18n=\"Booking spaces continue action\"\n            >\n                Next\n            </button>\n        </div>\n    </div>\n</div>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block center\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"48\"></mat-spinner>\n            </div>\n            <div class=\"text\" i18n=\"Booking spaces loading label\">\n                Checking space availability...\n            </div>\n        </div>\n    </div>\n</ng-template>\n<ng-template #empty_state>\n    <div class=\"body\">\n        <div class=\"info-block center\">\n            <div class=\"icon\">\n                <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n            </div>\n            <div class=\"text\" i18n=\"Booking spaces empty label\">\n                No spaces available for the selected time\n            </div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { FormGroup } from '@angular/forms';\n\nimport { Space } from 'src/app/services/data/spaces/space.class';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport {\n    BookingRecurrenceDetails,\n    BookingRecurrenceSpaceDetails,\n} from 'src/app/services/data/bookings/booking.interfaces';\nimport { RecurrenceSpacesModalComponent, RecurrenceSpacesModalData } from 'src/app/overlays/recurrence-spaces-modal/recurrence-spaces-modal.component';\n\n@Component({\n    selector: 'a-booking-space-item',\n    templateUrl: './item.component.html',\n    styleUrls: ['./item.component.scss'],\n})\nexport class BookingSpaceItemComponent extends BaseDirective {\n    /** Space to display */\n    @Input() public space: Space;\n    /** Form fields for booking */\n    @Input() public form: FormGroup;\n    /** Whether multiple spaces are able to be selected */\n    @Input() public multi: boolean;\n    /** Emitter for select actions on the */\n    @Output() public select = new EventEmitter<void>();\n\n    /** Whether space image should be displayed */\n    public get show_image() {\n        return this._service.setting('app.space_display.show_images');\n    }\n\n    /** Whether this space is selected */\n    public get selected(): boolean {\n        /* istanbul ignore else */\n        if (!this.form && this.space) {\n            return false;\n        }\n        return (\n            this.form.controls.space_list &&\n            !!(this.form.controls.space_list.value || []).find(\n                (space) => space.id === this.space.id\n            )\n        );\n    }\n\n    /** Whether space is booked by request */\n    public get is_request(): boolean {\n        /* istanbul ignore else */\n        if (!this.form) {\n            return false;\n        }\n        return this.space.byRequest({\n            date: this.form.controls.date.value,\n            duration: this.form.controls.duration.value,\n            host: this.form.controls.organiser.value || this._service.Users.current,\n        });\n    }\n\n    public get availability(): string {\n        const count = this.space.recurr_available.reduce(\n            (count, ocurrence) => count + (ocurrence.available ? 1 : 0),\n            0\n        );\n        return count >= this.space.recurr_available.length\n            ? 'all'\n            : `${count} of ${this.space.recurr_available.length}`;\n    }\n\n    /** Display location of the space */\n    public get location(): string {\n        /* istanbul ignore else */\n        if (!this.space) {\n            return 'Unable to determine location';\n        }\n        const level = this.space.level;\n        const bld = this._service.Organisation.buildings.find(\n            (building) => building.id === level.building_id\n        );\n        return `${bld ? bld.name + ', ' : ''}${level.name}`;\n    }\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public selectSpace() {\n        if (!this.space.recurr_available || this.availability === 'all' || this.selected) {\n            this.select.emit();\n        } else {\n            const ref = this._dialog.open<\n                RecurrenceSpacesModalComponent,\n                RecurrenceSpacesModalData\n            >(RecurrenceSpacesModalComponent, {\n                width: 'auto',\n                height: 'auto',\n                maxWidth: '95vw',\n                maxHeight: '95vh',\n                data: {\n                    space: this.space,\n                    duration: this.form.controls.duration.value,\n                    host: this.form.controls.organiser.value,\n                    conflicts: this.form.controls.recurrence.value.conflicts || [],\n                },\n            });\n            this.subscription(\n                'recurr_conflicts',\n                ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                    /* istanbul ignore else */\n                    if (event.reason === 'done') {\n                        const recurr: BookingRecurrenceDetails = this.form.controls.recurrence\n                            .value;\n                        const conflict_list: BookingRecurrenceSpaceDetails[] =\n                            recurr.conflicts || [];\n                        for (const item of event.metadata) {\n                            const index = conflict_list.findIndex(\n                                (event) =>\n                                    event.date === item.date && event.replaces === item.replaces\n                            );\n                            if (index >= 0) {\n                                conflict_list.splice(index, 1, item);\n                            } else {\n                                conflict_list.push(item);\n                            }\n                        }\n                        this.form.controls.recurrence.setValue({\n                            ...recurr,\n                            conflicts: conflict_list,\n                        });\n                        this.select.emit();\n                        ref.close();\n                    }\n                })\n            );\n        }\n    }\n}\n","<div class=\"space-details\" *ngIf=\"space\" [class.with-image]=\"show_image\">\n    <div class=\"details\">\n        <div\n            class=\"image\"\n            *ngIf=\"space.image\"\n            [style.background-image]=\"'url(' + space.image + ')'\"\n        ></div>\n        <div class=\"overlay\"></div>\n        <div class=\"name\">{{ space.name }}</div>\n        <div class=\"info\">\n            <div class=\"location\">{{ location }}</div>\n            <div class=\"capacity\">\n                <app-icon\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'account_circle' }\"\n                ></app-icon>\n                {{ space.capacity || '0' }}\n            </div>\n        </div>\n        <div\n            class=\"info recurr\"\n            *ngIf=\"space.recurr_available && space.recurr_available.length\"\n            i18n=\"Booking space availability label\"\n        >\n            Available for&nbsp;<span>{{ availability }}</span\n            >&nbsp;meeting ocurrences\n        </div>\n    </div>\n    <div class=\"actions\">\n        <button\n            mat-button\n            name=\"select\"\n            [class.inverse]=\"multi && !selected\"\n            (tapped)=\"selectSpace()\"\n        >\n            {{ multi ? (selected ? 'Remove' : 'Select') : is_request ? 'Request' : 'Book' }}\n        </button>\n    </div>\n</div>\n","import { Component, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { BookingFlowEvent } from '../booking-modal.component';\n\n\n@Component({\n    selector: 'booking-spaces-form',\n    templateUrl: './form.component.html',\n    styleUrls: ['./form.component.scss']\n})\nexport class BookingSpaceFlowFormComponent {\n    /** Booking form fields */\n    @Input() public form: FormGroup;\n    /** Whether form is not the first page in the flow */\n    @Input() public can_return: boolean = false;\n    /** Emitter for flow update events */\n    @Output() public event = new EventEmitter<BookingFlowEvent>();\n\n    @ViewChild('container', { static: true }) private container: ElementRef<HTMLDivElement>;\n\n    /** Move flow to next step */\n    public next(): void {\n        this.form.markAllAsTouched();\n        /* istanbul ignore else */\n        if (this.form.valid) {\n            this.event.emit({ type: 'next', step: 'form' });\n        } else if (this.container) {\n            this.container.nativeElement.scrollIntoView({\n                behavior: 'smooth',\n                block: 'start',\n                inline: 'nearest'\n            });\n        }\n    }\n\n    /** Move flow to previous step */\n    public previous(): void {\n        this.event.emit({ type: 'previous', step: 'form' });\n    }\n\n    /** Reset form to initial state */\n    public resetForm(): void {\n        this.event.emit({ type: 'reset', step: 'form' });\n    }\n}\n","<div class=\"booking-form\" #container>\n    <form [formGroup]=\"form\" (ngSubmit)=\"next()\">\n        <div class=\"body\">\n            <a-booking-form [form]=\"form\"></a-booking-form>\n        </div>\n        <div class=\"footer\">\n            <button mat-button type=\"button\" name=\"return\" *ngIf=\"can_return\" class=\"inverse\" (tapped)=\"previous()\" i18n=\"Booking form cancel action\">Back</button>\n            <button mat-button type=\"submit\" i18n=\"Booking form continue action\">Next</button>\n        </div>\n    </form>\n</div>\n","import { Component, OnInit, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { FormGroup, FormControl } from '@angular/forms';\n\nimport { CateringItem } from 'src/app/services/data/catering/catering-item.class';\nimport { Space } from 'src/app/services/data/spaces/space.class';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { BaseDirective } from 'src/app/shared/base.directive';\n\nimport * as dayjs from 'dayjs';\n\nexport interface CateringConfirmModalData {\n    form: FormGroup;\n    date: number;\n}\n\n@Component({\n    selector: 'a-catering-confirm-modal',\n    templateUrl: './catering-confirm-modal.component.html',\n    styleUrls: ['./catering-confirm-modal.component.scss'],\n})\nexport class BookingCateringConfirmModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for user actions on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of selected items for the order */\n    public item_list: CateringItem[] = [];\n\n    /** Space selected for delivery */\n    public get space(): Space {\n        return this._data.form && this._data.form.controls.space\n            ? this._data.form.controls.space.value\n            : ({} as any);\n    }\n    /** Delivery time for the order */\n    public get delivery_time(): string {\n        const date = dayjs(this._data.date);\n        return date.format('h:mm A');\n    }\n\n    /** Form field for order items */\n    public get item_field(): FormControl {\n        return this._data.form.controls.items as any;\n    }\n\n    /** Total cost of the order */\n    public get order_cost(): number {\n        return this.item_list.reduce((amount, item) => amount + item.amount * item.unit_price, 0);\n    }\n\n    /** Currency symbol for the selected space */\n    public get symbol(): string {\n        /* istanbul ignore else */\n        if (!this.space || !this.space.level) {\n            return 'USD';\n        }\n        const building = this._service.Organisation.buildings.find(\n            (bld) => bld.id === this.space.level.building_id\n        ) || { currency: 'USD' };\n        return building.currency;\n    }\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog_ref: MatDialogRef<BookingCateringConfirmModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: CateringConfirmModalData\n    ) {\n        super();\n        if (!this._data.form) {\n            this._service.notifyError('No form data for order');\n            this._dialog_ref.close();\n        }\n    }\n\n    public ngOnInit(): void {\n        /* istanbul ignore else */\n        if (this._data.form.controls.items) {\n            this.subscription(\n                'item_list',\n                this._data.form.controls.items.valueChanges.subscribe((items) => {\n                    /* istanbul ignore else */\n                    if (!items || items.length <= 0) {\n                        this._dialog_ref.close();\n                    }\n                })\n            );\n        }\n        this.item_list = this._data.form.controls.items.value.map((item) => new CateringItem(item));\n    }\n}\n","<header>\n    <div class=\"heading\" i18n=\"Catering confirm order header\">Confirm Catering Order</div>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <main>\n        <div class=\"details\">\n            Delivering to <span>{{ space.name || '&lt;Unset&gt;' }}</span> at <span>{{ delivery_time }}</span>\n        </div>\n        <div class=\"list\">\n            <a-catering-order-item\n                *ngFor=\"let item of item_list\"\n                [field]=\"item_field\"\n                [subitem]=\"true\"\n                [item]=\"item\"\n                [symbol]=\"symbol\"\n            ></a-catering-order-item>\n        </div>\n        <div class=\"total\">\n            <label>Order Total:</label>\n            <div class=\"value\">{{ order_cost / 100 | currency:symbol }}</div>\n        </div>\n    </main>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <footer>\n        <button mat-button (tapped)=\"event.emit({ reason: 'done' })\" i18n=\"Catering confirm save action\">Save Order</button>\n    </footer>\n</mat-dialog-actions>\n","import { Component, OnInit, Inject, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, Validators, AbstractControl, FormControl } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { Space } from 'src/app/services/data/spaces/space.class';\nimport { HashMap, DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { BookingNote } from 'src/app/services/data/bookings/booking.interfaces';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { CateringOrder } from 'src/app/services/data/catering/catering-order.class';\n\nimport * as dayjs from 'dayjs';\n\nexport interface CateringDetailsModalData {\n    spaces: Space[];\n    notes_field: AbstractControl;\n    catering: AbstractControl;\n}\n\n@Component({\n    selector: 'a-catering-details-modal',\n    templateUrl: './catering-details-modal.component.html',\n    styleUrls: ['./catering-details-modal.component.scss'],\n})\nexport class CateringDetailsModalComponent implements OnInit {\n    /** Emitter for modal events */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Mapping of spaces to notes */\n    public notes: HashMap<string> = {};\n    /** Mapping of spaces to cost codes */\n    public codes: HashMap<string> = {};\n    /** Mapping of spaces to estimated head count */\n    public head_counts: HashMap<string> = {};\n    /** Mapping of spaces to form fields */\n    public form: HashMap<FormGroup> = {};\n    /** Map of spaces to whether they need a charge code */\n    public needs_charge_code: HashMap<boolean> = {};\n    /** Index of the active space */\n    public active_space: number = 0;\n\n    /** List of selected spaces */\n    public get space_list(): Space[] {\n        return this._data.spaces || [];\n    }\n\n    public get active_form(): FormGroup {\n        return this.form[this.space_list[this.active_space].id];\n    }\n\n    /** Whether form fields are valid */\n    public get is_valid(): boolean {\n        return this.space_list.reduce((valid, space) => valid && this.form[space.id].valid, true);\n    }\n\n    constructor(\n        private _service: ApplicationService,\n        @Inject(MAT_DIALOG_DATA) private _data: CateringDetailsModalData\n    ) {}\n\n    public ngOnInit(): void {\n        const note_list = this._data.notes_field.value.filter(\n            (note: BookingNote) => note.type === 'catering'\n        );\n        this.notes = note_list.reduce((map, note) => {\n            map[note.space] = note.message;\n            return map;\n        }, {});\n        this.codes = this._data.catering.value.reduce((map, order: CateringOrder) => {\n            map[order.location_id] = order.charge_code;\n            return map;\n        }, {});\n        this.generateFormFields();\n    }\n\n    public submit(): void {\n        this.space_list.forEach((space) => this.form[space.id].markAllAsTouched());\n        /* istanbul ignore else */\n        if (this.is_valid) {\n            // Update notes\n            const notes = this._data.notes_field.value.filter(\n                (note: BookingNote) => note.type !== 'catering'\n            );\n            const new_notes = this.space_list.map(\n                (space) =>\n                    ({\n                        author: this._service.Users.current.name,\n                        type: 'catering',\n                        message: this.form[space.id].controls.notes.value,\n                        space: space.id,\n                        date: dayjs().valueOf(),\n                    } as BookingNote)\n            );\n            this._data.notes_field.setValue(notes.concat(new_notes).filter((note) => note.message));\n            const orders = this._data.catering.value.map(\n                (order) =>\n                    new CateringOrder({\n                        ...order,\n                        charge_code: this.form[order.location_id].controls.code.value,\n                    })\n            );\n            this._data.catering.setValue(orders);\n            this.event.emit({ reason: 'done' });\n        }\n    }\n\n    /** Generate form fields for each space */\n    private generateFormFields(): void {\n        for (const space of this.space_list) {\n            this.form[space.id] = new FormGroup({\n                notes: new FormControl(this.notes[space.id] || ''),\n                code: new FormControl(this.codes[space.id] || ''),\n            });\n        }\n    }\n}\n","<div class=\"header\">\n    <div class=\"tabs\">\n        <mat-tab-group [(selectedIndex)]=\"active_space\">\n            <mat-tab\n                *ngFor=\"let space of space_list\"\n                [label]=\"space.name + (form[space.id].invalid && form[space.id].touched ? '*' : '')\"\n            ></mat-tab>\n        </mat-tab-group>\n    </div>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n    </button>\n</div>\n<mat-dialog-content>\n    <main>\n        <div class=\"details\">\n            <img src=\"assets/img/food-notes.svg\" />\n            <div class=\"text\">Please specify any allergies or gluten intolerances</div>\n        </div>\n        <form *ngIf=\"space_list[active_space] && active_form\" [formGroup]=\"active_form\">\n            <div class=\"field\">\n                <label for=\"equipment-notes\" i18n=\"Catering details equipment notes label\">\n                    (eg - allergies, in tolerances, no ice in drinks etc) Additional requests are\n                    handled in confidence.\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"equipment-notes\"\n                        formControlName=\"notes\"\n                        placeholder=\"Add notes here...\"\n                        i18n-placeholder\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"field\">\n                <label\n                    for=\"charge-code\"\n                    [class.error]=\"\n                        active_form.controls.code.touched && active_form.controls.code.invalid\n                    \"\n                    i18n=\"Catering details charge code label\"\n                >\n                    Charge Code<span *ngIf=\"needs_charge_code[space_list[active_space].id]\">*</span>\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"charge-code\"\n                        formControlName=\"code\"\n                        placeholder=\"Charge Code\"\n                        i18n-placeholder\n                    />\n                    <mat-error i18n=\"Catering details charge code error\">\n                        Charge Code is required\n                    </mat-error>\n                    <mat-hint i18n=\"Catering details charge code hint\">\n                        <span>Note:</span> Your booking will be confirmed before you are charged.\n                    </mat-hint>\n                </mat-form-field>\n            </div>\n        </form>\n    </main>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <footer>\n        <button mat-button (tapped)=\"submit()\" i18n=\"Catering details save action\">\n            Add to booking\n        </button>\n    </footer>\n</mat-dialog-actions>\n","import { Component, Output, EventEmitter, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { ApplicationIcon } from '../../shared/utilities/settings.interfaces';\nimport { DialogEvent } from '../../shared/utilities/types.utilities';\nimport { BaseDirective } from 'src/app/shared/base.directive';\n\nexport interface ConfirmModalData {\n    /** Title of the modal */\n    title: string;\n    /** Contents of the modal */\n    content: string;\n    /** Text displaed on the confirmation button */\n    action?: string;\n    /** Icon to display on the modal */\n    icon: ApplicationIcon;\n}\n\nexport const CONFIRM_METADATA = {\n    height: 'auto',\n    width: '24em',\n    maxHeight: 'calc(100vh - 2em)',\n    maxWidth: 'calc(100vw - 2em)'\n};\n\n@Component({\n    selector: 'confirm-modal',\n    templateUrl: './confirm-modal.component.html',\n    styleUrls: ['./confirm-modal.component.scss']\n})\nexport class ConfirmModalComponent extends BaseDirective {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Loading state */\n    public loading: string;\n\n    /** Title of the confirm modal */\n    public get title(): string {\n        return (this._data ? this._data.title : null) || 'Confirm';\n    }\n\n    /** Body of the confirm modal */\n    public get content(): string {\n        return (this._data ? this._data.content : null) || 'Are you sure?';\n    }\n\n    /** Display text on the confirm button */\n    public get action(): string {\n        return (this._data ? this._data.action : null) || 'Ok';\n    }\n\n    /** Display icon properties */\n    public get icon(): ApplicationIcon {\n        return (this._data ? this._data.icon : null) || null;\n    }\n\n    constructor(\n        private _dialog: MatDialogRef<ConfirmModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: ConfirmModalData\n    ) {\n        super();\n    }\n    /**\n     * User confirmation of the content of the modal\n     */\n    public accept() {\n        this.event.emit({ reason: 'done' });\n    }\n}\n","<header>\n    <h3 mat-dialog-title>{{ title || 'Confirm' }}</h3>\n</header>\n<mat-dialog-content>\n    <div class=\"body\" *ngIf=\"!loading; else load_state\">\n        <app-icon *ngIf=\"icon\" [icon]=\"icon\"></app-icon>\n        <div class=\"content\">\n            <p [innerHTML]=\"content || 'Are you sure?'\"></p>\n        </div>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close i18n=\"Close confirm modal\">Cancel</button>\n    <button mat-button name=\"accept\" (tapped)=\"accept()\">{{ action || 'Ok' }}</button>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n            <div class=\"text\">{{ loading }}</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, OnInit, Input } from '@angular/core';\n\nimport { Booking } from 'src/app/services/data/bookings/booking.class';\nimport { CateringOrder } from 'src/app/services/data/catering/catering-order.class';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { BookingModalComponent } from '../../booking-modal/booking-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n    selector: 'meeting-catering',\n    templateUrl: './catering.component.html',\n    styleUrls: ['./catering.component.scss'],\n})\nexport class MeetingCateringDetailsComponent {\n    /** Booking to display details */\n    @Input() public booking: Booking;\n\n    /** List of orders for this booking and space */\n    public get orders(): CateringOrder[] {\n        return this.booking.catering.filter((order) => order.location_id === this.booking.space.id);\n    }\n\n    /** Total cost of all the orders */\n    public get total(): number {\n        let total = 0;\n        this.orders.forEach((order) => (total += order.total));\n        return total;\n    }\n\n    /** Charge code for orders in the active space */\n    public get charge_code(): string {\n        return (this.orders.length ? this.orders[0].charge_code : '') || '<No Charge code>';\n    }\n\n    /** Currency symbol for orders in active space */\n    public get symbol(): string {\n        const building = this._service.Organisation.buildings.find(\n            (bld) => bld.id === this.booking.space.level.building_id\n        ) || { currency: 'USD' };\n        return building.currency;\n    }\n\n    /** Notes for orders in active space */\n    public get notes(): string {\n        const note = this.booking.notes.find(\n            (note) =>\n                note.type === 'catering' &&\n                note.space === this.booking.space.id &&\n                note.author === this.booking.creator.name\n        );\n        return note ? note.message : '<No Notes>';\n    }\n\n    /** Whether booking has been declined or ended */\n    public get expired(): boolean {\n        return this.booking.status === 'done' || this.booking.declined;\n    }\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {}\n\n    /** Store the order details for viewing in another component */\n    public storeOrder(order: CateringOrder) {\n        localStorage.setItem('CONCIERGE.view_order', JSON.stringify(order.toJSON()));\n        localStorage.setItem('CONCIERGE.view_booking', JSON.stringify(this.booking.toJSON()));\n        localStorage.setItem('CONCIERGE.date', `${this.booking.date}`);\n    }\n\n    /** Open modal to edit catering details for booking */\n    public editMeetingCatering() {\n        this._dialog.open(BookingModalComponent, {\n            data: {\n                booking: this.booking,\n                only_catering: true,\n            },\n        });\n    }\n}\n","<div class=\"heading\">\n    Catering\n</div>\n<div class=\"content\" *ngIf=\"booking\">\n    <div class=\"field\">\n        <label for=\"orders\">Orders:</label>\n        <div class=\"value\" name=\"orders\" *ngIf=\"orders.length; else no_orders\">\n            <a\n                mat-button\n                *ngFor=\"let order of orders\"\n                [routerLink]=\"['/catering', 'orders']\"\n                [queryParams]=\"{ view: order.id }\"\n                (click)=\"storeOrder(order)\"\n                mat-dialog-close\n            >\n                <div class=\"details\">\n                    <div class=\"time\">At {{ order.deliver_at_time }}</div>\n                    <div class=\"count\">\n                        {{ order.item_count }} item{{ order.item_count === 1 ? '' : 's' }}\n                    </div>\n                    <div class=\"total\">{{ order.total / 100 | currency: order.symbol }}</div>\n                </div>\n            </a>\n        </div>\n    </div>\n    <div class=\"field\" [class.edited]=\"false\">\n        <label for=\"total\">Total:</label>\n        <div class=\"value\" name=\"total\">\n            {{ total / 100 | currency: symbol }}\n        </div>\n    </div>\n    <div class=\"field\" [class.edited]=\"false\">\n        <label for=\"charge-code\">Charge Code:</label>\n        <div class=\"value\" name=\"charge-code\">\n            {{ charge_code }}\n        </div>\n    </div>\n    <div class=\"field\" [class.edited]=\"false\">\n        <label for=\"notes\">Notes:</label>\n        <div class=\"value\" name=\"notes\">\n            {{ notes }}\n        </div>\n    </div>\n</div>\n<button class=\"footer\" mat-button name=\"edit\" *ngIf=\"!expired\" (tapped)=\"editMeetingCatering()\">\n    Edit Catering\n</button>\n<ng-template #no_orders>\n    <div class=\"value\" name=\"orders\">\n        &lt;No Catering Orders&gt;\n    </div>\n</ng-template>\n","import { Component, Input } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { Booking } from 'src/app/services/data/bookings/booking.class';\nimport { humaniseDuration } from 'src/app/shared/utilities/general.utilities';\nimport { RECURRENCE_PERIODS } from 'src/app/shared/utilities/formatting.utilities';\nimport { BookingModalComponent } from '../../booking-modal/booking-modal.component';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'meeting-details',\n    templateUrl: './details.component.html',\n    styleUrls: ['./details.component.scss'],\n})\nexport class MeetingDetailsDisplayComponent {\n    /** Booking to display details */\n    @Input() public booking: Booking;\n\n    /** Display string for the locations in the booking */\n    public get location() {\n        return this.booking.space_list.map((space) => space.name).join('\\n');\n    }\n    /** Display string for the booking duration */\n    public get duration() {\n        return this.booking ? humaniseDuration(this.booking.duration) : '1 hour';\n    }\n    /** Display string for attendees in booking */\n    public get start_time() {\n        return dayjs(this.booking.date).format('DD MMM YYYY, h:mm A');\n    }\n    /** Display string for attendees in booking */\n    public get end_time() {\n        return dayjs(this.booking.date)\n            .add(this.booking.duration, 'm')\n            .format('DD MMM YYYY, h:mm A');\n    }\n    /** Display string for attendees in booking */\n    public get attendees() {\n        return this.booking.attendees.map((person) => person.name).join('\\n');\n    }\n\n    /** Recurrence setting for booking */\n    public get recurrence(): string {\n        const { end, period } = this.booking.recurrence;\n        /* istanbul ignore if */\n        if (!period) {\n            return '<No recurrence>';\n        }\n        const pattern = RECURRENCE_PERIODS.find((i) => i.toLowerCase() === `${period}`);\n        const date = dayjs(end).format('DD MMM YYYY');\n        return `${pattern} until ${date}`;\n    }\n\n    /** Whether booking has been declined or ended */\n    public get expired(): boolean {\n        return this.booking.status === 'done' || this.booking.declined;\n    }\n\n    constructor(private _dialog: MatDialog) {}\n\n    public editMeeting() {\n        this._dialog.open(BookingModalComponent, {\n            data: {\n                booking: this.booking,\n            },\n        });\n    }\n}\n","<div class=\"heading\">\n    Meeting Details\n</div>\n<div class=\"content\" *ngIf=\"booking\">\n    <div class=\"field\" [class.edited]=\"true\">\n        <label for=\"host\">Host:</label>\n        <div class=\"value\" name=\"host\">\n            {{ booking.organiser?.name || booking.organiser_email }}\n        </div>\n        <div class=\"actions\">\n            <a\n                mat-icon-button\n                target=\"_blank\"\n                [href]=\"'mailto:' + booking.organiser_email + '?subject=' + booking.title\"\n            >\n                <app-icon [icon]=\"{ class: 'material-icons', content: 'mail' }\"></app-icon>\n            </a>\n            <a\n                mat-icon-button\n                [disabled]=\"!booking.organiser?.phone\"\n                target=\"_blank\"\n                [href]=\"'tel:' + booking.organiser?.phone\"\n            >\n                <app-icon [icon]=\"{ class: 'material-icons', content: 'call' }\"></app-icon>\n            </a>\n        </div>\n    </div>\n    <div class=\"field\" [class.edited]=\"false\">\n        <label for=\"location\">Location(s):</label>\n        <div class=\"value\" name=\"location\">\n            {{ location }}\n        </div>\n    </div>\n    <div class=\"field\" [class.edited]=\"false\">\n        <label for=\"start-time\">Start:</label>\n        <div class=\"value\" name=\"start-time\">\n            {{ start_time }}\n        </div>\n    </div>\n    <div class=\"field\" [class.edited]=\"false\">\n        <label for=\"end-time\">End:</label>\n        <div class=\"value\" name=\"end-time\">\n            {{ end_time }}\n        </div>\n    </div>\n    <div class=\"field\" [class.edited]=\"false\">\n        <label for=\"duration\">Duration:</label>\n        <div class=\"value\" name=\"duration\">\n            {{ duration }}\n        </div>\n    </div>\n    <div class=\"field\" [class.edited]=\"false\">\n        <label for=\"recurrence\">Recurrence:</label>\n        <div class=\"value\" name=\"recurrence\">\n            {{ recurrence }}\n        </div>\n    </div>\n    <div class=\"field\" [class.edited]=\"false\">\n        <label for=\"attendees\">Attendees:</label>\n        <div class=\"value\" name=\"attendees\">\n            {{ attendees }}\n        </div>\n    </div>\n    <div class=\"field\" [class.edited]=\"false\">\n        <label for=\"vc-equipment\">VC Equipment:</label>\n        <div class=\"value\" name=\"vc-equipment\">\n            No\n        </div>\n    </div>\n    <div class=\"field\" [class.edited]=\"false\">\n        <label for=\"notes\">Notes:</label>\n        <div class=\"value html\" name=\"notes\" [innerHTML]=\"booking.body | sanitize:'html'\"></div>\n    </div>\n</div>\n<button class=\"footer\" *ngIf=\"!expired\" mat-button (tapped)=\"editMeeting()\">\n    Edit Meeting\n</button>\n","<header [class]=\"type\">\n    <div class=\"time\">{{ booking.time_period }}</div>\n    <div class=\"heading\">{{ booking?.title }}</div>\n    <div class=\"actions\">\n        <button mat-icon-button name=\"menu\" [matMenuTriggerFor]=\"appMenu\" *ngIf=\"!loading\">\n            <app-icon\n                [icon]=\"{ type: 'icon', class: 'material-icons', content: 'more_vert' }\"\n            ></app-icon>\n        </button>\n        <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n            <app-icon\n                [icon]=\"{ type: 'icon', class: 'material-icons', content: 'close' }\"\n            ></app-icon>\n        </button>\n    </div>\n</header>\n<mat-dialog-content [class]=\"type\">\n    <main *ngIf=\"!loading; else load_state\">\n        <div class=\"block\">\n            <meeting-details [booking]=\"booking\"></meeting-details>\n        </div>\n        <div class=\"block\">\n            <meeting-details-requirements [booking]=\"booking\" (loading)=\"setLoading($event)\"></meeting-details-requirements>\n        </div>\n        <div class=\"block\">\n            <meeting-catering [booking]=\"booking\"></meeting-catering>\n        </div>\n        <div class=\"block\">\n            <meeting-private-details [booking]=\"booking\"></meeting-private-details>\n        </div>\n    </main>\n</mat-dialog-content>\n<mat-menu #appMenu=\"matMenu\">\n    <button mat-menu-item name=\"accept\" (tapped)=\"acceptMeeting()\">\n        <div class=\"group\">\n            <app-icon\n                [icon]=\"{ type: 'icon', class: 'material-icons', content: 'event_available' }\"\n            ></app-icon>\n            Accept Meeting\n        </div>\n    </button>\n    <button mat-menu-item name=\"decline\" (tapped)=\"declineMeeting()\">\n        <div class=\"group\">\n            <app-icon\n                [icon]=\"{ type: 'icon', class: 'material-icons', content: 'event_busy' }\"\n            ></app-icon>\n            Decline Meeting\n        </div>\n    </button>\n    <button mat-menu-item [class.error]=\"true\" name=\"delete\" (tapped)=\"confirmDeleteMeeting()\">\n        <div class=\"group\">\n            <app-icon\n                [icon]=\"{ type: 'icon', class: 'material-icons', content: 'delete' }\"\n            ></app-icon>\n            Delete Meeting\n        </div>\n    </button>\n</mat-menu>\n<ng-template #load_state>\n    <main>\n        <div class=\"info-block center\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n            <div class=\"text\">{{ loading }}</div>\n        </div>\n    </main>\n</ng-template>\n","import { Component, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\n\nimport { Booking } from 'src/app/services/data/bookings/booking.class';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport {\n    ConfirmModalComponent,\n    ConfirmModalData,\n    CONFIRM_METADATA,\n} from '../confirm-modal/confirm-modal.component';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { BaseDirective } from 'src/app/shared/base.directive';\n\nexport interface MeetingDetailsModalData {\n    booking: Booking;\n}\n\n@Component({\n    selector: 'a-meeting-details-modal',\n    templateUrl: './meeting-details-modal.component.html',\n    styleUrls: ['./meeting-details-modal.component.scss'],\n})\nexport class MeetingDetailsModalComponent extends BaseDirective {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Display string for the loading state */\n    public loading: string;\n    /** Handler for request errors */\n    private _on_error = (message) => (err) => {\n        this._service.notifyError(`${message}. Error: ${err.message || err}`);\n        this.setLoading(null);\n    };\n    /** Booking to view details */\n    public get booking(): Booking {\n        return this._data.booking;\n    }\n    /** Type of meeting */\n    public get type(): string {\n        return this.booking.declined ? 'declined' : this.booking.type;\n    }\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog_ref: MatDialogRef<MeetingDetailsModalComponent>,\n        private _dialog: MatDialog,\n        @Inject(MAT_DIALOG_DATA) private _data: MeetingDetailsModalData\n    ) {\n        super();\n    }\n\n    public setLoading(state: string) {\n        this.loading = state;\n        this._dialog_ref.disableClose = !!this.loading;\n    }\n\n    public acceptMeeting() {\n        this.setLoading('Accepting meeting...');\n        this._service.Bookings.accept(this.booking.id, {\n            comment: '',\n            room_id: this.booking.space.id,\n        }).then(() => {\n            this._service.notifySuccess('Meeting approved.');\n            this.booking.approval_status[this.booking.space.id] = 'accepted';\n            this.setLoading(null);\n            this.event.emit({ reason: 'action', metadata: 'approved' });\n        }, this._on_error('Unable to approving meeting'));\n    }\n\n    public declineMeeting() {\n        this.setLoading('Declining meeting...');\n        this._service.Bookings.decline(this.booking.id, {\n            booking_id: this.booking.id,\n            organiser: this.booking.organiser.email,\n            icaluid: this.booking.icaluid,\n            start: Math.floor(this.booking.date / 1000),\n            end: Math.floor(this.booking.date / 1000) + this.booking.duration * 60,\n            room_id: this.booking.space.id,\n        }).then(() => {\n            this._service.notifySuccess('Meeting declined.');\n            this.booking.approval_status[this.booking.space.id] = 'declined';\n            this.setLoading(null);\n            this.event.emit({ reason: 'action', metadata: 'declined' });\n        }, this._on_error('Unable to declining meeting'));\n    }\n\n    /** Open modal to confirm deletion of booking */\n    public confirmDeleteMeeting() {\n        const ref = this._dialog.open<ConfirmModalComponent, ConfirmModalData>(\n            ConfirmModalComponent,\n            {\n                ...CONFIRM_METADATA,\n                data: {\n                    title: 'Delete meeting',\n                    content: `Are you sure you want to delete the meeting in ${this.booking.space.name} at ${this.booking.date_string}, ${this.booking.start_time}?`,\n                    icon: { type: 'icon', class: 'material-icons', content: 'delete' },\n                },\n            }\n        );\n        this.subscription(\n            'confirm',\n            ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                /* istanbul ignore else */\n                if (event.reason === 'done') {\n                    this.deleteMeeting().catch(this._on_error('Error deleting booking'));\n                }\n                ref.close();\n            })\n        );\n        ref.afterClosed().subscribe(() => this.unsub('confirm'));\n    }\n\n    /** Delete booking */\n    private async deleteMeeting() {\n        this.setLoading('Deleting meeting...');\n        await this.booking.delete();\n        this._service.notifySuccess('Successfully deleted booking');\n        this.setLoading(null);\n        this.event.emit({ reason: 'action', metadata: 'removed' });\n        this._dialog_ref.close();\n    }\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Booking } from 'src/app/services/data/bookings/booking.class';\nimport { humaniseDuration } from 'src/app/shared/utilities/general.utilities';\nimport { MatDialog } from '@angular/material/dialog';\nimport { PrivateDetailsModalComponent } from '../../private-details-modal/private-details-modal.component';\n\n@Component({\n    selector: 'meeting-private-details',\n    templateUrl: './private-details.component.html',\n    styleUrls: ['./private-details.component.scss'],\n})\nexport class MeetingPrivateDetailsComponent implements OnInit {\n    /** Booking to display details */\n    @Input() public booking: Booking;\n\n    public get setup(): string {\n        return this.booking && this.booking.setup ? humaniseDuration(this.booking.setup) : '<No Setup time>';\n    }\n\n    public get breakdown(): string {\n        return this.booking && this.booking.breakdown ? humaniseDuration(this.booking.breakdown) : '<No Breakdown time>';\n    }\n\n    public get notes() {\n        return '';\n    }\n\n    constructor(private _dialog: MatDialog) {}\n\n    ngOnInit(): void {}\n\n    public openPrivateDetailsModal() {\n        this._dialog.open(PrivateDetailsModalComponent, {\n            data: {\n                booking: this.booking\n            }\n        });\n    }\n}\n","<div class=\"heading\">\n    Private Details\n</div>\n<div class=\"content\">\n    <div class=\"field\">\n        <label for=\"setup\">Setup:</label>\n        <div class=\"value\" name=\"setup\">\n            {{ setup }}\n        </div>\n    </div>\n    <div class=\"field\">\n        <label for=\"breakdown\">Breakdown:</label>\n        <div class=\"value\" name=\"breakdown\">\n            {{ breakdown }}\n        </div>\n    </div>\n    <div class=\"field\">\n        <label for=\"notes\">Private Notes:</label>\n        <div class=\"value\" name=\"notes\">\n            {{ notes || '&lt;No Notes&gt;' }}\n        </div>\n    </div>\n</div>\n<button class=\"footer\" mat-button (tapped)=\"openPrivateDetailsModal()\">\n    Edit Private Details\n</button>\n","<div class=\"heading\">\n    Room Requirements\n</div>\n<div class=\"content\" *ngIf=\"booking\">\n    <div class=\"field\">\n        <label for=\"location\">Location:</label>\n        <div class=\"value\" name=\"location\">\n            {{ booking.space?.name || booking.space_ids[0] }}\n        </div>\n    </div>\n    <div class=\"field\">\n        <label for=\"expected\">Expected Attendees:</label>\n        <div class=\"value\" name=\"expected\">\n            {{ (booking.expected_attendees || {})[booking.space?.id || booking.space_ids[0]] || '0' }}\n        </div>\n    </div>\n    <div class=\"field\">\n        <label for=\"charge-code\">Charge Code:</label>\n        <div class=\"value\" name=\"charge-code\">\n            {{ (booking.equipment_codes || {})[booking.space?.id || booking.space_ids[0]] || '&lt;No Charge Code&gt;' }}\n        </div>\n    </div>\n    <div class=\"field\">\n        <label for=\"notes\">Private Notes:</label>\n        <div class=\"value\" name=\"notes\">\n            {{ notes }}\n        </div>\n    </div>\n</div>\n<button class=\"footer\" mat-button *ngIf=\"!expired\" (tapped)=\"openEquipmentDetailsModal()\">\n    Edit Requirements\n</button>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Booking } from 'src/app/services/data/bookings/booking.class';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { RequirementDetailsModalComponent, RequirementDetailsModalData } from '../../requirement-details-modal/requirement-details-modal.component';\nimport { generateBookingForm } from 'src/app/services/data/bookings/booking.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { BaseDirective } from 'src/app/shared/base.directive';\n\n@Component({\n    selector: 'meeting-details-requirements',\n    templateUrl: './requirements.component.html',\n    styleUrls: ['./requirements.component.scss'],\n})\nexport class MeetingDetailsRequirementsComponent extends BaseDirective {\n    /** Booking to display details */\n    @Input() public booking: Booking;\n    /** Emitter for changes to the booking */\n    @Output() public bookingChange = new EventEmitter<Booking>();\n    /** Emitter for changes to the loading state */\n    @Output() public loading = new EventEmitter<string>()\n\n    /** Requirement notes */\n    public get notes(): string {\n        const note = this.booking.notes.find(\n            (note) => note.type === 'equipment' && this.booking.space.id === note.space\n        );\n        return (note ? note.message : '') || '<No Notes>';\n    }\n\n    /** Whether booking has been declined or ended */\n    public get expired(): boolean {\n        return this.booking.status === 'done' || this.booking.declined;\n    }\n\n    constructor(private _dialog: MatDialog, private _service: ApplicationService) {\n        super();\n    }\n\n\n    /** Open modal for adding equipment requirements to booking */\n    public openEquipmentDetailsModal() {\n        const form = generateBookingForm(this.booking, this._service.Users.current, ['space_list']);\n        const ref = this._dialog.open<\n            RequirementDetailsModalComponent,\n            RequirementDetailsModalData\n        >(RequirementDetailsModalComponent, {\n            maxWidth: '95vw',\n            width: '32em',\n            data: {\n                spaces: form.controls.space_list.value,\n                notes_field: form.controls.notes,\n                codes_field: form.controls.equipment_codes,\n                head_counts_field: form.controls.expected_attendees,\n                standalone: true\n            }\n        });\n        this.subscription(\n            'modal_events',\n            ref.componentInstance.event.subscribe(async (event: DialogEvent) => {\n                /* istanbul ignore else */\n                if (event.reason === 'done') {\n                    ref.close();\n                    this.loading.emit('Updating requirements...');\n                    const new_booking: Booking = await this.booking.save().catch((err) => {\n                        this._service.notifyError(`Error updating requirements. Error: ${err.message || err}`);\n                    }) as any;\n                    this.loading.emit(null);\n                    /* istanbul ignore else */\n                    if (new_booking) {\n                        this.booking = new_booking;\n                        this.bookingChange.emit(new_booking);\n                    }\n                }\n            })\n        );\n    }\n}\n","import { Component, OnInit, Inject, Output, EventEmitter } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup } from '@angular/forms';\n\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { generateUserForm } from 'src/app/services/data/users/user.utilities';\nimport { User } from 'src/app/services/data/users/user.class';\nimport { DialogEvent } from '../../shared/utilities/types.utilities';\n\n@Component({\n  selector: 'new-user-modal',\n  templateUrl: './new-user-modal.component.html',\n  styleUrls: ['./new-user-modal.component.scss']\n})\nexport class NewUserModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for the new user */\n    public form: FormGroup;\n    /** New user data store */\n    public user: User;\n    /** Whether user details are being saved */\n    public loading: boolean;\n\n    constructor(\n        private _dialog: MatDialogRef<NewUserModalComponent>,\n        private _service: ApplicationService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.user = new User({});\n        this.form = generateUserForm(this.user);\n    }\n\n    public saveChanges() {\n        this.form.markAllAsTouched();\n        if (this.form.valid) {\n            const new_user = new User({\n                ...this.form.value,\n                name: `${this.form.value.first_name} ${this.form.value.last_name}`,\n                type: 'external'\n            });\n            this.user.changeEvents.next({ type: 'item_saved', metadata: new_user });\n            this.event.emit({ reason: 'done', metadata: new_user });\n        }\n    }\n\n}\n","<header>\n    <h3 mat-dialog-title>Add External Attendee</h3>\n    <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n        <app-icon [icon]=\"{ type: 'icon', class: 'material-icons', content: 'close' }\"></app-icon>\n    </button>\n</header>\n<div class=\"body\" *ngIf=\"!loading; else load_state\">\n    <user-form [form]=\"form\"></user-form>\n</div>\n<footer *ngIf=\"!loading\">\n    <button mat-button class=\"inverse\" mat-dialog-close>Cancel</button>\n    <button mat-button (tapped)=\"saveChanges()\">Save</button>\n</footer>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n            <div class=\"text\">\n                Saving attendee...\n            </div>\n        </div>\n    </div>\n</ng-template>\n\n","\nimport { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { SharedContentModule } from '../shared/shared.module';\n\nimport { ConfirmModalComponent } from './confirm-modal/confirm-modal.component';\nimport { NewUserModalComponent } from './new-user-modal/new-user-modal.component';\nimport { SpaceSelectModalComponent } from './space-select-modal/space-select-modal.component';\nimport { RecurrenceModalComponent } from './recurrence-modal/recurrence-modal.component';\nimport { MeetingDetailsModalComponent } from './meeting-details-modal/meeting-details-modal.component';\nimport { MeetingDetailsDisplayComponent } from './meeting-details-modal/details/details.component';\nimport { MeetingDetailsRequirementsComponent } from './meeting-details-modal/requirements/requirements.component';\nimport { MeetingCateringDetailsComponent } from './meeting-details-modal/catering/catering.component';\nimport { MeetingPrivateDetailsComponent } from './meeting-details-modal/private-details/private-details.component';\nimport { PrivateDetailsModalComponent } from './private-details-modal/private-details-modal.component';\nimport { BookingModalComponent } from './booking-modal/booking-modal.component';\nimport { RequirementDetailsModalComponent } from './requirement-details-modal/requirement-details-modal.component';\nimport { RecurrenceSpacesModalComponent } from './recurrence-spaces-modal/recurrence-spaces-modal.component';\nimport { PackageOptionsModalComponent } from './package-options-modal/package-options-modal.component';\nimport { CateringDetailsModalComponent } from './catering-details-modal/catering-details-modal.component';\nimport { BookingCateringConfirmModalComponent } from './catering-confirm-modal/catering-confirm-modal.component';\nimport { BookingConfirmComponent } from './booking-confirm/booking-confirm.component';\nimport { BookingCateringComponent } from './booking-modal/catering/catering.component';\nimport { BookingFindSpaceComponent } from './booking-modal/find-space/find-space.component';\nimport { BookingSpaceFiltersComponent } from './booking-modal/find-space/filters/filters.component';\nimport { BookingSpaceItemComponent } from './booking-modal/find-space/item/item.component';\nimport { BookingSpaceFlowFormComponent } from './booking-modal/form/form.component';\nimport { BookingCateringOrderDetailsComponent } from './booking-modal/catering/order-details/order-details.component';\nimport { BookingCateringOrderListComponent } from './booking-modal/catering/order-list/order-list.component';\nimport { CateringOrderListItemComponent } from './booking-modal/catering/order-list/item/item.component';\nimport { CateringMenuCategoryComponent } from './booking-modal/catering/order-details/category/category.component';\nimport { CateringMenuItemComponent } from './booking-modal/catering/order-details/item/item.component';\n\nconst OVERLAYS: Type<any>[] = [\n    ConfirmModalComponent,\n    NewUserModalComponent,\n    SpaceSelectModalComponent,\n    RecurrenceModalComponent,\n    MeetingDetailsModalComponent,\n    PrivateDetailsModalComponent,\n    BookingModalComponent,\n    RequirementDetailsModalComponent,\n];\n\n@NgModule({\n    declarations: [\n        ...OVERLAYS,\n        MeetingDetailsDisplayComponent,\n        MeetingDetailsRequirementsComponent,\n        MeetingCateringDetailsComponent,\n        MeetingPrivateDetailsComponent,\n        RecurrenceSpacesModalComponent,\n        PackageOptionsModalComponent,\n        CateringDetailsModalComponent,\n        BookingCateringConfirmModalComponent,\n        BookingConfirmComponent,\n        BookingSpaceFlowFormComponent,\n        BookingCateringComponent,\n        BookingFindSpaceComponent,\n        BookingSpaceFiltersComponent,\n        BookingSpaceItemComponent,\n        BookingCateringComponent,\n        BookingCateringOrderDetailsComponent,\n        BookingCateringOrderListComponent,\n        CateringOrderListItemComponent,\n        CateringMenuCategoryComponent,\n        CateringMenuItemComponent\n    ],\n    imports: [\n        CommonModule,\n        SharedContentModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild([])\n    ],\n    exports: [\n        ...OVERLAYS\n    ]\n})\nexport class SharedOverlaysModule {}\n","import { Component, Output, EventEmitter, Inject } from '@angular/core';\n\nimport { DialogEvent, HashMap } from 'src/app/shared/utilities/types.utilities';\nimport { CateringCategory } from 'src/app/services/data/catering/catering-category.class';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { CateringItem } from 'src/app/services/data/catering/catering-item.class';\n\nexport interface PackageOptionsModalData {\n    item: CateringCategory;\n}\n\nexport function checkItemRequirements(category: CateringCategory): boolean {\n    const items = category.items;\n    return category.must_select >= items.length\n        ? items.reduce((valid, item) => valid && checkItemRequirements(item as any), true)\n        : items.reduce((amount, item) => (amount + item.amount ? 1 : 0), 0) ===\n              category.must_select;\n}\n\nexport function getActiveItems(category: CateringCategory): HashMap<string> {\n    let map = {};\n    if (category.items) {\n        const item = category.items.find(item  => item.amount > 0);\n        if (item) {\n            map[category.id] = item.id;\n        }\n        category.items.forEach(item => map = { ...map, ...getActiveItems(item as any) })\n    }\n    return map;\n}\n\n@Component({\n    selector: 'a-package-options-modal',\n    templateUrl: './package-options-modal.component.html',\n    styleUrls: ['./package-options-modal.component.scss']\n})\nexport class PackageOptionsModalComponent {\n    /** Emitter for user actions on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    /** Item to select options for */\n    public get item(): CateringCategory {\n        return this._data.item;\n    }\n\n    /** Whether package requirements have been met */\n    public get requirements_met(): boolean {\n        return checkItemRequirements(this.item);\n    }\n\n    public get active_items(): HashMap<string> {\n        return getActiveItems(this.item);\n    }\n\n    constructor(@Inject(MAT_DIALOG_DATA) private _data: PackageOptionsModalData) {}\n\n    /**\n     * Update the list of selected items\n     */\n    public updateAmount(a_package: CateringCategory, option: CateringItem, state: boolean) {\n        if (state) {\n            const needed = a_package.must_select;\n            const active = a_package.items.filter(an_item => an_item.amount > 0).length;\n            if (active >= needed) {\n                const item = a_package.items.find(an_item => an_item.amount > 0);\n                item.setAmount(0);\n            }\n            option.setAmount(1);\n        } else {\n            option.setAmount(0);\n        }\n    }\n}\n","<header>\n    <h3 i18n=\"Catering package options header\">Package Options</h3>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <main>\n        <ng-container *ngTemplateOutlet=\"item_display; context: { package: item }\"></ng-container>\n    </main>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <footer>\n        <button mat-button [disabled]=\"!requirements_met\" (tapped)=\"event.emit({ reason: 'done' })\" i18n=\"Catering package options save action\">\n            Confirm Options\n        </button>\n    </footer>\n</mat-dialog-actions>\n<ng-template #item_display let-package=\"package\">\n    <ng-container *ngIf=\"package.items && package.items.length\">\n        <mat-radio-group [ngModel]=\"active_items[package.id]\">\n            <div class=\"item\" *ngFor=\"let option of package.items\" [attr.to-select]=\"option.must_select\">\n            <ng-container\n                *ngIf=\"\n                    package.must_select &&\n                    package.must_select < package.items.length &&\n                    !option.must_select\n                \"\n            >\n                <mat-checkbox\n                    *ngIf=\"package.must_select > 1\"\n                    [checked]=\"!!option.amount\"\n                    (change)=\"updateAmount(package, option, $event.checked)\"\n                >\n                    {{ option.name }}\n                </mat-checkbox>\n                <mat-radio-button\n                    *ngIf=\"package.must_select === 1\"\n                    [value]=\"option.id\"\n                    (change)=\"updateAmount(package, option, true)\"\n                >\n                    {{ option.name }}\n                </mat-radio-button>\n            </ng-container>\n            <ng-container *ngIf=\"package.must_select >= package.items.length || option.must_select\">\n                {{ option.name }}\n            </ng-container>\n            <ng-container\n                *ngTemplateOutlet=\"item_display; context: { package: option }\"\n            ></ng-container>\n        </div>\n    </mat-radio-group>\n    </ng-container>\n</ng-template>\n","import { Component, OnInit, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { FormGroup, FormControl } from '@angular/forms';\n\nimport { Booking } from 'src/app/services/data/bookings/booking.class';\nimport { Identity, DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { humaniseDuration } from 'src/app/shared/utilities/general.utilities';\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { BookingNote } from 'src/app/services/data/bookings/booking.interfaces';\n\nimport * as dayjs from 'dayjs';\n\nexport interface PrivateDetailsModalData {\n    booking: Booking;\n}\n\n@Component({\n    selector: 'a-private-details-modal',\n    templateUrl: './private-details-modal.component.html',\n    styleUrls: ['./private-details-modal.component.scss'],\n})\nexport class PrivateDetailsModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form Fields for private details */\n    public form: FormGroup;\n    /** Whether changes are being saved */\n    public loading: boolean;\n    /** List of available durations for setup and breakdown */\n    public available_durations: Identity[] = new Array(5)\n        .fill(0)\n        .map((_, i) => ({ id: i * 15, name: humaniseDuration(i * 15) || '0 minutes' }));\n\n    public get booking(): Booking {\n        return this._data.booking;\n    }\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog_ref: MatDialogRef<PrivateDetailsModalComponent>,\n        @Inject(MAT_DIALOG_DATA) private _data: PrivateDetailsModalData\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        const note = this.booking.notes.find(\n            (note) => note.type === 'private' && note.space === this.booking.space.id\n        ) || { message: '' };\n        this.form = new FormGroup({\n            setup: new FormControl(this.booking.setup || 0),\n            breakdown: new FormControl(this.booking.breakdown || 0),\n            notes: new FormControl(note.message),\n        });\n        this.subscription(\n            'setup',\n            this.form.controls.setup.valueChanges.subscribe((value) => {\n                this.booking.storePendingChange('setup', value);\n            })\n        );\n        this.subscription(\n            'breakdown',\n            this.form.controls.breakdown.valueChanges.subscribe((value) => {\n                this.booking.storePendingChange('breakdown', value);\n            })\n        );\n        this.subscription(\n            'notes',\n            this.form.controls.notes.valueChanges.subscribe((value) => {\n                /* istanbul ignore else */\n                if (value) {\n                    this.timeout('notes', () => {\n                        const notes = this.booking.notes.filter(\n                            (note) =>\n                                !(note.type === 'private' && note.space === this.booking.space.id)\n                        );\n                        this.booking.storePendingChange('notes', [\n                            ...notes,\n                            {\n                                type: 'private',\n                                date: dayjs().valueOf(),\n                                message: value,\n                                author: this._service.Users.current.name,\n                                space: this.booking.space.id,\n                            } as BookingNote\n                        ]);\n                    });\n                }\n            })\n        );\n    }\n\n    public saveChanges() {\n        if (this.booking.has_changes) {\n            this.loading = true;\n            this._dialog_ref.disableClose = true;\n            this.booking.save().then((booking) => {\n                this._service.notifySuccess('Successfully updated private details');\n                this.event.emit({ reason: 'done', metadata: booking })\n                this._dialog_ref.close();\n            }, (err) => {\n                this._dialog_ref.disableClose = false;\n                this._service.notifyError(`Unable to save changes to private details. Error: ${err.message || err}`)\n                this.loading = false;\n            })\n        } else {\n            this._dialog_ref.close();\n        }\n    }\n}\n","<header>\n    <div class=\"heading\">Edit Private Details</div>\n    <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n        <app-icon [icon]=\"{ type: 'icon', class: 'material-icons', content: 'close' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <main *ngIf=\"!loading; else load_state\">\n        <form *ngIf=\"form\" [formGroup]=\"form\">\n            <div class=\"field\">\n                <label for=\"setup\">Setup:</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select name=\"setup\" formControlName=\"setup\" placeholder=\"None\">\n                        <mat-option *ngFor=\"let duration of available_durations\" [value]=\"duration.id\">\n                            {{ duration.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"field\">\n                <label for=\"breakdown\">Breakdown:</label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select name=\"breakdown\" formControlName=\"breakdown\" placeholder=\"None\">\n                        <mat-option *ngFor=\"let duration of available_durations\" [value]=\"duration.id\">\n                            {{ duration.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"field\">\n                <label for=\"notes\">Notes:</label>\n                <mat-form-field name=\"notes\" appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        placeholder=\"Private Notes\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n            </div>\n        </form>\n    </main>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <footer>\n        <button mat-button (tapped)=\"saveChanges()\">Save</button>\n    </footer>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <main>\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n            <div classs=\"text\">Updating private details...</div>\n        </div>\n    </main>\n</ng-template>\n","import { Component, OnInit, Output, EventEmitter, Inject } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { DialogEvent, Identity } from '../../shared/utilities/types.utilities';\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { BookingRecurrenceDetails } from 'src/app/services/data/bookings/booking.interfaces';\n\nexport interface RecurrenceModalData {\n    /** Current recurrence details */\n    details: BookingRecurrenceDetails;\n    /** Currently set date for the booking */\n    date: number;\n}\n\nexport const RECURRENCE_METADATA = {\n    height: 'auto',\n    width: '24em',\n    maxHeight: 'calc(100vh - 2em)',\n    maxWidth: 'calc(100vw - 2em)'\n};\n\n@Component({\n    selector: 'recurrence-modal',\n    templateUrl: './recurrence-modal.component.html',\n    styleUrls: ['./recurrence-modal.component.scss']\n})\nexport class RecurrenceModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for recurrence */\n    public form: FormGroup;\n    /** Loading state */\n    public loading: string;\n    /** Available recurrence periods */\n    public periods: Identity[] = [\n        { id: 'None', name: 'None' },\n        { id: 'Daily', name: 'Daily' },\n        { id: 'Weekly', name: 'Weekly' },\n        { id: 'Biweekly', name: 'Biweekly' },\n        { id: 'Monthly', name: 'Monthly' },\n    ];\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: RecurrenceModalData\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.form = new FormGroup({\n            period: new FormControl(this._data.details.period || 'none'),\n            end: new FormControl(this._data.details.end || this._data.date, [Validators.required]),\n        });\n    }\n\n    /**\n     * User confirmation of the content of the modal\n     */\n    public save() {\n        this.form.markAllAsTouched();\n        /* istanbul ignore else */\n        if (this.form.valid) {\n            this.loading = 'Adding recurrence data to booking...';\n            this.event.emit({ reason: 'done', metadata: { ...this._data.details, ...this.form.value } });\n        }\n    }\n}\n","<header>\n    <div class=\"heading\" mat-dialog-title>Booking Recurrence</div>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'material-icons', content: 'close' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <main *ngIf=\"!loading; else load_state\">\n        <form *ngIf=\"form\" [formGroup]=\"form\">\n            <div class=\"field\" *ngIf=\"form.controls.period && periods.length > 1\">\n                <label for=\"period\">Period: </label>\n                <mat-form-field appearance=\"outline\">\n                    <mat-select name=\"period\" formControlName=\"period\" placeholder=\"None\">\n                        <mat-option *ngFor=\"let type of periods\" [value]=\"type.id\">\n                            {{ type.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </div>\n            <div class=\"field\" *ngIf=\"form.controls.end\">\n                <label\n                    for=\"end\"\n                    [class.error]=\"form.controls.end.errors && form.controls.end.touched\"\n                >\n                    End Date<span>*</span>:\n                </label>\n                <a-date-field name=\"end\" formControlName=\"end\"></a-date-field>\n                <div\n                    class=\"error-message\"\n                    *ngIf=\"form.controls.end.errors && form.controls.end.touched\"\n                >\n                    End date needs to be in the future\n                </div>\n            </div>\n        </form>\n    </main>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <footer>\n        <button mat-button (tapped)=\"save()\">Add to Booking</button>\n    </footer>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <div class=\"body\">\n        <div class=\"info-block\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n            <div class=\"text\">{{ loading }}</div>\n        </div>\n    </div>\n</ng-template>\n","import { Component, OnInit, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';\n\nimport { Space, RecurrenceAvailability } from 'src/app/services/data/spaces/space.class';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { SpaceSelectModalComponent, SpaceSelectModalData } from 'src/app/overlays/space-select-modal/space-select-modal.component';\nimport { User } from 'src/app/services/data/users/user.class';\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { unique } from 'src/app/shared/utilities/general.utilities';\nimport { BookingRecurrenceSpaceDetails } from 'src/app/services/data/bookings/booking.interfaces';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\n\nimport * as dayjs from 'dayjs';\n\nexport interface RecurrenceSpacesModalData {\n    /** Space that has recurrence unavailability */\n    space: Space;\n    /** Duration of the booking */\n    duration: number;\n    /** Duration of the booking */\n    host: User;\n    /** List of current conflict matchups */\n    conflicts: BookingRecurrenceSpaceDetails[];\n}\n\nexport interface OccurrenceDetails extends RecurrenceAvailability {\n    /** Display string for the occurence datetime */\n    date_string: string;\n    /** Name of the space that replaces the space on this occurrence */\n    replaced_by: string;\n}\n\n@Component({\n    selector: 'a-recurrence-spaces-modal',\n    templateUrl: './recurrence-spaces-modal.component.html',\n    styleUrls: ['./recurrence-spaces-modal.component.scss']\n})\nexport class RecurrenceSpacesModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for modal events */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** List of occurence details for space booking */\n    public occurrences: OccurrenceDetails[] = [];\n    /** List of space details for occurrences */\n    public space_details: BookingRecurrenceSpaceDetails[] = []\n\n    /** Space to setup recurrence for */\n    public get space(): Space {\n        return this._data.space;\n    }\n\n    /** Whether all occurences have a valid space */\n    public get occurrences_valid(): boolean {\n        return this.occurrences.reduce((valid, event) => valid && (event.available || !!event.replaced_by), true);\n    }\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: RecurrenceSpacesModalData,\n        private _dialog: MatDialog,\n        private _service: ApplicationService\n    ) {\n        super();\n    }\n\n    ngOnInit(): void {\n        this.space_details = [].concat(this._data.conflicts || []);\n        this.updateOccurrences();\n    }\n\n    public save() {\n        this.event.emit({ reason: 'done', metadata: this.space_details });\n    }\n\n    public selectSpace(occurrence: OccurrenceDetails) {\n        const ref = this._dialog.open<SpaceSelectModalComponent, SpaceSelectModalData>(\n            SpaceSelectModalComponent,\n            {\n                width: 'auto',\n                height: 'auto',\n                maxWidth: '95vw',\n                data: {\n                    spaces: [],\n                    zone_ids: this.space.level.building_id,\n                    date: occurrence.date * 1000,\n                    duration: this._data.duration,\n                    host: this._data.host,\n                    multiple: false\n                }\n            }\n        );\n        this.subscription(\n            'new_spaces',\n            ref.componentInstance.event.subscribe(event => {\n                /* istanbul ignore else */\n                if (event.reason === 'done') {\n                    const space = event.metadata[0];\n                    /* istanbul ignore else */\n                    if (space) {\n                        this.space_details.unshift({\n                            date: occurrence.date,\n                            space: space.email,\n                            replaces: this.space.email\n                        });\n                        this.space_details = unique(this.space_details, 'date');\n                    }\n                    this.updateOccurrences();\n                    ref.close();\n                    this.unsub('new_spaces');\n                }\n            })\n        );\n    }\n\n    private updateOccurrences() {\n        this.occurrences = this._data.space.recurr_available.map(event => {\n            const space_details = this.space_details.find(details => details.date === event.date && details.replaces === this.space.email);\n            const email = (space_details || {}).space;\n            const space = this._service.Spaces.find(email) || { email, name: email };\n            return {\n                ...event,\n                date_string: dayjs(event.date * 1000).format('dddd, DD MMMM YYYY'),\n                replaced_by: space.name\n            }\n        });\n    }\n}\n","<header>\n    <div class=\"heading\" i18n=\"Space recurrence header\">Recurrence - {{ space.name }}</div>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ type: 'icon', class: 'material-icons', content: 'close' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <main>\n        <div class=\"info\" i18n=\"Space recurrence information\">\n            * Select individual dates to update selected space\n        </div>\n        <div class=\"item\" *ngFor=\"let item of occurrences\">\n            <div class=\"date\">{{ item.date_string }}</div>\n            <div class=\"action\">\n                <button\n                    mat-button\n                    [class.inverse]=\"!item.available && !item.replaced_by\"\n                    (tapped)=\"selectSpace(item)\"\n                >\n                    <div class=\"content\">\n                        {{ item.replaced_by || (item.available ? space.name : 'Find Room') }}\n                    </div>\n                </button>\n            </div>\n        </div>\n    </main>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <footer>\n        <button\n            mat-button\n            [disabled]=\"!occurrences_valid\"\n            (tapped)=\"save()\"\n            i18n=\"Space recurrence save action\"\n        >\n            Add to Booking\n        </button>\n    </footer>\n</mat-dialog-actions>\n","import { Component, OnInit, Inject, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, Validators, AbstractControl, FormControl } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nimport { Space } from 'src/app/services/data/spaces/space.class';\nimport { HashMap, DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { BookingNote } from 'src/app/services/data/bookings/booking.interfaces';\nimport { ApplicationService } from 'src/app/services/app.service';\n\nimport * as dayjs from 'dayjs';\n\nexport interface RequirementDetailsModalData {\n    spaces: Space[];\n    notes_field: AbstractControl;\n    codes_field: AbstractControl;\n    head_counts_field: AbstractControl;\n    standalone?: boolean\n}\n\n@Component({\n    selector: 'a-requirement-details-modal',\n    templateUrl: './requirement-details-modal.component.html',\n    styleUrls: ['./requirement-details-modal.component.scss']\n})\nexport class RequirementDetailsModalComponent implements OnInit {\n    /** Emitter for modal events */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Mapping of spaces to notes */\n    public notes: HashMap<string> = {};\n    /** Mapping of spaces to cost codes */\n    public codes: HashMap<string> = {};\n    /** Mapping of spaces to estimated head count */\n    public head_counts: HashMap<string> = {};\n    /** Mapping of spaces to form fields */\n    public form: HashMap<FormGroup> = {};\n    /** Map of spaces to whether they need a charge code */\n    public needs_charge_code: HashMap<boolean> = {};\n    /** Index of the active space */\n    public active_space: number = 0;\n\n    /** List of selected spaces */\n    public get space_list(): Space[] {\n        return this._data.spaces;\n    }\n\n    public get active_form(): FormGroup {\n        return this.form[this.space_list[this.active_space].id];\n    }\n\n    /** Whether form fields are valid */\n    public get is_valid(): boolean {\n        return this.space_list.reduce((valid, space) => valid && this.form[space.id].valid, true);\n    }\n\n    constructor(\n        private _service: ApplicationService,\n        @Inject(MAT_DIALOG_DATA) private _data: RequirementDetailsModalData\n    ) {}\n\n    public ngOnInit(): void {\n        const note_list = this._data.notes_field.value\n            .filter((note: BookingNote) => note.type === 'equipment')\n        this.notes = note_list.reduce((map, note) => {\n            map[note.space] = note.message;\n            return map;\n        }, {});\n        this.codes = { ...this._data.codes_field.value };\n        this.head_counts = { ...this._data.head_counts_field.value };\n        this.generateFormFields();\n    }\n\n    public submit(): void {\n        this.space_list.forEach(space => this.form[space.id].markAllAsTouched());\n        /* istanbul ignore else */\n        if (this.is_valid) {\n            // Update notes\n            const notes = this._data.notes_field.value\n                .filter((note: BookingNote) => note.type !== 'equipment');\n            const new_notes = this.space_list.map(space => ({\n                author: this._service.Users.current.name,\n                type: 'equipment',\n                message: this.form[space.id].controls.notes.value,\n                space: space.id,\n                date: dayjs().valueOf()\n            } as BookingNote));\n            this._data.notes_field.setValue(notes.concat(new_notes).filter(note => note.message));\n            this._data.codes_field.setValue(this.space_list.reduce((map, space) => {\n                map[space.id] = this.form[space.id].controls.code.value;\n                return map;\n            }, {}));\n            this._data.head_counts_field.setValue(this.space_list.reduce((map, space) => {\n                map[space.id] = this.form[space.id].controls.head_count.value;\n                return map;\n            }, {}));\n            this.event.emit({ reason: 'done' });\n        }\n    }\n\n    /** Generate form fields for each space */\n    private generateFormFields(): void {\n        for (const space of this.space_list) {\n            const building = this._service.Organisation.buildings.find(\n                bld => bld.id === space.level.building_id\n            );\n            this.needs_charge_code[space.id] = building.required.equipment_code;\n            this.form[space.id] = new FormGroup({\n                notes: new FormControl(this.notes[space.id] || ''),\n                code: new FormControl(\n                    this.codes[space.id] || '',\n                    building.required.equipment_code ? [Validators.required] : []\n                ),\n                head_count: new FormControl(this.head_counts[space.id] || '', [Validators.required])\n            });\n        }\n    }\n}\n","<div class=\"header\">\n    <div class=\"tabs\">\n        <mat-tab-group [(selectedIndex)]=\"active_space\">\n            <mat-tab\n                *ngFor=\"let space of space_list\"\n                [label]=\"space.name + (form[space.id].invalid && form[space.id].touched ? '*' : '')\"\n            ></mat-tab>\n        </mat-tab-group>\n    </div>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n    </button>\n</div>\n<mat-dialog-content>\n    <main>\n        <div class=\"details\">\n            <img src=\"assets/img/equipment.svg\" />\n            <div class=\"text\" i18n=\"Booking equipment information\">\n                Would you like to add equipment to your booking's spaces?\n            </div>\n        </div>\n        <form *ngIf=\"space_list[active_space] && active_form\" [formGroup]=\"active_form\">\n            <div class=\"field\">\n                <label for=\"equipment-notes\" i18n=\"Booking equipment notes label\">\n                    (eg - particular room configurations or specific equipment etc) Additional\n                    requests are handled in confidence\n                </label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"equipment-notes\"\n                        formControlName=\"notes\"\n                        placeholder=\"Add notes here...\"\n                        i18n-placeholder\n                    ></textarea>\n                </mat-form-field>\n            </div>\n            <div class=\"fieldset\">\n                <div class=\"field\">\n                    <label\n                        for=\"charge-code\"\n                        [class.error]=\"\n                            active_form.controls.code.touched && active_form.controls.code.invalid\n                        \"\n                        i18n=\"Booking equipment charge code label\"\n                    >\n                        Charge Code<span *ngIf=\"needs_charge_code[space_list[active_space].id]\"\n                            >*</span\n                        >\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"charge-code\"\n                            formControlName=\"code\"\n                            placeholder=\"Charge Code\"\n                            i18n-placeholder\n                        />\n                        <mat-hint i18n=\"Booking equipment charge code hint\">\n                            <span>Note:</span> Your booking will be confirmed before you are\n                            charged.\n                        </mat-hint>\n                        <mat-error i18n=\"Booking equipment charge code error\">\n                            Charge Code is required\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"field\">\n                    <label\n                        for=\"head-count\"\n                        [class.error]=\"\n                            active_form.controls.head_count.touched &&\n                            active_form.controls.head_count.invalid\n                        \"\n                        i18n=\"Booking equipment headcount label\"\n                    >\n                        Headcount Estimate<span>*</span>\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"head-count\"\n                            formControlName=\"head_count\"\n                            type=\"number\"\n                            placeholder=\"e.g. 12\"\n                            i18n-placeholder\n                        />\n                        <mat-hint i18n=\"Booking equipment headcount hint\">\n                            <span>Note:</span> This estimate is used to calculate catering and/or\n                            assign rooms. Please keep updated of any changes.\n                        </mat-hint>\n                        <mat-error i18n=\"Booking equipment headcount error\">\n                            Headcount Estimate is required\n                        </mat-error>\n                    </mat-form-field>\n                </div>\n            </div>\n        </form>\n    </main>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <footer>\n        <button mat-button (tapped)=\"submit()\">Add to booking</button>\n    </footer>\n</mat-dialog-actions>\n","import { Component, OnInit, Inject, Output, EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Observable, Subject, of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, switchMap, catchError, map } from 'rxjs/operators';\n\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { User } from 'src/app/services/data/users/user.class';\nimport { Space, SpaceBookingRuleOptions } from 'src/app/services/data/spaces/space.class';\nimport { Building } from 'src/app/services/data/organisation/building.class';\nimport { Identity, HashMap, DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { unique } from 'src/app/shared/utilities/general.utilities';\n\nexport interface SpaceSelectModalData {\n    /** List of selected spaces */\n    spaces: Space[];\n    /** Start time for availability of spaces */\n    date: number;\n    /** Duration of the availability block to look for */\n    duration: number;\n    /** Host of the booking being made */\n    host: User;\n    /** Whether multiple spaces can be selected */\n    multiple: boolean;\n    /** Force zone ids */\n    zone_ids?: string;\n}\n\n@Component({\n    selector: 'a-space-select-modal',\n    templateUrl: './space-select-modal.component.html',\n    styleUrls: ['./space-select-modal.component.scss']\n})\nexport class SpaceSelectModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Whether space list is being loaded */\n    public loading: boolean;\n    /** List of available spaces to select from */\n    public spaces: Space[] = [];\n    /** Active building to filter spaces on */\n    public active_building: Building;\n    /** Active building to filter spaces on */\n    public active_type: Identity;\n    /** List of items from an API search */\n    public search_results$: Observable<Space[]>;\n    /** Subject holding the value of the search */\n    public readonly search$ = new Subject<string>();\n    /** List of currently selected spaces */\n    public selected_spaces: Space[] = [];\n    /** Mapping as to whether a space is by request */\n    public request_map: HashMap<boolean> = {};\n    /** Whether selected list should be shown on mobile */\n    public show_list: boolean;\n\n    /** List of available buildings */\n    public types: Identity[] = []\n\n    /** List of available buildings */\n    public get buildings(): Building[] {\n        return this._service.Organisation.buildings;\n    }\n\n    /** Whether multiple spaces can be selected */\n    public get multiple(): boolean {\n        return !!this._data.multiple;\n    }\n\n    public get has_zone(): boolean {\n        return !!this._data.zone_ids;\n    }\n\n    constructor(\n        private _service: ApplicationService,\n        @Inject(MAT_DIALOG_DATA) private _data: SpaceSelectModalData\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.selected_spaces = [].concat(this._data.spaces || []);\n        // Listen for input changes\n        this.search_results$ = this.search$.pipe(\n            debounceTime(400),\n            distinctUntilChanged(),\n            switchMap(_ => {\n                this.loading = true;\n                const zone_ids: string[] = [];\n                /* istanbul ignore else */\n                if (this.active_building) {\n                    zone_ids.push(this.active_building.id);\n                }\n                /* istanbul ignore else */\n                if (this.active_type) {\n                    zone_ids.push(`${this.active_type.id}`);\n                }\n                return this._service.Spaces.available({\n                    zone_ids: this._data.zone_ids || zone_ids.join(','),\n                    date: this._data.date,\n                    duration: this._data.duration\n                });\n            }),\n            catchError(_ => of([])),\n            map((list: Space[]) => {\n                this.loading = false;\n                const selected = this.selected_spaces;\n                return list.filter((item: any) => !selected.find(space => space.id === item.id));\n            })\n        );\n        // Process API results\n        this.subscription(\n            'search_results',\n            this.search_results$.subscribe(list => {\n                this.spaces = list;\n                this.update();\n            })\n        );\n        this.active_building = this._service.Organisation.building;\n        this.types = [{ id: '', name: 'Any Space Type' } as any].concat(\n            this._service.Organisation.space_types || []\n        );\n        this.active_type = this.types[0];\n        this.search$.next('');\n    }\n\n    /** Add space to selected list */\n    public addSpace(space: Space) {\n        this.selected_spaces.push(space);\n        this.selected_spaces = unique(this.selected_spaces, 'id');\n    }\n\n    /** Remove space from selected list */\n    public removeSpace(space: Space) {\n        this.selected_spaces = this.selected_spaces.filter(a_space => a_space.id !== space.id);\n    }\n\n    /** Emit current state of the selected list */\n    public save(list: Space[]) {\n        this.event.emit({ reason: 'done', metadata: list });\n    }\n\n    private update() {\n        const map = {};\n        const options: SpaceBookingRuleOptions = {\n            date: this._data.date,\n            duration: this._data.duration,\n            host: this._data.host\n        };\n        this.selected_spaces.forEach(space => (map[space.id] = space.byRequest(options)));\n        this.spaces.forEach(space => (map[space.id] = space.byRequest(options)));\n        this.request_map = map;\n    }\n}\n","<header>\n    <div class=\"heading\">Select meeting space{{ multiple ? 's' : '' }}</div>\n    <button mat-icon-button mat-dialog-close>\n        <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <main>\n        <div class=\"block available\">\n            <ng-container *ngIf=\"!has_zone\">\n                <mat-form-field appearance=\"outline\" *ngIf=\"buildings && buildings.length > 1\">\n                    <mat-select\n                        #select\n                        [(value)]=\"active_building\"\n                        (valueChange)=\"search$.next(active_building.id + '|' + active_type.id)\"\n                    >\n                        <mat-option *ngFor=\"let building of buildings\" [value]=\"building\">\n                            {{ building.code }} - {{ building.name\n                            }}{{ building.address ? ', ' + building.address : '' }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n                <mat-form-field appearance=\"outline\" *ngIf=\"types && types.length > 1\">\n                    <mat-select\n                        #select\n                        [(value)]=\"active_type\"\n                        (valueChange)=\"search$.next(active_building.id + '|' + active_type.id)\"\n                    >\n                        <mat-option *ngFor=\"let type of types\" [value]=\"type\">\n                            {{ type?.name }}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </ng-container>\n            <div class=\"list\">\n                <ng-container *ngIf=\"!loading; else load_state\">\n                    <ng-container *ngIf=\"spaces && spaces.length; else empty_state\">\n                        <div class=\"item\" *ngFor=\"let space of spaces\">\n                            <div class=\"details\">\n                                <div class=\"name\">{{ space.name }}</div>\n                                <div class=\"info\">{{ space.level.name }}</div>\n                            </div>\n                            <div class=\"capacity\">\n                                <app-icon\n                                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'account_circle' }\"\n                                ></app-icon>\n                                <div class=\"text\">{{ space.capacity || '0' }}</div>\n                            </div>\n                            <div class=\"actions\">\n                                <button\n                                    [class.request]=\"request_map[space.id]\"\n                                    mat-button\n                                    (tapped)=\"multiple ? addSpace(space) : save([space])\"\n                                >\n                                    Select\n                                </button>\n                            </div>\n                        </div>\n                    </ng-container>\n                </ng-container>\n            </div>\n        </div>\n        <div class=\"block selected\" *ngIf=\"multiple\" [class.show]=\"show_list\">\n            <h3>Selected spaces</h3>\n            <div class=\"list\">\n                <ng-container\n                    *ngIf=\"selected_spaces && selected_spaces.length; else empty_select_state\"\n                >\n                    <div class=\"item\" *ngFor=\"let space of selected_spaces\">\n                        <div\n                            class=\"icon\"\n                            [class.request]=\"request_map[space.id]\"\n                            [matTooltip]=\"\n                                request_map[space.id]\n                                    ? 'Bookings in this space need to be approved by a member of the concierge team'\n                                    : ''\n                            \"\n                        >\n                            <app-icon\n                                [icon]=\"{\n                                    class: 'material-icons',\n                                    content: request_map[space.id] ? 'warning' : 'done'\n                                }\"\n                            ></app-icon>\n                        </div>\n                        <div class=\"details\">\n                            <div class=\"name\">{{ space.name }}</div>\n                            <div class=\"info\">{{ space.level.name }}</div>\n                        </div>\n                        <div class=\"capacity\">\n                            <app-icon\n                                [icon]=\"{ type: 'icon', class: 'material-icons', content: 'account_circle' }\"\n                            ></app-icon>\n                            <div class=\"text\">{{ space.capacity || '0' }}</div>\n                        </div>\n                        <div class=\"actions\">\n                            <button mat-icon-button (tapped)=\"removeSpace(space)\">\n                                <app-icon\n                                    [icon]=\"{ class: 'material-icons', content: 'close' }\"\n                                ></app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </ng-container>\n            </div>\n            <footer>\n                <button mat-button (tapped)=\"save(this.selected_spaces)\">Add to booking</button>\n            </footer>\n            <button mat-icon-button [class.close]=\"true\" [class.mobile-only]=\"true\" (tapped)=\"show_list = false\">\n                <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n            </button>\n            <div class=\"tag mobile-only\">\n                <button mat-icon-button (tapped)=\"show_list = true\">\n                    <app-icon [icon]=\"{ class: 'material-icons', content: 'list' }\"></app-icon>\n                </button>\n            </div>\n        </div>\n    </main>\n</mat-dialog-content>\n<ng-template #load_state>\n    <div class=\"info-block center\">\n        <div class=\"icon\">\n            <mat-spinner diameter=\"48\"></mat-spinner>\n        </div>\n        <div class=\"text\">Loading available spaces...</div>\n    </div>\n</ng-template>\n<ng-template #empty_state>\n    <div class=\"info-block center\">\n        <div class=\"icon\">\n            <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n        </div>\n        <div class=\"text\">No available spaces</div>\n    </div>\n</ng-template>\n<ng-template #empty_select_state>\n    <div class=\"info-block center\">\n        <div class=\"icon\">\n            <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n        </div>\n        <div class=\"text\">No selected spaces</div>\n    </div>\n</ng-template>\n","import { Injectable, ApplicationRef, NgZone } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { SwUpdate } from '@angular/service-worker';\nimport { first } from 'rxjs/operators';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { ComposerService } from '@placeos/composer';\nimport { PlaceOSOptions } from '@placeos/ts-client';\nimport { HeapIoService } from '@acaprojects/ngx-heap-io';\n\nimport { Observable, BehaviorSubject, Subject, Subscription } from 'rxjs';\n\nimport { BaseClass } from '../shared/base.class';\nimport { ConsoleStream, SettingsService } from './settings.service';\nimport { HashMap, ApplicationLoadingState } from '../shared/utilities/types.utilities';\n\nimport { HotkeysService } from './hotkeys.service';\nimport { OrganisationService } from './data/organisation/organisation.service';\nimport { UsersService } from './data/users/users.service';\nimport { BookingsService } from './data/bookings/bookings.service';\nimport { SpacesService } from './data/spaces/spaces.service';\nimport { ComposerSettings, ApplicationIcon } from '../shared/utilities/settings.interfaces';\nimport { LocationService } from './data/location/location.service';\nimport { CateringMenuService } from './data/catering/catering-menu.service';\nimport { ReportsService } from './data/reports/reports.service';\nimport { CateringItemsService } from './data/catering/catering-items.service';\nimport { CateringCategoriesService } from './data/catering/catering-categories.service';\n\ndeclare global {\n    interface Window {\n        application: ApplicationService;\n        mock: {\n            enabled: boolean;\n            backend: any;\n        };\n    }\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ApplicationService extends BaseClass {\n    /** List of previous routes for return navigation */\n    private _route_trail: string[] = [];\n    /** Map of state variables for Service */\n    protected _subjects: {\n        [key: string]: BehaviorSubject<any> | Subject<any>;\n    } = {};\n    /** Map of observables for state variables */\n    protected _observers: { [key: string]: Observable<any> } = {};\n    /** Whether the application has stablised */\n    private _stable: boolean;\n\n    /** Whether the application has stablised */\n    public get is_stable(): boolean {\n        return this._stable || false;\n    }\n\n    constructor(\n        private _app_ref: ApplicationRef,\n        private _zone: NgZone,\n        private _title: Title,\n        private _router: Router,\n        private _cache: SwUpdate,\n        private _settings: SettingsService,\n        private _hotkeys: HotkeysService,\n        private _composer: ComposerService,\n        private _analytics: HeapIoService,\n        private _organisation: OrganisationService,\n        private _reports: ReportsService,\n        private _users: UsersService,\n        private _bookings: BookingsService,\n        private _spaces: SpacesService,\n        private _locations: LocationService,\n        private _snackbar: MatSnackBar,\n        private _menu: CateringMenuService,\n        private _catering_items: CateringItemsService,\n        private _catering_categories: CateringCategoriesService\n    ) {\n        super();\n        this._organisation.parent = this._users.parent = this._bookings.parent\n            = this._spaces.parent = this._locations.parent = this._menu.parent\n            = this._reports.parent = this;\n        this.set('system', null);\n        this.set('title', 'Home');\n        this.set('loading', {});\n        this._app_ref.isStable.pipe(first(_ => _)).subscribe(() => {\n            this._zone.run(() => {\n                this._stable = true;\n                this.log('APP', `Application has stablised.`);\n                this.setupCache();\n                this.waitForSettings();\n            });\n        });\n    }\n\n    public get Bindings() {\n        return this._composer.bindings;\n    }\n    /** Analytics service */\n    public get Analytics() {\n        return {};\n    }\n    /** Hotkeys service */\n    public get Hotkeys() {\n        return this._hotkeys;\n    }\n    /** Organisation service */\n    public get Organisation() {\n        return this._organisation;\n    }\n    /** Users service */\n    public get Users() {\n        return this._users;\n    }\n    /** Bookings service */\n    public get Bookings() {\n        return this._bookings;\n    }\n    /** Spaces service */\n    public get Spaces() {\n        return this._spaces;\n    }\n    /** Spaces service */\n    public get Reports() {\n        return this._reports;\n    }\n    /** Locations service */\n    public get Locations() {\n        return this._locations;\n    }\n    /** Catering Menu service */\n    public get Menu() {\n        return this._menu;\n    }\n    /** Catering Menu service */\n    public get CateringItems() {\n        return this._catering_items;\n    }\n    /** Catering Menu service */\n    public get CateringCategories() {\n        return this._catering_categories;\n    }\n    /** Engine Composer service */\n    public get Composer() {\n        return this._composer;\n    }\n\n    /**\n     * Get a setting from the settings service\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string): any {\n        return this._settings.get(key);\n    }\n\n    /** Name of the application */\n    public get name() {\n        return this._settings.app_name;\n    }\n\n    /**\n     * Title of the page\n     */\n    public set title(value: string) {\n        const title_suffix = this.setting('app.title');\n        this.set('title', value);\n        this._title.setTitle(`${value ? value + ' | ' : ''}${title_suffix}`);\n    }\n\n    /**\n     * Title of the page\n     */\n    public get title(): string {\n        return this._title.getTitle();\n    }\n\n    /** Root API Endpoint */\n    public get endpoint() {\n        return `/api/staff/`;\n    }\n\n    /** Root API Endpoint for engine */\n    public get engine_endpoint() {\n        return this._composer.auth.api_endpoint + '/';\n    }\n\n    /** Whether settings has been loaded */\n    public get has_settings(): boolean {\n        return this._settings.is_initialised;\n    }\n\n    /** Whether organisation and building data has been initialised */\n    public get has_org(): boolean {\n        return this._organisation.is_initialised;\n    }\n\n    /** Whether application is ready for user interaction */\n    public get is_ready(): boolean {\n        return this.has_settings && this.has_org;\n    }\n\n    /**\n     * Create notification popup\n     * @param type CSS Class to add to the notification\n     * @param message Message to display on the notificaiton\n     * @param action Display text for the callback action\n     * @param on_action Callback of action on the notification\n     * @param icon Icon to render to the left of the notification message\n     */\n    public notify(\n        type: string,\n        message: string,\n        action: string = 'OK',\n        on_action?: () => void,\n        icon: ApplicationIcon = {\n            type: 'icon',\n            class: 'material-icons',\n            content: 'info'\n        }\n    ): void {\n        const snackbar_ref = this._snackbar.open(message, action, {\n            panelClass: [type],\n            duration: 5000\n        });\n        this.subscription(\n            'snackbar_close',\n            snackbar_ref.afterDismissed().subscribe(() => {\n                this.unsub('snackbar_close');\n                this.unsub('notify');\n            })\n        );\n        if (action) {\n            on_action = on_action || (() => snackbar_ref.dismiss());\n            this.subscription(\n                'notify',\n                snackbar_ref.onAction().subscribe(() => on_action())\n            );\n        }\n    }\n\n    /**\n     * Create success notification popup\n     * @param msg Message to display on the notificaiton\n     * @param action Display text for the callback action\n     * @param on_action Callback of action on the notification\n     */\n    public notifySuccess(msg: string, action?: string, on_action?: () => void): void {\n        const icon: ApplicationIcon = {\n            type: 'icon',\n            class: 'material-icons',\n            content: 'done'\n        };\n        console.debug(msg);\n        this.notify('success', msg, action, on_action, icon);\n    }\n\n    /**\n     * Create error notification popup\n     * @param msg Message to display on the notificaiton\n     * @param action Display text for the callback action\n     * @param on_action Callback of action on the notification\n     */\n    public notifyError(msg: string, action?: string, on_action?: () => void): void {\n        const icon: ApplicationIcon = {\n            type: 'icon',\n            class: 'material-icons',\n            content: 'error'\n        };\n        console.error(msg);\n        this.notify('error', msg, action, on_action, icon);\n    }\n\n    /**\n     * Create warning notification popup\n     * @param msg Message to display on the notificaiton\n     * @param action Display text for the callback action\n     * @param on_action Callback of action on the notification\n     */\n    public notifyWarn(msg: string, action?: string, on_action?: () => void): void {\n        const icon: ApplicationIcon = {\n            type: 'icon',\n            class: 'material-icons',\n            content: 'warning'\n        };\n        console.warn(msg);\n        this.notify('warn', msg, action, on_action, icon);\n    }\n\n    /**\n     * Create info notification popup\n     * @param msg Message to display on the notificaiton\n     * @param action Display text for the callback action\n     * @param on_action Callback of action on the notification\n     */\n    public notifyInfo(msg: string, action?: string, on_action?: () => void): void {\n        console.info(msg);\n        this.notify('info', msg, action, on_action);\n    }\n\n    /**\n     * Log data to the browser console\n     * @param type Type of message\n     * @param msg Message body\n     * @param args array of argments to log to the console\n     * @param stream Stream to emit the console on. 'debug', 'log', 'warn' or 'error'\n     * @param force Whether to force message to be emitted when debug is disabled\n     */\n    public log(\n        type: string,\n        msg: string,\n        args?: any,\n        stream: ConsoleStream = 'debug',\n        force: boolean = false\n    ): void {\n        this._settings.log(type, msg, args, stream, force);\n    }\n\n    /**\n     * Get the current value of the named property\n     * @param name Property name\n     */\n    public get<U = any>(name: string): U {\n        return this._subjects[name] && this._subjects[name] instanceof BehaviorSubject\n            ? (this._subjects[name] as BehaviorSubject<U>).getValue()\n            : null;\n    }\n\n    /**\n     * Listen to value change of the named property\n     * @param name Property name\n     * @param next Callback for value changes\n     */\n    public listen<U = any>(name: string): Observable<U> {\n        return this._observers[name] ? this._observers[name] : null;\n    }\n\n    /**\n     * Update the value of the named property\n     * @param name Property name\n     * @param value New value\n     */\n    public set<U = any>(name: string, value: U): void {\n        if (!this._subjects[name]) {\n            this._subjects[name] = new BehaviorSubject<U>(value);\n            this._observers[name] = this._subjects[name].asObservable();\n        } else {\n            this._subjects[name].next(value);\n        }\n    }\n\n    /** Wait for settings to be initialised before setting up the application */\n    private waitForSettings() {\n        // Wait until the settings have loaded before initialising\n        this._settings.initialised.pipe(first(_ => _)).subscribe(() => this.init());\n    }\n\n    /**\n     * Initialise application services\n     */\n    private init(): void {\n        this.setupComposer();\n        // this.setupAnalytics();\n        this._composer.initialised.pipe(first(_ => _)).subscribe(() => {\n            this._users.init();\n            this._organisation.init();\n            // Wait until building and level data is loaded before initialising space and booking data\n            this._organisation.listen('active_building').pipe(first(_ => _)).subscribe(_ => {\n                this._bookings.init();\n                this._spaces.init();\n            });\n            this._initialised.next(true);\n        });\n        // Add service to window if in debug mode\n        if (window.debug) {\n            window.application = this;\n        }\n    }\n\n    /**\n     * Initialise the composer library comms\n     */\n    private setupComposer(): void {\n        this.log('SYSTEM', 'Setup up composer...');\n        const loading: ApplicationLoadingState = this.get('loading') || {};\n        loading.composer = {\n            message: 'Initialising service connection',\n            state: 'loading'\n        };\n        this.set('loading', loading);\n        // Get application settings\n        const settings: ComposerSettings = this._settings.get('composer') || {};\n        const protocol = settings.protocol || location.protocol;\n        const host = settings.domain || location.hostname;\n        const port = settings.port || location.port;\n        const url = settings.use_domain ? `${protocol}//${host}:${port}` : location.origin;\n        const route = settings.route || '';\n        const mock = this._settings.get('mock');\n        // Generate configuration object\n        const config: PlaceOSOptions = {\n            scope: 'public',\n            host: `${host}:${port}`,\n            auth_uri: `${url}/auth/oauth/authorize`,\n            token_uri: `${url}/auth/token`,\n            redirect_uri: `${location.origin}${route}/oauth-resp.html`,\n            handle_login: !settings.local_login,\n            mock\n        };\n        this._composer.setup(config);\n        loading.composer = {\n            message: 'Initialising service connection',\n            state: 'complete'\n        };\n        this.set('loading', loading);\n    }\n\n    /**\n     * Setup handler for cache change events\n     */\n    private setupCache() {\n        if (this._cache.isEnabled) {\n            this.subscription(\n                'cache_update',\n                this._cache.available.subscribe(event => {\n                    const current = `current version is ${event.current.hash}`;\n                    const available = `available version is ${event.available.hash}`;\n                    this.log('CACHE', `Update available: ${current} ${available}`);\n                    this.activateUpdate();\n                })\n            );\n            this.subscription(\n                'cache_activated',\n                this._cache.activated.subscribe(() => {\n                    this.log('CACHE', `Updates activated. Reloading...`);\n                    this.notifyInfo(\n                        'Newer version of the application is available',\n                        'Refresh',\n                        () => location.reload(true)\n                    );\n                })\n            );\n            setInterval(() => {\n                this.log('CACHE', `Checking for updates...`);\n                this._cache.checkForUpdate();\n            }, 5 * 60 * 1000);\n        }\n    }\n\n    /**\n     * Update the cache and reload the page\n     *\n     */\n    private activateUpdate() {\n        if (this._cache.isEnabled) {\n            this.log('CACHE', `Activating changes to the cache...`);\n            this._cache.activateUpdate().then(() => {\n                this.notifyInfo('Newer version of the application is available', 'Refresh', () =>\n                    location.reload(true)\n                );\n            });\n        }\n    }\n}\n","import { Subject } from 'rxjs';\n\nimport { BaseClass } from '../../shared/base.class';\nimport { HashMap } from '../../shared/utilities/types.utilities';\n\nexport type DataClassEventType = 'value_change' | 'item_saved' | 'reset' | 'other';\n\nexport interface IDataClassEvent<T = HashMap> {\n    type: DataClassEventType;\n    metadata: T;\n}\n\nexport interface ServiceLike<T = BaseDataClass> extends HashMap {\n    parent: any;\n    add: (_: HashMap) => Promise<T>\n    update: (id: string, _: HashMap) => Promise<T>\n    delete: (id: string) => Promise<void>\n    task: (id: string, name: string, data: HashMap) => Promise<void>\n}\n\nexport const BASE_MUTABLE_FIELDS = ['name', 'email'] as const;\ntype BaseMutableTuple = typeof BASE_MUTABLE_FIELDS;\nexport type BaseMutableFields = BaseMutableTuple[number];\n\nexport class BaseDataClass extends BaseClass {\n    /** Map of available services for child classes */\n    private static _service_map: HashMap<ServiceLike> = {};\n    /** Set the services used to handle data model requests */\n    public static setService(type: string, service: ServiceLike): void {\n        BaseDataClass._service_map[type] = service;\n    }\n    /** Unique Identifier of the object */\n    public readonly id: string;\n    /** Human readable name of the object */\n    public readonly name: string;\n    /** Email address associated with the object */\n    public readonly email: string;\n    /** Subject for change events to the class object */\n    public readonly changeEvents = new Subject<IDataClassEvent>();\n    /** Class type of required service */\n    protected __type: string = 'BaseDataClass';\n    /** Map of pending changes to the object */\n    protected _changes: HashMap = {};\n    /** Map of local property names to server ones */\n    protected _server_names: HashMap<string> = {};\n    /** Service for managing model on the server */\n    protected get _service(): ServiceLike {\n        return BaseDataClass._service_map[this.__type];\n    }\n\n    constructor(raw_data: HashMap) {\n        super();\n        this.id = raw_data.id || raw_data.zone_id || raw_data.email || '';\n        this.name = raw_data.name || '';\n        this.email = `${raw_data.email || ''}`.toLowerCase();\n        this._changes = {};\n    }\n\n    /** Whether the form has changes */\n    public get has_changes(): boolean {\n        for (const key in this.changes) {\n            if (this.changes[key]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** Map of currently unsaved changes to the state */\n    public get changes(): HashMap {\n        return JSON.parse(JSON.stringify(this._changes));\n    }\n\n    /**\n     * Store new value for given field\n     * @param key\n     * @param value\n     */\n    public storePendingChange(\n        key: BaseMutableFields,\n        value: BaseDataClass[BaseMutableFields]\n    ): this {\n        if (typeof value === typeof this[key as any]) {\n            this._changes[key as any] = value;\n            this.emit('value_change', { key, value });\n        } else {\n            throw new Error(`Invalid type for value \"${value}\" set for key \"${key}\"`);\n        }\n        return this;\n    }\n\n    public clearPendingChanges(): void {\n        delete this._changes;\n        this._changes = {};\n        this.emit('reset');\n    }\n\n    /**\n     * Save pending changes to server\n     */\n    public save(force: boolean = false): Promise<BaseDataClass> {\n        if ((this.has_changes || force) && this._service) {\n            const form = this.toJSON();\n            return new Promise((resolve, reject) => {\n                const promise = this.id\n                    ? this._service.update(this.id, form)\n                    : this._service.add(form);\n                promise.then(\n                    (d) => {\n                        this.emit<BaseDataClass>('item_saved', d);\n                        resolve(d);\n                    },\n                    (_) => reject(_)\n                );\n            });\n        } else {\n            Promise.reject('No changes have been made');\n        }\n    }\n\n    /**\n     * Delete this item from the server\n     */\n    public delete(): Promise<void> {\n        if (this.id) {\n            return this._service.delete(this.id);\n        }\n    }\n\n    /**\n     * Run task for this item on the service\n     * @param task_name Name of the task\n     * @param parameters Parameters to pass to the task request\n     */\n    public runTask(task_name: string, parameters: HashMap): Promise<void> {\n        if (this.id) {\n            return this._service.task(this.id, task_name, parameters);\n        }\n    }\n    /**\n     * Convert object into plain object\n     */\n    public toJSON(this: BaseDataClass, with_changes: boolean = true): HashMap {\n        const obj: any = { ...this };\n        // Remove local private members\n        delete obj._service;\n        delete obj._changes;\n        delete obj.changeEvents;\n        // Remove parent private members\n        delete obj._timers;\n        delete obj._intervals;\n        delete obj._subscriptions;\n        delete obj._server_names;\n        delete obj._initialised;\n        // Convert remaining members to be public\n        const keys = Object.keys(obj);\n        for (const key of keys) {\n            if (key[0] === '_') {\n                const new_key = this._server_names[key.substr(1)] || key.substr(1);\n                obj[new_key] = obj[key];\n                delete obj[key];\n            } else if (obj[key] === undefined) {\n                delete obj[key];\n            }\n        }\n        return with_changes ? { ...obj, ...this._changes } : obj;\n    }\n\n    /**\n     * Emits change event\n     * @param type Type of change that has occurred\n     * @param metadata Supporting metadata for the event\n     */\n    public emit<T = HashMap>(type: DataClassEventType, metadata?: T): void {\n        this.changeEvents.next({ type, metadata });\n    }\n\n    /**\n     * Make a copy of this object\n     */\n    public clone(): BaseDataClass {\n        return new BaseDataClass(this);\n    }\n\n    /**\n     * Make a copy of this object without identification data\n     */\n    public duplicate(): BaseDataClass {\n        return new BaseDataClass({ ...this, id: null, email: null });\n    }\n}\n","import { ComposerService } from '@placeos/composer';\nimport { BehaviorSubject, Observable, Subscription, Subscriber, Subject } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nimport { BaseDataClass } from './base-api.class';\nimport { BaseClass } from '../../shared/base.class';\nimport { ApplicationService } from '../app.service';\nimport { HashMap } from '../../shared/utilities/types.utilities';\nimport { toQueryString } from '../../shared/utilities/api.utilities';\n\nexport interface IEngineResponse {\n    results: HashMap[];\n    total: number;\n}\n\nexport class BaseAPIService<T extends {} = BaseDataClass> extends BaseClass {\n    /** Application service */\n    public parent: ApplicationService;\n    /** Display name of the service */\n    protected _name: string;\n    /** API Route of the service */\n    protected _api_route: string;\n    /** Map of state variables for Service */\n    protected _subjects: { [key: string]: BehaviorSubject<any> | Subject<any> } = {};\n    /** Map of observables for state variables */\n    protected _observers: { [key: string]: Observable<any> } = {};\n    /** Map of poll subscribers for API endpoints */\n    protected _subscribers: { [key: string]: Subscriber<any> } = {};\n    /** Map of promises for Service */\n    protected _promises: { [key: string]: Promise<any> } = {};\n    /** Comparison function for service items */\n    protected _compare: (a: T, b: T) => boolean = (a, b) =>\n        a === b || (a as any).id === (b as any).id;\n    /** Default filter function for list method */\n    protected _list_filter: (a: T) => boolean = (a) => !!a;\n\n    /** Http Client */\n    protected get http() {\n        return this._composer.http;\n    }\n\n    constructor(protected _composer: ComposerService) {\n        super();\n        this._name = 'Base';\n        this._api_route = 'base';\n        this.set('list', []);\n    }\n\n    /**\n     * Initailise service\n     */\n    public init() {\n        if (!this.parent) {\n            return this.timeout('init', () => this.init());\n        }\n        this.parent.initialised.pipe(first((_) => _)).subscribe(() => {\n            this.load().then(\n                (_) => this._initialised.next(true),\n                (err) => {\n                    this.parent.notifyError(\n                        `Error intialising ${this._name} service. Error: ${\n                            err.response || err.message || err\n                        }. Retrying...`\n                    );\n                    this.timeout('init', () => this.init(), 1000);\n                }\n            );\n        });\n    }\n\n    /**\n     * Get API route for the service\n     * @param engine Whether endpoint is using the application API or engine API\n     */\n    public route(engine: boolean = false) {\n        const endpoint = this.parent\n            ? engine\n                ? this.parent.engine_endpoint\n                : this.parent.endpoint\n            : '/api/staff';\n        return `${endpoint}${this._api_route}`;\n    }\n    /** API Route of the service */\n    public get api_route() {\n        return this._api_route;\n    }\n\n    /**\n     * Get a service related setting from the settings service\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string) {\n        return this.parent ? this.parent.setting(`app.${this._name.toLowerCase()}.${key}`) : null;\n    }\n\n    /**\n     * Get the current value of the named property\n     * @param name Property name\n     */\n    public get<U = any>(name: string): U {\n        if (!this._observers[name]) {\n            this.set<U>(name, null);\n        }\n        return (this._subjects[name] as BehaviorSubject<U>).getValue();\n    }\n\n    /**\n     * Listen to value change of the named property\n     * @param name Property name\n     * @param next Callback for value changes\n     */\n    public listen<U = any>(name: string): Observable<U> {\n        if (!this._observers[name]) {\n            this.set<U>(name, null);\n        }\n        return this._observers[name];\n    }\n\n    /**\n     * Update the value of the named property\n     * @param name Property name\n     * @param value New value\n     */\n    protected set<U = any>(name: string, value: U): void {\n        if (!this._subjects[name]) {\n            this._subjects[name] = new BehaviorSubject<U>(value);\n            this._observers[name] = this._subjects[name].asObservable();\n        } else {\n            this._subjects[name].next(value);\n        }\n    }\n\n    /**\n     * Get list of loaded items\n     * @param predicate Function for filtering the list\n     */\n    public filter(predicate: (a: T) => boolean = this._list_filter): T[] {\n        const list = this.get('list') || [];\n        return list.reduce((a, i) => {\n            if (predicate(i)) {\n                a.push(i);\n            }\n            return a;\n        }, []);\n    }\n\n    /**\n     * Get item with the given id from the loaded items\n     * @param id ID of the item\n     */\n    public find(id: string): T {\n        const list = this.get('list') || [];\n        return list.find((i) => i.id === id || i.email === id);\n    }\n\n    /**\n     * Query the index of the API route associated with this service\n     * @param query_params Map of query paramaters to add to the request URL\n     */\n    public query(query_params: HashMap = { update_list: true }): Promise<T[]> {\n        let engine = false;\n        let cache = 1000;\n        /* istanbul ignore else */\n        if (query_params) {\n            engine = !!query_params.engine;\n            delete query_params.engine;\n            cache = query_params.cache || 1000;\n            delete query_params.cache;\n        }\n        const query = toQueryString(query_params);\n        const key = `query|${query}`;\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise((resolve, reject) => {\n                const url = `${this.route(engine)}${query ? '?' + query : ''}`;\n                let result: T[] | HashMap[] = [];\n                this.http.get(url).subscribe(\n                    (d: IEngineResponse | HashMap[]) => {\n                        result =\n                            d && d instanceof Array\n                                ? d.map((i) => this.process(i))\n                                : d && !(d instanceof Array) && d.results\n                                ? (d.results as HashMap[])\n                                : [];\n                    },\n                    (e) => {\n                        reject(e);\n                        this._promises.new_item = null;\n                    },\n                    () => {\n                        if (\n                            (!query || (query_params && query_params.update_list)) &&\n                            result.length > 0 &&\n                            result[0] instanceof BaseDataClass\n                        ) {\n                            this.set('list', this.updateList(this.get('list'), result as T[]));\n                        }\n                        resolve(result);\n                        this.timeout(key, () => (this._promises[key] = null), cache);\n                    }\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Query the API route for a sepecific item\n     * @param id ID of the item\n     * @param query_params Map of query paramaters to add to the request URL\n     */\n    public show(id: string, query_params: HashMap = {}): Promise<T> {\n        let engine = false;\n        /* istanbul ignore else */\n        if (query_params) {\n            engine = !!query_params.engine;\n            delete query_params.engine;\n        }\n        const query = toQueryString(query_params);\n        const key = `show|${id}|${query}`;\n        /* istanbul ignore else */\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise<T>((resolve, reject) => {\n                const url = `${this.route(engine)}/${id}${query ? '?' + query : ''}`;\n                let result: T = null;\n                this.http.get(url).subscribe(\n                    (d) => (result = this.process(d)),\n                    (e) => {\n                        reject(e);\n                        this._promises.new_item = null;\n                    },\n                    () => {\n                        resolve(result);\n                        this.timeout(key, () => (this._promises[key] = null), 1000);\n                    }\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Make post request for a new item to the service\n     * @param form_data Data to post to the server\n     * @param query_params Map of query paramaters to add to the request URL\n     */\n    public add(form_data: HashMap, query_params: HashMap = {}): Promise<T> {\n        /* istanbul ignore else */\n        if (!this._promises.new_item) {\n            this._promises.new_item = new Promise<T>((resolve, reject) => {\n                const query = toQueryString(query_params);\n                const url = `${this.route(query_params.engine)}${query ? '?' + query : ''}`;\n                let result: T = null;\n                this.http.post(url, form_data).subscribe(\n                    (d) => (result = this.process(d)),\n                    (e) => {\n                        reject(e);\n                        this.analyticsEvent(`create-${this._name.toLowerCase()}-failed`);\n                        this._promises.new_item = null;\n                    },\n                    () => {\n                        resolve(result);\n                        this.set('list', this.updateList(this.get('list'), [result]));\n                        this.analyticsEvent(`create-${this._name.toLowerCase()}-success`);\n                        this._promises.new_item = null;\n                    }\n                );\n            });\n        }\n        return this._promises.new_item;\n    }\n\n    /**\n     * Perform API task for the given item ID\n     * @param id ID of the item\n     * @param task_name Name of the task\n     * @param form_data Map of data to pass to the API\n     * @param method Verb to use for request\n     */\n    public task<U = any>(\n        id: string,\n        task_name: string,\n        form_data: HashMap = {},\n        method: 'post' | 'get' = 'post'\n    ): Promise<U> {\n        const query = toQueryString(form_data);\n        const key = `task|${id}|${task_name}|${query}`;\n        /* istanbul ignore else */\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise<U>((resolve, reject) => {\n                const post_data = { ...form_data, id, _task: task_name };\n                const url = `${this.api_route}/${id}/${task_name}`;\n                let result: any;\n                const request =\n                    method === 'post'\n                        ? this.http.post(url, post_data)\n                        : this.http.get(`${url}${query ? '?' + query : ''}`);\n                request.subscribe(\n                    (d) => (result = d),\n                    (e) => {\n                        reject(e);\n                        this.analyticsEvent(\n                            `${this._name.toLowerCase()}-task-${task_name}-failed`,\n                            id\n                        );\n                        delete this._promises[key];\n                    },\n                    () => {\n                        resolve(result as U);\n                        this.analyticsEvent(\n                            `${this._name.toLowerCase()}-task-${task_name}-success`,\n                            id\n                        );\n                        this.timeout(key, () => delete this._promises[key], 1000);\n                    }\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Setup a poller for an API endpoint\n     * @param id Show request ID. Leave blank to poll on the query endpoint\n     * @param query_params Map of query paramaters to add to the polled URL\n     * @param delay Delay between each poll event\n     */\n    public poll(\n        id?: string,\n        query_params: HashMap = {},\n        delay: number = 5000\n    ): Observable<T | T[]> {\n        const key = `poll|${id || ''}|${toQueryString(query_params) || ''}`;\n        this.stopPoll(id, query_params);\n        this._subjects[key] = new Subject<T | T[]>();\n        this._observers[key] = this._subjects[key].asObservable();\n        const sub = this._subjects[key];\n        const query = { ...(query_params || {}), _poll: true };\n        if (id) {\n            this.show(id, query).then(\n                (d) => sub.next(d),\n                (e) => sub.error(e)\n            );\n            this.interval(\n                key,\n                () => {\n                    this.show(id, query).then(\n                        (d) => sub.next(d),\n                        (e) => sub.error(e)\n                    );\n                },\n                delay\n            );\n        } else {\n            this.query(query).then(\n                (d) => sub.next(d),\n                (e) => sub.error(e)\n            );\n            this.interval(\n                key,\n                () => {\n                    this.query(query).then(\n                        (d) => sub.next(d),\n                        (e) => sub.error(e)\n                    );\n                },\n                delay\n            );\n        }\n        return this._observers[key];\n    }\n\n    /**\n     * Destroy poller\n     * @param id\n     * @param query_params\n     */\n    public stopPoll(id?: string, query_params: HashMap = {}) {\n        const key = `poll|${id || ''}|${toQueryString(query_params) || ''}`;\n        /* istanbul ignore else */\n        if (this._subjects[key]) {\n            this._subjects[key].complete();\n            this._subjects[key] = null;\n            this._observers[key] = null;\n        }\n    }\n\n    /**\n     * Make put request for changes to the item with the given id\n     * @param id ID of the item being updated\n     * @param form_data New values for the item\n     * @param query_params Map of query paramaters to add to the request URL\n     */\n    public update(id: string, form_data: HashMap, query_params: HashMap = {}): Promise<T> {\n        const key = `update|${id}`;\n        /* istanbul ignore else */\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise<T>((resolve, reject) => {\n                const query = toQueryString(query_params);\n                const url = `${this.route(query_params.engine)}/${id}${query ? '?' + query : ''}`;\n                let result: T = null;\n                this.http.put(url, form_data).subscribe(\n                    (d) => (result = this.process(d)),\n                    (e) => {\n                        reject(e);\n                        this.analyticsEvent(`update-${this._name.toLowerCase()}-failed`, id);\n                        this._promises[key] = null;\n                    },\n                    () => {\n                        resolve(result);\n                        this.set(\n                            'list',\n                            this.updateList(this.removeItem(this.get('list'), { id } as any), [\n                                result,\n                            ])\n                        );\n                        this.analyticsEvent(`update-${this._name.toLowerCase()}-success`, id);\n                        this._promises[key] = null;\n                    }\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Make delete request for the given item\n     * @param id ID of item\n     */\n    public delete(id: string): Promise<void> {\n        const key = `delete|${id}`;\n        /* istanbul ignore else */\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise<void>((resolve, reject) => {\n                const url = `${this.route()}/${id}`;\n                this.http.delete(url).subscribe(\n                    (_) => null,\n                    (e) => reject(e),\n                    () => {\n                        this.set('list', this.removeItem(this.get('list'), { id } as any));\n                        resolve();\n                    }\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Add new API item from another service or API class\n     * @param id ID of the item/or service adding the new item\n     * @param data Raw API data for the new item\n     * @param type Adder type\n     */\n    public addFrom(\n        id: string,\n        data: HashMap,\n        type: 'class' | 'service' | 'other' = 'other'\n    ): string {\n        const new_item = this.process(data);\n        this.set('list', this.updateList(this.get('list'), [new_item]));\n        return (new_item as any).id;\n    }\n\n    /**\n     * Remove items with the given IDs from the list\n     * @param id ID of the item/or service remove the list of items\n     * @param remove_ids List of item IDs to remove\n     * @param type Remover type\n     */\n    public removeFrom(\n        id: string,\n        remove_ids: string[],\n        type: 'class' | 'service' | 'other' = 'other'\n    ) {}\n\n    /**\n     * Load initial data for the service\n     */\n    protected async load(): Promise<void> {}\n\n    /**\n     * Post analytics event for this service\n     * @param action Name of the action to post\n     */\n    protected analyticsEvent(action: string, label?: string) {\n        if (this.parent && this.parent.Analytics) {\n            // this.parent.Analytics.track(this._name, { desc: `${this.parent.name.toLowerCase()}-${action}`, label });\n        }\n    }\n\n    /**\n     * Convert raw API data into a valid API Object\n     * @param raw_item Raw API data\n     */\n    protected process(raw_item: HashMap): T {\n        return raw_item as T;\n    }\n\n    /**\n     * Update recorded list of items\n     * @param old_list Old list of items\n     * @param list List of updated items\n     * @param compareFn Function to compare items to remove duplicates\n     */\n    public updateList(\n        old_list: T[],\n        list: T[],\n        compareFn: (a: T, b: T) => boolean = this._compare\n    ): T[] {\n        /* istanbul ignore else */\n        if (!list || list.length === 0) {\n            return old_list;\n        }\n        const new_list: T[] = [];\n        const mixed_list = [...list, ...old_list];\n        /* istanbul ignore else */\n        if (!compareFn) {\n            compareFn = this._compare;\n        }\n        for (const item of mixed_list) {\n            const found = new_list.find((i) => compareFn(i, item));\n            /* istanbul ignore else */\n            if (!found) {\n                new_list.push(item);\n            }\n        }\n        return new_list;\n    }\n\n    /**\n     * Remove the given item from the given list\n     * @param list List of items\n     * @param item Item to remove\n     * @param compareFn Function to compare items\n     */\n    protected removeItem(list: T[], item: T, compareFn?: (a: T, b: T) => boolean) {\n        const new_list = [];\n        /* istanbul ignore else */\n        if (!compareFn) {\n            compareFn = this._compare;\n        }\n        list.forEach((i) => (compareFn(item, i) ? null : new_list.push(i)));\n        return new_list;\n    }\n}\n","import { BaseDataClass } from '../base-api.class';\nimport { BaseAPIService } from '../base.service';\n\nimport { BookingNote, BookingMutableFields, BookingRecurrenceDetails } from './booking.interfaces';\nimport { CateringOrder } from '../catering/catering-order.class';\nimport { User } from '../users/user.class';\nimport { HashMap } from '../../../shared/utilities/types.utilities';\nimport { humaniseDuration, unique, flatten } from '../../../shared/utilities/general.utilities';\nimport { Space } from '../spaces/space.class';\n\nimport * as dayjs from 'dayjs';\n\nexport class Booking extends BaseDataClass {\n    /** Unique calendar event ID */\n    public readonly icaluid: string;\n    /** Subject or title of the booking */\n    public readonly title: string;\n    /** Unix timestamp of the booking start */\n    public readonly date: number;\n    /** Length of the booking in minutes */\n    public readonly duration: number;\n    /** Description or details of the booking */\n    public readonly body: string;\n    /** Type of booking */\n    public readonly type: string;\n    /** Whether the booking has catering associated with it */\n    public readonly has_catering: boolean;\n    /** List of catering orders for the booking */\n    public readonly catering: readonly CateringOrder[];\n    /** String location set in booking */\n    public readonly _location: string;\n    /** Whether booking's duration covers all day */\n    public readonly all_day: boolean;\n    /** Details of the recurrence */\n    public readonly recurrence: BookingRecurrenceDetails;\n    /** Mapping of emails to approval statuses */\n    public readonly approval_status: HashMap<string>;\n    /** List of spaces associated with the booking */\n    public readonly space_ids: readonly string[];\n    /** List of attendee emails associated with the booking */\n    public readonly attendee_emails: readonly string[];\n    /** Email of the host or organiser of the booking */\n    public readonly organiser_email: string;\n    /** Email of the host or organiser of the booking */\n    public readonly creator_email: string;\n    /** List of notes associated with the booking */\n    public readonly notes: readonly BookingNote[];\n    /** Mapping of spaces to equipment charge codes */\n    public readonly equipment_codes: HashMap<string>;\n    /** Mapping of spaces to expected number of attendees */\n    public readonly expected_attendees: HashMap<number>;\n    /** Setup time before the meeting in minutes */\n    public readonly setup: number;\n    /** List of checked in attendees */\n    public readonly checked_in: string[];\n    /** Breakdown time after booking in minutes */\n    public readonly breakdown: number;\n    /** List of fields edited since creation */\n    public readonly edits: string[];\n    /** List of users to be notified on visitor arrivals */\n    public readonly notify_users: readonly string[];\n    /** Map of display strings */\n    private _display: HashMap<string> = {};\n    /** Class type of required service */\n    protected __type: string = 'Booking';\n\n    constructor(raw_data: HashMap) {\n        super(raw_data);\n        const u_service = this._service.parent.Users;\n        this.icaluid = raw_data.icaluid || this.id || '';\n        this.title = raw_data.title || raw_data.subject || raw_data.Subject || '';\n        let start = dayjs(\n            raw_data.date || raw_data.start_epoch * 1000 || raw_data.start || raw_data.Start\n        ).startOf('m');\n        if (!this.id) {\n            start = start.minute(Math.ceil(start.minute() / 5) * 5);\n        }\n        this.date = start.valueOf();\n        this.duration =\n            Math.max(\n                0,\n                raw_data.duration ||\n                    dayjs(raw_data.end_epoch * 1000 || raw_data.end || raw_data.End).diff(\n                        start,\n                        'm'\n                    )\n            ) || 60;\n        this.body =\n            (raw_data.body instanceof Object ? raw_data.body.content : raw_data.body) ||\n            raw_data.description ||\n            '';\n        this.type =\n            raw_data.booking_type ||\n            raw_data.type ||\n            (raw_data.visitors ? 'external' : null) ||\n            'internal';\n        this.has_catering = !!raw_data.has_catering;\n        this.attendee_emails = (raw_data.attendees || raw_data._attendees || []).map((i) =>\n            i instanceof Object ? i.email || i.id : i\n        );\n        const organiser = raw_data.organiser || raw_data.organizer || u_service.current || {};\n        this.organiser_email =\n            raw_data.organiser_email ||\n            organiser.email ||\n            raw_data._organiser ||\n            raw_data.organiser;\n        const creator = raw_data.creator || raw_data.booked_by || organiser;\n        this.creator_email = raw_data.creator_email || creator.email || '';\n        this._location = raw_data.location_name || raw_data.location || '';\n        this.all_day = raw_data.all_day || this.duration > 23 * 60;\n        this.setup = raw_data.setup || 0;\n        this.breakdown = raw_data.breakdown || 0;\n        this.recurrence = raw_data.recurrence\n            ? {\n                  ...raw_data.recurrence,\n                  start: raw_data.recurrence.start,\n                  end: raw_data.recurrence.end,\n              }\n            : {};\n        if (this.recurrence.end && this.recurrence.end < new Date().getTime()) {\n            (this as any).recurrence = {\n                ...this.recurrence,\n                start: this.recurrence.start * 1000,\n                end: this.recurrence.end * 1000,\n            };\n        }\n        this.notes = raw_data.notes || [];\n        this.equipment_codes = raw_data.equipment_codes || raw_data.equipment_code || {};\n        this.expected_attendees = raw_data.expected_attendees || {};\n        this.approval_status = raw_data.approval_status || raw_data.status || {};\n        this.checked_in = raw_data.checked_in || raw_data.checkins || [];\n        this.notify_users = raw_data.notify_users || [];\n        if (raw_data.description && !this.notes.find((i) => i.type === 'description')) {\n            this.notes = [\n                ...this.notes,\n                {\n                    type: 'description',\n                    date: -1,\n                    message: raw_data.description,\n                    author: this.organiser_email,\n                },\n            ];\n        }\n        this._display = {\n            date: start.format('DD MMM YYYY'),\n            time: `${start.format('h:mma')} - ${dayjs(start)\n                .add(this.duration, 'm')\n                .format('h:mma')}`,\n            start: start.format('h:mma'),\n            end: dayjs(start).add(this.duration, 'm').format('h:mma'),\n            duration: humaniseDuration(this.duration),\n        };\n        this.space_ids = unique(\n            raw_data.room_ids || raw_data.room_id || raw_data._space_list || []\n        );\n        if (raw_data.show_as && raw_data.show_as === 'cancelled') {\n            this.space_ids.forEach((id) => (this.approval_status[id] = 'declined'));\n        }\n        // Add attendees and organiser to service data\n        if (this._service.parent && this._service.parent.Users) {\n            if (raw_data.attendees) {\n                raw_data.attendees.forEach((u) => {\n                    if (!this._service.parent.Users.find(u.email)) {\n                        this._service.parent.Users.addFrom(this.id, u, 'class');\n                    }\n                });\n            }\n            if (organiser) {\n                if (!this._service.parent.Users.find(organiser.email)) {\n                    this._service.parent.Users.addFrom(this.id, organiser, 'class');\n                }\n            }\n        }\n        this.catering = (raw_data.catering instanceof Array ? raw_data.catering : []).map(\n            (i) => new CateringOrder(i)\n        );\n        this.edits =\n            raw_data.edits instanceof Array\n                ? raw_data.edits\n                : unique(flatten(Object.keys(raw_data.edits || {}).map((i) => raw_data.edits[i])));\n    }\n\n    /** Whether booking has been declined */\n    public get declined(): boolean {\n        for (const email of this.space_ids) {\n            if ((this.approval_status[email] || '').indexOf('decline') >= 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** Whether booking has been approved */\n    public get approved(): boolean {\n        for (const email of this.space_ids) {\n            if (\n                this.approval_status[email] &&\n                (this.approval_status[email].indexOf('tentative') >= 0 ||\n                    this.approval_status[email].indexOf('decline') >= 0)\n            ) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /** Whether booking is tentative */\n    public get tentative(): boolean {\n        for (const email of this.space_ids) {\n            if (\n                this.approval_status[email] &&\n                this.approval_status[email].indexOf('tentative') >= 0\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** Whether booking contains external visitors in the attendee list */\n    public get has_visitors(): boolean {\n        return this.attendees.reduce((a, v) => a || v.external, false);\n    }\n\n    /** List of attendees to the meeting */\n    public get attendees(): User[] {\n        return this._service && this._service.parent && this._service.parent.Users\n            ? this.attendee_emails.map(\n                  (user) =>\n                      this._service.parent.Users.find(user) ||\n                      new User({ id: user, name: user, email: user })\n              )\n            : [];\n    }\n\n    /** Host or organiser of the meeting */\n    public get organiser(): User {\n        return this._service &&\n            this._service.parent &&\n            this._service.parent.Users &&\n            this.organiser_email\n            ? this._service.parent.Users.find(this.organiser_email)\n            : null;\n    }\n\n    /** Creator of the meeting */\n    public get creator(): User {\n        return this._service &&\n            this._service.parent &&\n            this._service.parent.Users &&\n            this.creator_email\n            ? this._service.parent.Users.find(this.creator_email)\n            : null;\n    }\n\n    /** Status of the booking */\n    public get status(): 'future' | 'upcoming' | 'done' | 'started' | 'in_progress' {\n        const now = dayjs();\n        const date = dayjs(this.date);\n        if (now.isBefore(date.subtract(15, 'm'), 'm')) {\n            return 'future';\n        } else if (now.isBefore(date, 'm')) {\n            return 'upcoming';\n        } else if (now.isBefore(date.add(15, 'm'), 'm')) {\n            return 'started';\n        } else if (now.isBefore(date.add(this.duration, 'm'), 'm')) {\n            return 'in_progress';\n        }\n        return 'done';\n    }\n\n    /** Description of the booking purpose */\n    public get description(): string {\n        const note = (this.notes || []).find((i) => i.type === 'description');\n        return note ? note.message : '';\n    }\n\n    /** Get the first space from the space list */\n    public get space(): Space {\n        return this._service &&\n            this._service.parent &&\n            this._service.parent.Spaces &&\n            this.space_ids &&\n            this.space_ids.length > 0\n            ? this._service.parent.Spaces.find(this.space_ids[0])\n            : null;\n    }\n\n    /** Spaces associated with the booking */\n    public get space_list(): Space[] {\n        return this._service &&\n            this._service.parent &&\n            this._service.parent.Spaces &&\n            this.space_ids\n            ? this.space_ids.map(\n                  (i) =>\n                      this._service.parent.Spaces.find(i) || new Space({ id: i, name: i, email: i })\n              )\n            : [];\n    }\n\n    /** Display value for the date */\n    public get date_string(): string {\n        return this._display.date;\n    }\n    /** Display valuie for the start and end times of the booking */\n    public get time_period(): string {\n        return this._display.time;\n    }\n    /** Display value for the start time of the booking */\n    public get start_time(): string {\n        return this._display.start;\n    }\n    /** Display value for the end time of the booking */\n    public get end_time(): string {\n        return this._display.end;\n    }\n    /** Display value for the duration of the booking */\n    public get length_string(): string {\n        return this._display.duration;\n    }\n    /** Display value for the location of the booking */\n    public get location(): string {\n        return this._display.space_names || this._location || 'No location set';\n    }\n    /** Display value for the level of the first space in the booking */\n    public get level(): string {\n        return this._display.level;\n    }\n\n    /**\n     * Store new value for given field\n     * @param key Name of the property\n     * @param value New value associated with the property\n     */\n    public storePendingChange(key: BookingMutableFields, value: Booking[BookingMutableFields]) {\n        return super.storePendingChange(key as any, value as any);\n    }\n\n    /**\n     * Make a copy of this object\n     */\n    public clone(): Booking {\n        return new Booking(this);\n    }\n\n    /**\n     * Make a copy of this object without identification data\n     */\n    public duplicate(): Booking {\n        return new Booking({\n            ...this.toJSON(),\n            id: null,\n            email: null,\n            icaluid: null,\n        });\n    }\n\n    /**\n     * Convert object into plain object\n     */\n    public toJSON(this: Booking, with_changes: boolean = true): HashMap {\n        const data = super.toJSON(with_changes);\n        const date = dayjs(data.date);\n        data.start_epoch = date.unix();\n        data.end_epoch = date.add(data.duration || 60, 'm').unix();\n        data.organiser =\n            this.organiser instanceof User\n                ? this.organiser.toJSON()\n                : {\n                      email:\n                          typeof this.organiser === 'string'\n                              ? this.organiser\n                              : this.organiser_email,\n                  };\n        data.auto_approve = data.space_ids.map((space) => true);\n        if (data.body && !data.notes.find((note) => note.message === data.body)) {\n            data.notes.push({\n                type: 'description',\n                message: data.body,\n                author: this._service.parent.Users.current.email,\n                date: dayjs().valueOf(),\n            } as BookingNote);\n            data.notes.sort((a, b) => b.date - a.date);\n        }\n        data.organiser = this._service.parent.Users.find(data.organiser_email) || {\n            email: data.organiser_email,\n        };\n        delete data.organiser_email;\n        data.attendees = data.attendee_emails.map((user) => {\n            return this._service.parent.Users.find(user) || { email: user };\n        });\n        data.attendees = unique([data.organiser].concat(data.attendees), 'email');\n        data.notify_users = [data.organiser.email];\n        data.room_ids = data.space_ids;\n        data.old_date = this.date;\n        data.from_room = this.space ? this.space.email : '';\n        delete data.attendee_emails;\n        delete data.space_ids;\n        delete data.date;\n        delete data.duration;\n        delete data.display;\n        delete data.email;\n        delete data.name;\n        return data;\n    }\n}\n","import { FormGroup, FormControl, Validators, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport {\n    padZero,\n    humaniseDuration,\n    timeFormatString,\n} from '../../../shared/utilities/general.utilities';\n\nimport { generateMockUser } from '../users/user.utilities';\nimport { Booking } from './booking.class';\nimport { User } from '../users/user.class';\nimport { Space } from '../spaces/space.class';\nimport { CateringOrder } from '../catering/catering-order.class';\nimport { HashMap } from 'src/app/shared/utilities/types.utilities';\nimport { AvailableBookingFields } from 'src/app/shared/utilities/settings.interfaces';\nimport { BookingRule, SpaceCheckOptions, SpaceRules, SpaceRuleOptions } from './booking.interfaces';\nimport { validateEndTime } from 'src/app/shared/utilities/validation.utilities';\n\nimport * as faker from 'faker';\nimport * as dayjs from 'dayjs';\n\nconst MINUTE = 1;\nconst HOUR = 60;\nconst DAY = 24 * HOUR;\nconst WEEK = 7 * DAY;\nconst MONTH = 30 * DAY;\n\nconst DURATION_MAP: { [duration: string]: number } = {\n    month: MONTH,\n    months: MONTH,\n    week: WEEK,\n    weeks: WEEK,\n    day: DAY,\n    days: DAY,\n    hour: HOUR,\n    hours: HOUR,\n    minute: MINUTE,\n    minutes: MINUTE,\n};\n\nlet BOOKING_COUNT = 0;\nlet BOOKING_DATE = dayjs().hour(6).minute(0).subtract(1, 'd').startOf('m');\n\n/**\n * Set the initial time used for generating mock bookings\n * @param time New initial time as ms from UTC epoch\n */\nexport function setMockBookingStartDatetime(time: number) {\n    BOOKING_DATE = dayjs(time).startOf('m');\n}\n\n/**\n * Create mock raw API data for a booking\n * @param override Overrides the properties of the generated booking with it's own\n */\nexport function generateMockBooking(override: HashMap = {}) {\n    const id = `booking-${BOOKING_COUNT++}`;\n    BOOKING_DATE = BOOKING_DATE.add(Math.floor(Math.random() * 4 + 2) * 15, 'm');\n    const start = BOOKING_DATE.valueOf();\n    const duration = Math.floor(Math.random() * 4 + 2) * 15;\n    BOOKING_DATE = BOOKING_DATE.add(Math.floor(Math.random() * 4) * 15, 'm');\n    return {\n        id,\n        icaluid: padZero(Math.floor(Math.random() * 99999999), 8),\n        title: `${faker.commerce.productName()} Meeting`,\n        attendees: Array(Math.floor(Math.random() * 5 + 2))\n            .fill(0)\n            .map((i) => generateMockUser()),\n        organiser: generateMockUser(),\n        start_epoch: dayjs(start).unix(),\n        end_epoch: dayjs(start).add(duration, 'm').unix(),\n        description: faker.lorem.paragraph(),\n        notes: [{ type: 'other', message: faker.lorem.paragraph() }],\n        location: faker.address.city(),\n        has_catering: Math.floor(Math.random() * 34567) % 3 === 0,\n        catering: [],\n        room_ids: [],\n        ...override,\n    };\n}\n\nexport interface IBookingSlot {\n    start: number;\n    end: number;\n}\n\n/**\n * Generate a list of free time slots between the given bookings\n * @param list List of bookings to find slots between\n * @param min_size Minimum length of a free slot in minutes\n */\nexport function getFreeBookingSlots(list: Booking[], min_size: number = 30): IBookingSlot[] {\n    /* istanbul ignore else */\n    if (!list) {\n        return [\n            {\n                start: 0,\n                end: dayjs().startOf('m').valueOf() * 10,\n            },\n        ];\n    }\n    const slots: IBookingSlot[] = [];\n    let start = dayjs(0);\n    list.sort((a, b) => a.date - b.date);\n    for (const booking of list) {\n        const bkn_start = dayjs(booking.date);\n        const bkn_end = bkn_start.add(booking.duration, 'm');\n        if (bkn_start.isAfter(start)) {\n            const diff = Math.abs(bkn_start.diff(start, 'm'));\n            /* istanbul ignore else */\n            if (diff >= min_size) {\n                slots.push({ start: start.valueOf(), end: bkn_start.valueOf() });\n            }\n            start = bkn_end;\n        } else if (start.startOf('m').valueOf() === bkn_start.startOf('m').valueOf()) {\n            start = bkn_end;\n        }\n    }\n    slots.push({\n        start: start.valueOf(),\n        end: dayjs().startOf('m').valueOf() * 10,\n    });\n    return slots;\n}\n\n/**\n * Get the next free time slot from the given bookings\n * @param list List of bookings to find the next slot\n * @param date Date to find next slot after in ms since UTC epoch\n * @param min_size Minimum length of the free slot in minutes\n */\nexport function getNextFreeBookingSlot(\n    list: Booking[],\n    date: number = dayjs().valueOf(),\n    min_size: number = 30\n): IBookingSlot {\n    const slots = getFreeBookingSlots(list, min_size);\n    const time = dayjs(date).startOf('m').second(1);\n    for (const block of slots) {\n        const start = dayjs(block.start).startOf('m');\n        const end = dayjs(block.end).startOf('m');\n        if (start.isAfter(time, 's')) {\n            return block;\n        } else if (time.isBefore(end, 's')) {\n            const duration = end.diff(time, 'm');\n            /* istanbul ignore else */\n            if (duration >= min_size) {\n                return block;\n            }\n        }\n    }\n    return slots[slots.length - 1];\n}\n\n/**\n * Generate form fields for the given booking\n * @param booking Booking to generate form for\n * @param current_user Current user of the system to default as the host\n */\nexport function generateBookingForm(\n    booking: Booking,\n    current_user: User,\n    use_fields: AvailableBookingFields[]\n): FormGroup {\n    if (!booking) {\n        throw Error('No booking passed');\n    }\n    if (!current_user) {\n        current_user = {} as any;\n    }\n    const fields: HashMap<FormControl> = {\n        id: new FormControl(booking.id || ''),\n        space_list: new FormControl(booking.space_list, []),\n        space_ids: new FormControl(booking.space_ids, []),\n        date: new FormControl(booking.date, [Validators.required]),\n        duration: new FormControl(booking.duration),\n        organiser: new FormControl(booking.organiser || current_user, [Validators.required]),\n        organiser_email: new FormControl(booking.organiser_email || current_user.email, [\n            Validators.required,\n        ]),\n        attendees: new FormControl(booking.attendees, []),\n        title: new FormControl(booking.title || '', [Validators.required]),\n        type: new FormControl(booking.type),\n        body: new FormControl(booking.body),\n        notes: new FormControl(booking.notes),\n        equipment_codes: new FormControl(booking.equipment_codes),\n        expected_attendees: new FormControl(booking.expected_attendees),\n        catering: new FormControl(\n            booking.catering.map(\n                (order) => new CateringOrder({ ...order, booking_date: booking.date })\n            )\n        ),\n        recurrence: new FormControl(booking.recurrence),\n        all_day: new FormControl(!!booking.all_day),\n        has_catering: new FormControl(!!booking.has_catering),\n        needs_space: new FormControl(true),\n    };\n    fields.duration.setValidators([Validators.required, validateEndTime(fields.date)]);\n    /* istanbul ignore else */\n    if (booking.id) {\n        fields.organiser.disable();\n        /* istanbul ignore else */\n        if (dayjs(booking.date).isBefore(dayjs(), 'm')) {\n            fields.date.disable();\n        }\n    } else {\n        fields.date.setValidators([Validators.required, isFuture]);\n    }\n    const simplified_fields = [\n        'id',\n        'space_list',\n        'space_ids',\n        'notes',\n        'equipment_codes',\n        'expected_attendees',\n        'organiser_email',\n        ...use_fields,\n    ].reduce((map, key) => {\n        /* istanbul ignore else */\n        if (fields[key]) {\n            map[key] = fields[key];\n        }\n        return map;\n    }, {});\n    // Generate form group for booking item\n    const form = new FormGroup(simplified_fields);\n    // Listen for changes on the fields and update booking\n    if (form && booking) {\n        let subs: HashMap<Subscription> = {};\n        Object.keys(form.controls).forEach((key: any) => {\n            if (booking.hasOwnProperty(key)) {\n                subs[`change_${key}`] = form.controls[key].valueChanges.subscribe((value) => {\n                    booking.storePendingChange(key, value);\n                });\n            }\n        });\n        subs.space_list_change = form.controls.space_list.valueChanges.subscribe(\n            (list: Space[]) => {\n                form.controls.space_ids.setValue(list.map((space) => space.email));\n            }\n        );\n        if (form.controls.organiser) {\n            subs.organiser_change = form.controls.organiser.valueChanges.subscribe((host: User) => {\n                form.controls.organiser_email.setValue(host.email);\n            });\n        }\n        subs.booking = booking.changeEvents.subscribe((event) => {\n            /* istanbul ignore else */\n            if (event.type === 'item_saved') {\n                for (const key in subs) {\n                    /* istanbul ignore else */\n                    if (subs[key] instanceof Subscription) {\n                        subs[key].unsubscribe();\n                    }\n                }\n            }\n        });\n    }\n    return form;\n}\n\n\n/**\n * Validate whether date is in the future\n * @param control Control to check value\n */\nexport function isFuture(control: AbstractControl) {\n    let now = dayjs().startOf('m');\n    now = now.minute(Math.floor(now.minute() / 5) * 5);\n    const date = dayjs(control.value);\n    return date.isBefore(now, 's') ? { date: 'Date needs to be in the future' } : null;\n}\n\n/**\n * Get booking rules for the given user and space\n * @param user User to determine applicable rules\n * @param space Space to get rules for\n * @param time Booking start time in ms since UTC epoch\n * @param rules List of booking rules for the building\n */\nexport function rulesForSpace(options: SpaceRuleOptions): SpaceRules {\n    if (!options) {\n        throw Error('Options are needed to check for rule matches');\n    }\n    const space_rules_for_user: SpaceRules = {\n        auto_approve: true,\n        hide: true,\n    };\n    /* istanbul ignore else */\n    if (options.space) {\n        for (const type in options.rules) {\n            if (\n                options.rules.hasOwnProperty(type) &&\n                options.rules[type] instanceof Array &&\n                options.space.zones.find((zone) => zone === type)\n            ) {\n                for (const rule_block of options.rules[type]) {\n                    /* istanbul ignore else */\n                    if (\n                        checkRules({\n                            user: options.user,\n                            space: options.space,\n                            time: options.time,\n                            recurr_end: options.recurr_end,\n                            duration: options.duration,\n                            rules: rule_block.conditions,\n                        })\n                    ) {\n                        const ruleset = rule_block.rules;\n                        const conditions = rule_block.conditions;\n                        space_rules_for_user.hide = false;\n                        /* istanbul ignore else */\n                        if (conditions.max_length) {\n                            space_rules_for_user.max_length = stringToMinutes(\n                                conditions.max_length as string\n                            );\n                        }\n                        /* istanbul ignore else */\n                        if (conditions.min_length) {\n                            space_rules_for_user.min_length = stringToMinutes(\n                                conditions.min_length as string\n                            );\n                        }\n                        // NOTE: use max_length in conditions instead of book_length in rules\n                        // if (ruleset.book_length) {\n                        //     space_rules_for_user.max_length = stringToMinutes(ruleset.book_length as string);\n                        // }\n                        /* istanbul ignore else */\n                        if (ruleset.auto_approve !== undefined) {\n                            space_rules_for_user.auto_approve = ruleset.auto_approve;\n                        }\n                        break;\n                    }\n                }\n            }\n            /* istanbul ignore else */\n            if (!space_rules_for_user.hide) {\n                break;\n            }\n        }\n    }\n    return space_rules_for_user;\n}\n\n/**\n * Check if user matches the given ruleset\n * @param user User to determine applicable rules\n * @param space Space to get rules for\n * @param time Booking start time in ms since UTC epoch\n * @param rules List of booking rules for the building\n */\nfunction checkRules(options: SpaceCheckOptions): boolean {\n    /* istanbul ignore else */\n    if (options.rules) {\n        const time = dayjs(options.time);\n        const recurr = options.recurr_end ? dayjs(options.recurr_end) : dayjs();\n        const count = Object.keys(options.rules).length;\n        let matches = 0;\n        for (const key of Object.keys(options.rules)) {\n            let counter = 0;\n            const condition: string[] =\n                options.rules[key] instanceof Array\n                    ? (options.rules[key] as [])\n                    : [options.rules[key] as string];\n            switch (key) {\n                case 'groups':\n                    /* istanbul ignore else */\n                    if (options.user && options.user.groups) {\n                        counter = 0;\n                        condition.forEach((i) =>\n                            options.user.groups.find((j) => j === i) ? counter++ : null\n                        );\n                        /* istanbul ignore else */\n                        if (counter > 0) {\n                            matches++;\n                        }\n                    }\n                    break;\n                case 'locations':\n                    /* istanbul ignore else */\n                    if (options.user && options.user.location) {\n                        counter = 0;\n                        condition.forEach((i) =>\n                            (options.user.last_location.name || '').indexOf(i) >= 0\n                                ? counter++\n                                : null\n                        );\n                        /* istanbul ignore else */\n                        if (counter >= options.rules[key].length) {\n                            matches++;\n                        }\n                    }\n                    break;\n                case 'is_before':\n                    /* istanbul ignore else */\n                    if (options.time) {\n                        const duration = stringToMinutes(condition[0]);\n                        const check = dayjs().add(duration, 'm');\n                        let match = time.isBefore(check, 'm');\n                        /* istanbul ignore else */\n                        if (recurr) {\n                            match = match && recurr.isBefore(check, 'm');\n                        }\n                        matches += match ? 1 : 0;\n                    }\n                    break;\n                case 'is_after':\n                    /* istanbul ignore else */\n                    if (options.time) {\n                        const duration = stringToMinutes(condition[0]);\n                        const check = dayjs().add(duration, 'm');\n                        time.isAfter(check, 'm') ? matches++ : '';\n                    }\n                    break;\n                case 'min_length':\n                    /* istanbul ignore else */\n                    if (options.duration) {\n                        durationGreaterThanOrEqual(options.duration, condition[0]) ? matches++ : '';\n                    }\n                    break;\n                case 'max_length':\n                    /* istanbul ignore else */\n                    if (options.duration) {\n                        durationGreaterThanOrEqual(condition[0], options.duration) ? matches++ : '';\n                    }\n                    break;\n            }\n        }\n        return matches >= count;\n    }\n    return false;\n}\n\n/**\n * Get minimum duration from ruleset in minutes\n * Default to 5min\n */\nexport function getMinLength(rule_list: HashMap<BookingRule[]>): number {\n    return Object.values(rule_list).reduce((min, block) => {\n        const min_block = block.reduce((min_length, el) => {\n            if (el.conditions.min_length && stringToMinutes(el.conditions.min_length) > min) {\n                return stringToMinutes(el.conditions.min_length);\n            } else {\n                return min_length;\n            }\n        }, 5);\n        if (min_block > min) {\n            return min_block;\n        } else {\n            return min;\n        }\n    }, 5) as number;\n}\n\n/**\n * Whether the first input is greater than the last. Converts duration strings into minutes\n * @param duration_1 First input can be a number in minutes or a duration string e.g. `1 hour`\n * @param duration_2 Second input can be a number in minutes or a duration string e.g. `30 minutes`\n */\nexport function durationGreaterThanOrEqual(\n    duration_1: string | number,\n    duration_2: string | number\n) {\n    const first: number = typeof duration_1 === 'string' ? stringToMinutes(duration_1) : duration_1;\n    const second: number =\n        typeof duration_2 === 'string' ? stringToMinutes(duration_2) : duration_2;\n    return first >= second;\n}\n\n/**\n * Conver time string into minutes\n * @param str timestring e.g. `'1 day'`, `'15 minutes'`, `'2 weeks'`\n */\nexport function stringToMinutes(str: string): number {\n    const parts = str.split(' ');\n    return +parts[0] * DURATION_MAP[parts[1]];\n}\n\n/**\n * Get current status within bookings\n * @param bookings List of bookings\n * @param host Host of the new event\n * @param date Datetime of the new event\n */\nexport function statusFromBookings(\n    bookings: Booking[],\n    bookable: boolean,\n    requestable: boolean,\n    date: number = dayjs().valueOf()\n) {\n    const free_slots = getFreeBookingSlots(bookings);\n    const now = dayjs(date);\n    const next_free_slot = free_slots.find((slot) => {\n        const start = dayjs(slot.start);\n        const end = dayjs(slot.end);\n        return start.isAfter(now) || (now.isAfter(start, 's') && now.isBefore(end, 'm'));\n    });\n    const start = dayjs(next_free_slot.start);\n    const end = dayjs(next_free_slot.end);\n    const currently_free = now.isAfter(start, 's') && now.isBefore(end, 'm');\n    const time_until_next_block = humaniseDuration(\n        currently_free ? end.diff(now, 'm') : start.diff(now, 'm'),\n        true\n    );\n    const free_tomorrow = !currently_free && !start.isSame(now, 'd');\n    const free_today = currently_free && !end.isSame(now, 'd');\n    return {\n        status: !bookable\n            ? 'Not Bookable'\n            : currently_free\n            ? requestable\n                ? 'Available by Request'\n                : 'Available'\n            : 'Meeting in Progress',\n        available_until: free_today\n            ? 'No meetings today'\n            : currently_free\n            ? `Free until ${end.format(timeFormatString())}(${time_until_next_block})`\n            : free_tomorrow\n            ? 'Unavailable today'\n            : `Free at ${start.format(timeFormatString())}(${time_until_next_block})`,\n    };\n}\n","\nimport { Injectable } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\n\nimport { BaseAPIService } from '../base.service';\nimport { Booking } from './booking.class';\nimport { HashMap } from '../../../shared/utilities/types.utilities';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BookingsService extends BaseAPIService<Booking> {\n    constructor(protected _composer: ComposerService) {\n        super(_composer);\n        Booking.setService('Booking', this);\n        this._name = 'Bookings';\n        this._api_route = 'bookings';\n        this._compare = (a, b) => !(a.id || '').localeCompare(b.id) || !(a.icaluid || '').localeCompare(b.icaluid);\n    }\n\n    public accept(id: string, fields?: HashMap) {\n        return this.task(id, 'accept', fields);\n    }\n\n    public decline(id: string, fields?: HashMap) {\n        return this.task(id, 'concierge_decline', fields);\n    }\n\n    protected process(raw_data: HashMap): Booking {\n        return new Booking(raw_data);\n    }\n}\n","\nimport { Injectable } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\n\nimport { CateringCategory } from './catering-category.class';\nimport { BaseAPIService } from '../base.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CateringCategoriesService extends BaseAPIService<CateringCategory> {\n\n    constructor(protected _composer: ComposerService) {\n        super(_composer);\n        this._name = 'catering category/group';\n        this._api_route = '/catering/category';\n    }\n\n    public query(): never {\n        throw Error('No index endpoint for catering categories. Use catering menu service.');\n    }\n\n    public show(): never {\n        throw Error('No show endpoint for catering categories. Use catering menu service.');\n    }\n\n    public processItem(raw_item: any) {\n        return new CateringCategory(raw_item);\n    }\n\n    public format(item: CateringCategory) {\n        return item instanceof CateringCategory ? item.toJSON() : item;\n    }\n}\n","import { CateringItem } from \"./catering-item.class\";\nimport { HashMap } from \"../../../shared/utilities/types.utilities\";\n\nexport class CateringCategory extends CateringItem {\n    /** List of items associated with the category */\n    public readonly items: readonly CateringItem[];\n    /** Whether child items are part of a package */\n    public readonly package: boolean;\n    /** List of zone ids associated with the category */\n    public readonly zones: readonly string[];\n\n    public get can_order_anytime(): boolean {\n        return (\n            this.order_anytime ||\n            this.items.reduce(\n                (anytime, item) => anytime || item.can_order_anytime,\n                false\n            )\n        );\n    }\n\n    constructor(data: HashMap) {\n        super(data);\n        this.items = (data.items || []).map(item =>\n            item.items ? new CateringCategory(item) : new CateringItem(item)\n        );\n        this.package = data.package === 'true' || data.package === true;\n        this.zones = data.zones && data.zones.length ? [ ...data.zones ] : [];\n        (this as any).must_select = this.must_select || this.items.length;\n        (this as any).order_anytime = !!data.order_anytime && this.package;\n    }\n\n    /**\n     * Convert class object into plain object\n     */\n    public toJSON(this: CateringItem): HashMap {\n        const obj = super.toJSON();\n        obj.items = obj.items.map((item: CateringItem) => item.toJSON());\n        obj.order_anytime = !!obj.order_anytime && obj.package;\n        return obj;\n    }\n}\n","import { HashMap } from \"../../../shared/utilities/types.utilities\";\n\nexport interface CateringAvailability {\n    /** Month of the year that the item starts being available */\n    readonly from_month: number;\n    /** Month of the year that the item ends being available */\n    readonly to_month: number;\n}\n\nexport class CateringItem {\n    /** Unique ID of the catering item */\n    public readonly id: string;\n    /** Display name of the catering item */\n    public readonly name: string;\n    /** Description of the item */\n    public readonly description: string;\n    /** URL to the image associated with the item */\n    public readonly image_path: string;\n    /** Type of catering item */\n    public readonly catering_type: string;\n    /** Availability of the item */\n    public readonly available: CateringAvailability;\n    /** Time in hours that is needed to prepare the item beforehand */\n    public readonly prior_notice: number;\n    /** Cost of the item without decimals */\n    public readonly unit_price: number;\n    /** Cost of the item without decimals */\n    public readonly supplier_cost: number;\n    /** Minimum number this item allowed in an order */\n    public readonly minimum_quantity: number;\n    /** Maximum number this item allowed in an order */\n    public readonly maximum_quantity: number;\n    /** List of categories that the item is contained in */\n    public readonly parent_categories: readonly string[];\n    /** Allegen information associated with the item */\n    public readonly allergy: string;\n    /** Whether the supply of this item has run out */\n    public readonly out_of_stock: boolean;\n    /** Whether item can be ordered within the time limit set by the building */\n    public readonly order_anytime: boolean;\n    /** Number of child items that must be selected as part of the package */\n    public readonly must_select: number;\n    /** Number of this item in the assoicated order */\n    private _amount = 0;\n    /** Unique ID of the catering item */\n    private instance_id: string;\n\n\n    public get can_order_anytime(): boolean {\n        return this.order_anytime;\n    }\n\n    /** Number of this item in the assoicated order */\n    public get amount(): number {\n        return this._amount || 0;\n    }\n\n    /** Total cost of the amount of items set */\n    public get total(): number {\n        return (this._amount * this.unit_price) || 0;\n    }\n\n    constructor(data: HashMap) {\n        this.instance_id = `item-${Math.floor(Math.random() * 999_999_999)}`\n        this.id = data.id || '';\n        this.name = data.name || '';\n        this.available = {\n            from_month: (data.available ? data.available.from_month : data.available_from) || -1,\n            to_month: (data.available ? data.available.to_month : data.available_to) || -1,\n        };\n        this.description = data.description || '';\n        this.prior_notice = data.prior_notice || data.notice;\n        this.unit_price = data.unit_price || data.price || 0;\n        this.supplier_cost = data.supplier_cost;\n        this.minimum_quantity = Math.max(0, data.minimum_quantity || 0);\n        this.maximum_quantity = Math.max(1, data.maximum_quantity || 999);\n        this.parent_categories = data.category_ids || data.parent_categories || data.categories;\n        this.order_anytime = !!data.order_anytime;\n        this.image_path = data.image_path || '';\n        this.catering_type = data.catering_type;\n        this.must_select = data.must_select || 0;\n        this.out_of_stock = !!data.out_of_stock || data.hide;\n        this._amount = data._amount || data.amount || 0;\n        this.allergy = data.allergy;\n    }\n\n    public setAmount(amount: number = 0): void {\n        if (amount <= this._amount) {\n            if (amount < this.minimum_quantity) {\n                amount = 0;\n            }\n        } else {\n            if (amount < this.minimum_quantity) {\n                amount = this.minimum_quantity;\n            }\n        }\n        this._amount = Math.max(0, Math.min(this.maximum_quantity, amount));\n    }\n\n    /**\n     * Increase amount of the item the order\n     * @param amount Amount to increase by\n     */\n    public addToOrder(amount: number = 1) {\n        amount = Math.max(1, amount);\n        this._amount += amount;\n        if (this._amount < 0) {\n            this._amount = 0;\n        } else if (this._amount < this.minimum_quantity) {\n            this._amount = this.minimum_quantity;\n        } else if (this._amount > this.maximum_quantity) {\n            this._amount = this.maximum_quantity;\n        }\n    }\n\n    /**\n     * Decrease amount of the item the order\n     * @param amount Amount to decrease by\n     */\n    public removeFromOrder(amount: number = 1) {\n        amount = Math.max(1, amount);\n        this._amount -= amount;\n        if (this._amount < 0) {\n            this._amount = 0;\n        } else if (this._amount < this.minimum_quantity) {\n            this._amount = 0;\n        }\n    }\n\n    /**\n     * Convert class object into plain object\n     */\n    public toJSON(this: CateringItem): HashMap {\n        const obj: any = { ...this };\n        // Remove local private members\n        delete obj._changes;\n        delete obj._server_names;\n        // Convert remaining members to be public\n        obj.price = obj.unit_price;\n        obj.hide = obj.out_of_stock;\n        obj.categories = obj.parent_categories;\n        const keys = Object.keys(obj);\n        for (const key of keys) {\n            if (key[0] === '_') {\n                const new_key = key.substr(1);\n                obj[new_key] = obj[key];\n                delete obj[key];\n            } else if (obj[key] === undefined) {\n                delete obj[key];\n            }\n        }\n        return obj;\n    }\n}\n","\nimport { Injectable } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\n\nimport { BaseAPIService } from '../base.service';\nimport { CateringItem } from './catering-item.class';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CateringItemsService extends BaseAPIService<CateringItem> {\n    constructor(protected _composer: ComposerService) {\n        super(_composer);\n        this._name = 'Catering Menu';\n        this._api_route = 'catering/item';\n    }\n\n    public query(): never {\n        throw Error('No index endpoint for catering items. Use menu service.');\n    }\n\n    public show(): never {\n        throw Error('No show endpoint for catering items. Use menu service.');\n    }\n\n    public processItem(raw_item: any) {\n        return new CateringItem(raw_item);\n    }\n\n    public format(item: CateringItem) {\n        return item instanceof CateringItem ? item.toJSON() : item;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\n\nimport { CateringItem } from './catering-item.class';\nimport { CateringCategory } from './catering-category.class';\nimport { BaseAPIService } from '../base.service';\nimport { HashMap } from '../../../shared/utilities/types.utilities';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CateringMenuService extends BaseAPIService<CateringItem | CateringCategory> {\n    constructor(protected _composer: ComposerService) {\n        super(_composer);\n        this._name = 'Catering Menu';\n        this._api_route = 'menu';\n    }\n\n    /**\n     * Convert user data to local format\n     * @param user User data\n     */\n    protected processItem(item: HashMap) {\n        return item.items ? new CateringCategory(item) : new CateringItem(item);\n    }\n}\n","import { CateringItem } from './catering-item.class';\nimport { HashMap } from '../../../shared/utilities/types.utilities';\n\nimport { CateringCategory } from './catering-category.class';\nimport { Booking } from '../bookings/booking.class';\n\nimport * as dayjs from 'dayjs';\n\nexport type CateringOrderMutableProperties =\n    | 'items'\n    | 'location_id'\n    | 'location'\n    | 'delivery_time'\n    | 'charge_code'\n    | 'notes'\n    | 'status';\n\nexport type CateringOrderStatus = 'accepted' | 'preparing' | 'ready' | 'delivered' | 'cancelled';\n\nexport class CateringOrder {\n    /** Booking associated with the order */\n    public booking: Booking;\n    /** Whether the order status change is loading */\n    public loading: boolean;\n    /** Unique ID for the catering order */\n    readonly id: string;\n    /** Unique ID for the catering order */\n    readonly booking_id: string;\n    /** Number of minutes after the start of the associated meeting to delivery the order */\n    readonly booking_date: number = dayjs()\n        .startOf('m')\n        .valueOf();\n    /** Number of minutes after the start of the associated meeting to delivery the order */\n    readonly delivery_time: number = 0;\n    /** ID of the location to deliver the items to */\n    readonly location_id: string = '';\n    /** Display text for the location to deliver the items to */\n    readonly location: string = '';\n    /** Status of the catering order */\n    readonly status: CateringOrderStatus;\n    /** Whether items in the order need to be prepared in the kitchen */\n    readonly kitchen: boolean;\n    /** Whether items in the order are in the pantry */\n    readonly pantry: boolean;\n    /** List of items */\n    readonly items: readonly (CateringItem | CateringCategory)[] = [];\n    /** Creation time of the order */\n    readonly created_at: number;\n    /** Charge code associated with the order */\n    readonly charge_code: string;\n    /** Notes associated with the order */\n    readonly notes: string;\n    /** Mapping of properties to their changes */\n    private _changes: HashMap = {};\n    /** Map of local property names to server ones */\n    protected _server_names: HashMap<string> = {};\n    /** Currency code for the location of the order */\n    public symbol: string;\n    /** Whether the is an error with the order */\n    public error: boolean;\n\n    constructor(data: HashMap) {\n        this.id = data.id || `order-${Math.floor(Math.random() * 999_999_999)}`;\n        this.booking = data.booking;\n        this.delivery_time = data.delivery_time || data.start || 0;\n        this.booking_date = data.booking_date;\n        this.location_id = data.location_id || data.location;\n        this.location = data.location || '';\n        this.status = data.status || 'accepted';\n        this.charge_code = data.charge_code || data.code;\n        this.notes = data.notes;\n        this.kitchen = data.kitchen instanceof Array ? !!data.kitchen.length : data.kitchen;\n        this.pantry = data.pantry instanceof Array ? !!data.pantry.length : data.pantry;\n        this.symbol = data.symbol || 'USD';\n        this.items = (data.items || [])\n            .map(item => (item.items ? new CateringCategory(item) : new CateringItem(item)))\n            .filter(item => !!item.amount);\n    }\n\n    /** Mapping of properties to their changes */\n    public get changes(): HashMap<any> {\n        return { ...this._changes } || {};\n    }\n\n    /** Display string for the types of items in the order */\n    public get type(): string {\n        let type = '';\n        /* istanbul ignore else */\n        if (this.kitchen) type += 'Kitchen';\n        /* istanbul ignore else */\n        if (this.pantry) {\n            /* istanbul ignore else */\n            if (type) type += ' + ';\n            type += 'Pantry';\n        }\n        return type;\n    }\n\n    /** Total cost of the order */\n    public get total(): number {\n        return this.items.reduce((total, item) => total + (item.total || 0), 0);\n    }\n\n    /** Total number of items in the order */\n    public get item_count(): number {\n        return this.items.reduce((total, item) => total + (item.amount || 0), 0);\n    }\n\n    /** Display string for the delivery time of the order */\n    public get deliver_at_time(): string {\n        const date = this.booking ? this.booking.date : this.booking_date;\n        return dayjs(date)\n            .add(this.delivery_time, 'm')\n            .format('h:mm A');\n    }\n\n    /** Display string for the delivery date of the order */\n    public get deliver_on_date(): string {\n        const date = this.booking ? this.booking.date : this.booking_date;\n        return dayjs(date)\n            .add(this.delivery_time, 'm')\n            .format('DD MMM YYYY');\n    }\n\n    /** Whether there are any pending changes to be saved */\n    public get has_changes(): boolean {\n        return !!Object.keys(this._changes).length;\n    }\n\n    /**\n     * Store pending changes for the given property\n     * @param name Property to update value\n     * @param value New value to save for property\n     */\n    public storePendingChanges(name: CateringOrderMutableProperties, value: any): void {\n        this._changes[name] = value;\n    }\n\n    /** Clear any changes waiting to be saved */\n    public clearPendingChanges() {\n        delete this._changes;\n        this._changes = {};\n    }\n\n    /**\n     * Convert class object into plain object\n     */\n    public toJSON(this: CateringOrder, with_changes: boolean = true): HashMap {\n        const obj: any = { ...this };\n        // Remove local private members\n        delete obj._changes;\n        delete obj._server_names;\n        // Remove local public members\n        delete obj.booking;\n        delete obj.loading;\n\n        // Convert remaining members to be public\n        const keys = Object.keys(obj);\n        for (const key of keys) {\n            if (key[0] === '_') {\n                const new_key = this._server_names[key.substr(1)] || key.substr(1);\n                obj[new_key] = obj[key];\n                delete obj[key];\n            } else if (obj[key] === undefined) {\n                delete obj[key];\n            }\n        }\n        obj.items = obj.items.map((item: CateringItem) => item.toJSON());\n        return with_changes ? { ...obj, ...this._changes } : obj;\n    }\n}\n","import { HashMap } from 'src/app/shared/utilities/types.utilities';\n\nimport { BuildingLevel } from '../organisation/level.class';\nimport { ServiceLike } from '../base-api.class';\n\nexport class MapLocation {\n    /** ID of the element on the associated map */\n    public readonly id?: string;\n    /** Name of the location */\n    public readonly name?: string;\n    /** X coordinate of the location */\n    public readonly x?: number;\n    /** Y coordinate of the location */\n    public readonly y?: number;\n    /** Level details for the location */\n    public readonly level: BuildingLevel;\n    /** Whether the position is fixed */\n    public readonly fixed: boolean;\n    /** Accuracy of the location when not fixed */\n    public readonly confidence?: number;\n    /** Whether location is at a desk */\n    public readonly at_desk?: boolean;\n    /** Whether location is set */\n    public readonly empty: boolean;\n    /** Map of available services for child classes */\n    private static _service: ServiceLike;\n    /** Set the services used to handle data model requests */\n    public static setService(service: ServiceLike): void {\n        MapLocation._service = service;\n    }\n    /** Service for managing model on the server */\n    protected get _service(): ServiceLike {\n        return MapLocation._service;\n    }\n\n    /** Display string for the building and level of the location */\n    public get display(): string {\n        const bld = this._service.parent.Organisation.buildings.find(bld => bld.id === this.level.building_id);\n        return bld ? `${bld.name}, ${this.level.name}` : this.level.name;\n    }\n\n    /** Whether location is in a different building from the active one */\n    public get in_another_building(): boolean {\n        return this._service.parent.Organisation.building.id !== this.level.building_id;\n    }\n\n    constructor(raw_data: HashMap) {\n        this.id = raw_data.id || raw_data.map_id || raw_data.desk_id;\n        this.name = raw_data.name || '';\n        this.x = raw_data.x\n            ? Math.floor(this.normalise(raw_data.x, raw_data.x_max || 10000) * 10000)\n            : null;\n        this.y = raw_data.y\n            ? Math.floor(this.normalise(raw_data.y, raw_data.x_max || 10000) * 10000)\n            : null;\n        this.level = raw_data.level instanceof BuildingLevel\n            ? raw_data.level\n            : this._service.parent.Organisation.levelWithID(raw_data.level);\n        this.fixed = this.x === null && this.y === null;\n        this.confidence = Math.max(5, Math.min(15, raw_data.confidence || 0));\n        this.at_desk = this.id && this.id.indexOf('area-') === 0;\n        this.empty = !(this.name && this.level && (this.id || this.x || this.y));\n    }\n\n    /** Normalise the given value within the max */\n    private normalise(value: number, max: number): number {\n        return value / (max * 1.0);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\n\nimport { BaseAPIService } from '../base.service';\nimport { MapLocation } from './location.class';\nimport { HashMap } from 'src/app/shared/utilities/types.utilities';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class LocationService extends BaseAPIService {\n    constructor(protected _composer: ComposerService) {\n        super(_composer);\n        MapLocation.setService(this);\n        this._name = 'Location';\n        this._api_route = 'people';\n    }\n\n    public add(...args): never {\n        throw new Error('Create not allowed for location service')\n    }\n\n    public update(...args): never {\n        throw new Error('Update not allowed for location service')\n    }\n\n    public delete(...args): never {\n        throw new Error('Delete not allowed for location service')\n    }\n\n    public process(item: HashMap) {\n        return new MapLocation(item) as any;\n    }\n}\n","import { HashMap } from 'src/app/shared/utilities/types.utilities';\nimport { randomInt } from 'src/app/shared/utilities/general.utilities';\n\nexport function generateMockLocation(overrides: HashMap, fixed_locations: string[], maps: string[]): HashMap {\n    const fixed = randomInt(999_999_999) % 2 === 0;\n    if (fixed && (!overrides || overrides.fixed)) {\n        return {\n            map_id: fixed_locations[randomInt(fixed_locations.length)],\n            level: maps[randomInt(maps.length)],\n            ...overrides\n        }\n    } else {\n        return {\n            x: randomInt(900, 100),\n            x_max: 1000,\n            y: randomInt(500, 100),\n            level: maps[randomInt(maps.length)],\n            confidence: randomInt(30),\n            ...overrides\n        }\n    }\n}\n","import { BaseDataClass } from '../base-api.class';\nimport { HashMap, Identity } from '../../../shared/utilities/types.utilities';\nimport { getItemWithKeys } from '../../../shared/utilities/general.utilities';\nimport { BaseAPIService } from '../base.service';\nimport { Organisation } from './organisation.class';\nimport { BuildingLevel } from './level.class';\nimport { BookingRule } from '../bookings/booking.interfaces';\n\nexport interface IBuildingRoleUser {\n    name: string;\n    email: string;\n    phone: string;\n}\n\nexport interface LockerMap {\n    [zone: string]: {\n        [area: string]: {\n            [type: string]: (string | boolean)[][];\n        };\n    };\n}\n\nexport interface ICoordinates {\n    longitude: number;\n    latitude: number;\n}\n\nexport interface LevelFeature {\n    id: string;\n    level_id: string;\n    name: string;\n}\n\nexport interface BookingRuleDetails {\n    /** List of booking rules details for the building */\n    readonly rules: readonly string[];\n    /** Custom booking rules for the map */\n    readonly map_rules?: readonly string[];\n    /** Contact email address for the building */\n    readonly contact?: string;\n    /** Information string to display before the rule listings */\n    readonly info?: string;\n}\n\nexport class Building extends BaseDataClass {\n    /** Engine Zone ID for the building */\n    public readonly zone_id: string;\n    /** Organisation Code for the building */\n    public readonly code: string;\n    /** Geographical address of the building */\n    public readonly address: string;\n    /** Details about the booking rules for the building */\n    public readonly booking_details: BookingRuleDetails;\n    /** Details about the booking rules for the building */\n    public readonly booking_rules: HashMap<readonly BookingRule[]>;\n    /** Number of hour before a booking catering is restricted */\n    public readonly catering_restricted_from: number;\n    /** Currency code for the country assoicated with the building */\n    public readonly currency: string;\n    /** Map of fields that are required on the form */\n    public readonly required: HashMap<boolean>;\n    /** IANA timezone database string for the location the building resides  */\n    public readonly timezone: string;\n    /** Whether catering is available in this building */\n    public readonly has_catering: boolean;\n    /** ID of the system used for the holding bay */\n    public readonly holding_bay: string;\n    /** ID of the system used for standalone visitors bookings */\n    public readonly visitor_space: string;\n    /** List of available extras for the building */\n    private _extras: Identity[];\n    /** List of available extra equipment for loan at the building */\n    private _loan_items: Identity[];\n    /** List of available levels for the building */\n    private _levels: BuildingLevel[];\n    /** Map of custom settings for the building */\n    private _settings: HashMap;\n    /** Map of roles and list of the associated users */\n    private _roles: HashMap<IBuildingRoleUser[]>;\n    /** Map of the locker ID arrays */\n    private _lockers: LockerMap;\n    /** Map of important system ids for the building */\n    private _systems: HashMap<string>;\n    /** Map of important phone numbers for the building */\n    private _phone_numbers: HashMap<string>;\n    /** Globe coordiates for the build */\n    private _location: ICoordinates;\n    /** List of zones associated with the building */\n    private _zones: string[];\n    /** Searchable map features */\n    private _searchables: LevelFeature[];\n    /** Class type of required service */\n    protected __type: string = 'Building';\n\n    constructor(raw_data: HashMap) {\n        super(raw_data);\n        const settings = raw_data.settings || {};\n        const disc_info = settings.discovery_info || settings;\n        this.zone_id = raw_data.zone_id || raw_data.zone;\n        this._extras = (raw_data.extras || disc_info.extras || []).map(i => ({ id: i.extra_id || i.id, name: i.extra_name || i.name }));\n        this._loan_items = (raw_data.loan_items || disc_info.loan_items  || []).map(i => ({ id: i.extra_id || i.id, name: i.extra_name || i.name }));\n        this._levels = (raw_data.levels || disc_info.levels  || []).map(i => new BuildingLevel({ ...i, building_id: this.id }));\n        this._roles = raw_data.roles || disc_info.roles || {};\n        this._lockers = raw_data.lockers || raw_data.locker_structure || disc_info.locker_structure || {};\n        this._systems = raw_data.systems || disc_info.systems || {};\n        this._settings = settings;\n        this._phone_numbers = raw_data.phone_numbers || disc_info.phone_numbers || {};\n        this._location = raw_data.location || disc_info.location || { longitude: null, latitude: null };\n        this._searchables = [];\n        if (raw_data.neighbourhoods) {\n            for (const lvl in raw_data.neighbourhoods) {\n                if (raw_data.neighbourhoods.hasOwnProperty(lvl)) {\n                    const lvl_features = raw_data.neighbourhoods[lvl] || {};\n                    for (const feature in lvl_features) {\n                        if (lvl_features.hasOwnProperty(feature)) {\n                            this._searchables.push({\n                                id: lvl_features[feature],\n                                name: feature,\n                                level_id: lvl\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        this.code = raw_data.code || disc_info.code || settings.code || '';\n        this.address = raw_data.address || disc_info.address || settings.address || '';\n        this.booking_details = raw_data.booking_details || disc_info.booking_details || settings.booking_details || null;\n        this.booking_rules = raw_data.booking_rules || disc_info.booking_rules || settings.booking_rules || {};\n        this.catering_restricted_from = raw_data.catering_restricted_from || disc_info.catering_restricted_from || settings.catering_restricted_from || 0;\n        this.currency = raw_data.currency || disc_info.currency || settings.currency || 'USD';\n        this.required = raw_data.required || disc_info.required || settings.required || {};\n        this.timezone = raw_data.timezone || disc_info.timezone || settings.timezone || '';\n        this.has_catering = raw_data.has_catering || disc_info.has_catering || settings.has_catering || false;\n        this.holding_bay = raw_data.holding_bay || disc_info.holding_bay || settings.holding_bay || '';\n        this.visitor_space = raw_data.visitor_space || disc_info.visitor_space || settings.visitor_space || '';\n    }\n\n    /** List of available extras for the building */\n    public get extras(): Identity[] {\n        return [...(this._extras || [])];\n    }\n    /** List of available extras for the building */\n    public get loan_items(): Identity[] {\n        return [...(this._loan_items || [])];\n    }\n    /** List of available levels for the building */\n    public get levels(): BuildingLevel[] {\n        return [...(this._levels || [])];\n    }\n    /**\n     * Get a custom building setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string): any {\n        const keys = key.split('.');\n        const value = getItemWithKeys(keys, this._settings);\n        return value;\n    }\n\n    /**\n     * Get list of users with the associated role\n     * @param name Role to find users for\n     */\n    public role(name: string): IBuildingRoleUser[] {\n        return [...(this._roles[name] || [])];\n    }\n    /**\n     * Get list of the names of available user role lists\n     */\n    public get role_names(): string[] {\n        return Object.keys(this._roles).filter(i => this._roles.hasOwnProperty(i));\n    }\n    /** Map of the locker ID arrays */\n    public get lockers(): LockerMap {\n        return { ...(this._lockers || {}) };\n    }\n    /** Map of important system ids for the building */\n    public get systems(): HashMap<string> {\n        return { ...(this._systems || {}) };\n    }\n    /** Map of important phone numbers for the building */\n    public get phone_numbers(): HashMap<string> {\n        return { ...(this._phone_numbers || {}) };\n    }\n    /** Real coordinates */\n    public get location(): ICoordinates {\n        return { ...this._location };\n    }\n    /** List of zones associated with the building */\n    public get zones(): string[] {\n        return [...(this._zones || [])];\n    }\n    /** Searchable map features */\n    public get searchables(): LevelFeature[] {\n        return [...(this._searchables || [])];\n    }\n\n    /**\n     * Get search map feature for the given level ID\n     * @param level_id ID of level to grab features for\n     */\n    public featuresForLevel(level_id: string): LevelFeature[] {\n        return (this._searchables || []).filter(i => i.level_id === level_id);\n    }\n\n    /**\n     * Building objects are readonly and cannot be changed\n     */\n    public async save(): Promise<Building> {\n        throw new Error('Building objects are readonly and cannot be changed');\n    }\n\n    /**\n     * Building objects are readonly and cannot be deleted\n     */\n    public async delete(): Promise<void> {\n        throw new Error('Building objects are readonly and cannot be deleted');\n    }\n}\n","import { HashMap } from 'src/app/shared/utilities/types.utilities';\n\n/** Building Level data */\nexport class BuildingLevel {\n    /** ID of the building level zone */\n    readonly id: string;\n    /** ID of the building zone associated with the level */\n    readonly building_id: string;\n    /** Name of the level */\n    readonly name: string;\n    /** Number or short identifier of the level */\n    readonly short_name: string;\n    /** Map URL for the level */\n    readonly map_url: string;\n    /** Usage type for the level */\n    readonly type: 'staff' | 'client' | 'any';\n    /** Setting for the level */\n    readonly settings: HashMap;\n\n    constructor(_data: any) {\n        this.id = _data.id || _data.level_id || '';\n        this.building_id = _data.bld_id || _data.building_id || '';\n        this.name = _data.name || _data.level_name || '';\n        const lower_name = this.name.toLowerCase();\n        const num = lower_name.indexOf('level') >= 0 ? lower_name.replace(/ ?level ?/gi, '') : lower_name.substr(0, 1).toUpperCase();\n        this.short_name = _data.short_name || num || '';\n        this.map_url = _data.map_url || '';\n        this.type = _data.type || _data.floor_type || 'any';\n        this.settings = _data.settings;\n    }\n}\n","import { BaseDataClass } from '../base-api.class';\nimport { HashMap } from '../../../shared/utilities/types.utilities';\nimport { getItemWithKeys } from '../../../shared/utilities/general.utilities';\nimport { BaseAPIService } from '../base.service';\n\nexport class Organisation extends BaseDataClass {\n    /** Map of custom settings for the building */\n    private _settings: HashMap;\n    /** Class type of required service */\n    protected __type: string = 'Organisation';\n\n    constructor(raw_data: HashMap) {\n        super(raw_data);\n        this._settings = raw_data.settings || {};\n    }\n\n    /**\n     * Get a custom building setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string): any {\n        const keys = key.split('.');\n        const value = getItemWithKeys(keys, this._settings);\n        return value;\n    }\n\n    /**\n     * Building objects are readonly and cannot be changed\n     */\n    public async save(): Promise<Organisation> {\n        throw new Error('Organisation objects are readonly and cannot be changed');\n    }\n\n    /**\n     * Building objects are readonly and cannot be deleted\n     */\n    public async delete(): Promise<void> {\n        throw new Error('Organisation objects are readonly and cannot be deleted');\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { ComposerService } from '@placeos/composer';\n\nimport { BaseAPIService } from '../base.service';\nimport { Organisation } from './organisation.class';\nimport { Building } from './building.class';\nimport { HashMap, ApplicationLoadingState, Identity } from '../../../shared/utilities/types.utilities';\nimport { BuildingLevel } from './level.class';\nimport { User } from '../users/user.class';\nimport { first } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class OrganisationService extends BaseAPIService {\n    /** Organisation data for the application */\n    private _organisation: Organisation;\n    /** Actively displayed building */\n    private _active_building: string;\n\n    constructor(protected _composer: ComposerService) {\n        super(_composer);\n        Organisation.setService('Organisation', this);\n        Building.setService('Building', this);\n        this._name = 'Organisation';\n        this._api_route = 'zones';\n        this.set('buildings', []);\n        this.set('active_building', null);\n    }\n\n    /**\n     * Add is not available on organisation service\n     */\n    public async add(form_data: HashMap, query_params?: HashMap): Promise<Organisation> {\n        throw new Error('Add is not available on the organisation service');\n    }\n\n    /**\n     * Update is not available on organisation service\n     */\n    public async update(\n        id: string,\n        form_data: HashMap,\n        query_params?: HashMap\n    ): Promise<Organisation> {\n        throw new Error('Update is not available on the organisation service');\n    }\n\n    /**\n     * Delete is not available on organisation service\n     */\n    public async delete(id: string): Promise<void> {\n        throw new Error('Delete is not available on the organisation service');\n    }\n\n    /**\n     * Get list of levels for the given building ID\n     * @param bld_id Building ID\n     */\n    public levels(bld_id: string): any[] {\n        return (this.buildings.find(i => i.id === bld_id) || ({} as Building)).levels;\n    }\n\n    /**\n     * Get a setting from the organisation or active building\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public setting(key: string) {\n        return this.building.setting(key) || this._organisation.setting(key);\n    }\n\n    /** Active building */\n    public get building(): Building {\n        return this.buildings.find(i => i.id === this._active_building);\n    }\n\n    /** List of types of spaces */\n    public get space_types(): Identity[] {\n        return this.get('space_types') || [];\n    }\n\n    public set building(bld: Building) {\n        if (bld instanceof Building) {\n            this._active_building = bld.id;\n        } else {\n            this._active_building = bld;\n        }\n        this.set('active_building', this.building);\n    }\n\n    /** List of buildings for the organisation */\n    public get buildings(): Building[] {\n        return this.get<Building[]>('buildings') || [];\n    }\n\n    /**\n     * Get list of available equipment\n     * @param id ID of the building to get the list from. i.e. Defaults to the active building\n     */\n    public getExtras(id: string, bld_id?: string) {\n        const bld = this.buildings.find(i => i.id === bld_id) || this.building;\n        if (bld && id) {\n            return bld.extras.filter(i => `${i.id}`.indexOf(id) >= 0);\n        }\n        return [];\n    }\n\n    /**\n     * Get the first level matching the list of given IDs\n     * @param ids List of ID to search with\n     */\n    public levelWithID(ids: string | string[]): BuildingLevel {\n        const list = ids instanceof Array ? ids : [ids];\n        const bld_list = this.buildings;\n        for (const id of list) {\n            for (const bld of bld_list) {\n                for (const lvl of bld.levels) {\n                    if (lvl.id === id) {\n                        return lvl;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Initialise service data\n     */\n    protected async load(): Promise<void> {\n        /* istanbul ignore else */\n        if (localStorage) {\n            this._active_building = localStorage.getItem(`${this.parent.name}.building`);\n        }\n        const loading: ApplicationLoadingState = this.parent.get('loading') || {};\n        loading.organisation = { message: 'Loading organisation data', state: 'loading' };\n        await this.loadOrganisation();\n        loading.organisation = { message: 'Loading organisation data', state: 'complete' };\n        loading.buildings = { message: 'Loading building data', state: 'loading' };\n        this.parent.set('loading', loading);\n        await this.loadBuildings();\n        loading.buildings = { message: 'Loading building data', state: 'complete' };\n        loading.levels = { message: 'Loading building floor data', state: 'loading' };\n        this.parent.set('loading', loading);\n        await this.loadLevels();\n        loading.levels = { message: 'Loading building floor data', state: 'complete' };\n        this.parent.set('loading', loading);\n        loading.space_types = { message: 'Loading space type data', state: 'loading' };\n        this.parent.set('loading', loading);\n        await this.loadSpaceTypes();\n        loading.space_types = { message: 'Loading space type data', state: 'complete' };\n        this.parent.set('loading', loading);\n        /* istanbul ignore else */\n        if (this.parent && this.parent.Users) {\n            this.parent.Users.listen<User>('current_user')\n                .pipe(first(_ => !!_.location))\n                .subscribe(user => {\n                    const building = this.buildings.find(bld => bld.code === user.location);\n                    if (building) {\n                        this._active_building = building.id;\n                        this.set('active_building', building);\n                    } else {\n                        this._active_building = this.building.id;\n                        this.set('active_building', this.building);\n                    }\n                });\n        }\n    }\n\n    /**\n     * Load organisation data for application\n     */\n    public async loadOrganisation(): Promise<void> {\n        const org_data = await this.query({ tags: 'org', engine: true });\n        this._organisation = new Organisation(org_data[0]);\n        this.set('organisation', this._organisation);\n    }\n\n    /**\n     * Load building data for the organisation\n     */\n    public async loadBuildings(): Promise<void> {\n        const bld_data = await this.query({ tags: 'building', engine: true, limit: 500 });\n        const buildings = (bld_data as HashMap[]).map(\n            i => new Building(i)\n        );\n        this.set('buildings', buildings);\n        /* istanbul ignore else */\n        if (!this._active_building && buildings && buildings.length > 0) {\n            this._active_building = buildings[0].id;\n        }\n    }\n\n    /**\n     * Load level data for the buildings\n     */\n    public async loadLevels(): Promise<void> {\n        const lvl_data = await this.query({ tags: 'level', engine: true })\n        const levels = (lvl_data as HashMap[]).map(i => new BuildingLevel(i));\n        this.set('levels', levels);\n    }\n\n    /**\n     * Load space type data for the buildings\n     */\n    public async loadSpaceTypes(): Promise<void> {\n        const type_data = await this.query({ tags: 'room', engine: true });\n        const types = (type_data as HashMap[]).map(i => ({ id: i.id, name: i.name }));\n        this.set('space_types', types);\n    }\n}\n","import { CurrencyPipe } from '@angular/common';\n\nimport { HashMap } from 'src/app/shared/utilities/types.utilities';\nimport { ReportsService } from './reports.service';\nimport { csvToJson, downloadFile, jsonToCsv } from 'src/app/shared/utilities/general.utilities';\nimport { Booking } from '../bookings/booking.class';\nimport { ServiceLike } from '../base-api.class';\n\nimport * as dayjs from 'dayjs';\n\nexport type BookingReport = Report<Booking>;\n\nexport class Report<T extends {} = HashMap> {\n    /** Type of report */\n    public readonly type: string;\n    /** List of data associated with the report */\n    public readonly data: T[];\n    /** Map of available services for child classes */\n    private static _service: ServiceLike;\n    /** Set the services used to handle data model requests */\n    public static setService(service: ServiceLike): void {\n        Report._service = service;\n    }\n    /** Service for managing model on the server */\n    protected get _service(): ServiceLike {\n        return Report._service;\n    }\n\n    constructor(raw_data: HashMap) {\n        this.type = raw_data.type || '';\n        this.data = this.cleanData(raw_data.data || []);\n    }\n\n    /** Create report data structure from CSV */\n    public static fromCSV(type: string, data: string): Report {\n        const csv_json = csvToJson(data);\n        return new Report({ type, data: csv_json });\n    }\n\n    /** Download report data as CSV format */\n    public downloadCSV(name: string = 'unammed.csv'): void {\n        downloadFile(name, jsonToCsv(this.data));\n    }\n\n    /** Download report data as JSON format */\n    public downloadJSON(name: string = 'unnamed.json'): void {\n        downloadFile(name, JSON.stringify(this.data, undefined, 4));\n    }\n\n    private cleanData(data: T[]) {\n        if (data.length > 0 && this.type === 'catering') {\n            const fields = Object.keys(data[0]);\n            const room_field = fields.find(key => key.toLowerCase().includes('room') && key.toLowerCase().includes('email'));\n            const price_field = fields.find(key => key.toLowerCase().includes('price'));\n            const date_field = fields.find(key => key.toLowerCase().includes('date'));\n            for (let row of data){\n                /* istanbul ignore else */\n                if (room_field && price_field) {\n                    const room = this._service.parent.Spaces.find(row[room_field].toLowerCase());\n                    const bld = this._service.parent.Organisation.buildings.find(bld => bld.id === ((room || {}).level || {}).building_id);\n                    /* istanbul ignore else */\n                    if (bld) {\n                        row[price_field] = (new CurrencyPipe('en_us')).transform(row[price_field] / 100, bld.currency || 'USD');\n                    }\n                }\n                /* istanbul ignore else */\n                if (date_field) {\n                    row[date_field] = dayjs(row[date_field]).format('DD MMM YYYY - HH:mm');\n                }\n                for (let field of fields) {\n                    row[field] = typeof row[field] === 'string' ? row[field].replace(/\\,/g, '٫') : row[field];\n                }\n            }\n        } else if (this.type === 'bookings') {\n           data = data.map(i => {\n               const booking = new Booking(i).toJSON();\n               delete booking.id;\n               delete booking.icaluid;\n               delete booking.type;\n               delete booking.auto_approve;\n               delete booking.notify_users;\n               delete booking.organiser_email;\n               delete booking.edits;\n               delete booking.catering;\n               delete booking.checked_in;\n               delete booking.approval_status;\n               booking.organiser = booking.organiser.name || booking.organiser.email;\n               booking.equipment_codes = Object.keys(booking.equipment_codes).map(key => booking.equipment_codes[key]).join(', ');\n               booking.expected_attendees = Object.keys(booking.expected_attendees).map(key => booking.expected_attendees[key]).join(', ');\n               booking.attendees = booking.attendees.map(person => person.name || person.email).join(', ');\n\n               return booking;\n            }) as any;\n        }\n        return data;\n    }\n}\n","import { Injectable } from '@angular/core';\n\nimport { ComposerService } from '@placeos/composer';\n\nimport { BaseAPIService } from '../base.service';\nimport { Report } from './report.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ReportsService extends BaseAPIService<Report> {\n    constructor(protected _composer: ComposerService) {\n        super(_composer);\n        Report.setService(this as any);\n        this._name = 'Reports';\n        this._api_route = '/reports';\n    }\n\n    protected process(raw_data: any): Report {\n        return raw_data instanceof Array\n            ? new Report({ data: raw_data })\n            : Report.fromCSV('', raw_data);\n    }\n}\n","import { BaseDataClass } from '../base-api.class';\nimport { HashMap, Identity } from '../../../shared/utilities/types.utilities';\nimport { Booking } from '../bookings/booking.class';\nimport { BaseAPIService } from '../base.service';\nimport { BuildingLevel } from '../organisation/level.class';\nimport { SpaceRules } from '../bookings/booking.interfaces';\nimport { rulesForSpace } from '../bookings/booking.utilities';\nimport { User } from '../users/user.class';\n\nimport * as dayjs from 'dayjs';\n\nexport interface ISpaceAvailabilityOptions {\n    /** Start date and time of the availability block */\n    date?: number;\n    /** Length of the availability block */\n    duration: number;\n    /**  */\n    id?: string;\n    /** List of spaces to look at the availability for */\n    room_ids?: string;\n    /** Whether the spaces looked at should be bookable */\n    bookable?: boolean;\n    /** List of spaces or zones to ignore */\n    ignore?: string;\n    /** List of zones to look at the availability for */\n    zone_ids?: string;\n    /** Whether space bookings should not be returned */\n    hide_bookings?: boolean;\n\n    clear?: boolean;\n}\n\nexport interface SpaceBookingRuleOptions {\n    date: number;\n    duration: number;\n    host: User;\n}\n\nconst OPTION_DEFAULTS: ISpaceAvailabilityOptions = {\n    duration: 60\n};\n\nexport interface RecurrenceAvailability {\n    /** Unix epoch in seconds */\n    readonly date: number;\n    /** Whetehr space is available at this time */\n    readonly available: boolean;\n}\n\nexport class Space extends BaseDataClass {\n    /** Extends name for the space */\n    public readonly long_name: string;\n    /** CSS selector for the location of the space of the level's map */\n    public readonly map_id: string;\n    /** Type of space */\n    public readonly type: string;\n    /** Whether user can search for this space */\n    public readonly can_search: boolean;\n    /** Whether user can open the control URL if available */\n    public readonly can_control: boolean;\n    /** Hourly cost for using the space */\n    public readonly hourly_rate: number;\n    /** Whether space can be booked by users */\n    public readonly bookable: boolean;\n    /** People capacity of the space */\n    public readonly capacity: number;\n    /** Index to force order when sorting multiple spaces */\n    public readonly sort_priority: number;\n    /** Setup time for bookings in this space */\n    public readonly setup: number;\n    /** Breakdown time for bookings in this space */\n    public readonly breakdown: number;\n    /** Last returned availability result */\n    public readonly was_available: boolean;\n    /** URL for the control interface of the space */\n    public readonly support_url: boolean;\n    /** Display image for the space */\n    public readonly image: string;\n    /** List of recurrence occurrence availability details */\n    public readonly recurr_available: readonly RecurrenceAvailability[];\n    /** Engine zones associated with the space */\n    public readonly zones: readonly string[];\n\n    /** Class type of required service */\n    protected __type: string = 'Space';\n    /** Bookings associated with the space */\n    private _bookings: string[];\n    /** List of equipment available in the space */\n    private _extras: Identity[];\n    /** List of ids for linked spaces */\n    private _linked_spaces: string[];\n\n    constructor(raw_data: HashMap = {}) {\n        super(raw_data);\n        const settings = raw_data.settings || {};\n\n        this.long_name = settings.long_name || raw_data.long_name;\n        this.map_id = settings.map_id || raw_data.map_id || '';\n        this.type =\n            settings.book_type ||\n            (this.level.settings || {}).book_type ||\n            raw_data.book_type ||\n            raw_data.type ||\n            'book';\n        this.can_search =\n            settings.searchable || raw_data.searchable || raw_data.can_search || false;\n        this.can_control =\n            settings.controlable || raw_data.controlable || raw_data.can_control || false;\n        this.hourly_rate = settings.cost_hour || raw_data.cost_hour || raw_data.hourly_rate || 0;\n        this.bookable = settings.bookable || raw_data.bookable || false;\n        this.setup = (settings.setup || 0) / 60 || raw_data.setup || 0;\n        this.breakdown = (settings.breakdown || 0) / 60 || raw_data.breakdown || 0;\n        this.capacity = raw_data.capacity || 0;\n        this.recurr_available = raw_data.recurr_available || settings.recurr_available || [];\n        const available = !!this.recurr_available.find(occurence => !!occurence.available);\n        this.was_available =\n            settings.available || raw_data.available || raw_data.was_available || available || false;\n        this.support_url = raw_data.support_url;\n        this.image = raw_data.image || '';\n\n        this.zones = raw_data.zones instanceof Array ? raw_data.zones : [];\n        const raw_bookings = settings.bookings || raw_data.bookings || [];\n        this._bookings =\n            (raw_bookings && raw_bookings.length\n                ? raw_bookings.map(i => i.id)\n                : raw_data._bookings) || [];\n        if (this._service.parent && this._service.parent.Bookings) {\n            if (raw_bookings) {\n                const id_list = [];\n                raw_bookings.forEach(booking => {\n                    let id = booking.id;\n                    if (!this._service.parent.Bookings.find(booking.id)) {\n                        id = this._service.parent.Bookings.addFrom(this.id, booking, 'class');\n                    }\n                    id_list.push(id);\n                });\n                this._bookings = id_list;\n            }\n        }\n        this._extras = [];\n        this._linked_spaces =\n            settings.linked_rooms || raw_data.linked_rooms || raw_data.linked_spaces || [];\n    }\n\n    /** Whether the space has a booking in progress */\n    public get in_use(): boolean {\n        return !!this.current;\n    }\n\n    /** Get any current in progress meeting */\n    public get current(): Booking {\n        const bookings = this.bookings;\n        for (const bkn of bookings) {\n            const status = bkn.status;\n            if (status === 'in_progress' || status === 'started') {\n                return bkn;\n            }\n        }\n        return null;\n    }\n\n    /** Get the next upcoming meeting */\n    public get next(): Booking {\n        const now = dayjs().valueOf();\n        const bookings = this.bookings;\n        for (const bkn of bookings) {\n            if (bkn.date > now) {\n                return bkn;\n            }\n        }\n        return null;\n    }\n\n    /** List of stored bookings for the space */\n    public get bookings(): Booking[] {\n        const booking_list =\n            this._service && this._service.parent && this._service.parent.Bookings\n                ? this._service.parent.Bookings.filter(\n                      booking => this._bookings.indexOf(booking.id) >= 0\n                  ) || []\n                : [];\n        return booking_list.sort((a, b) => a.date - b.date);\n    }\n\n    /** List of bookings for today */\n    public get todays_bookings(): Booking[] {\n        return this.bookingsFor(dayjs().valueOf());\n    }\n\n    /** List of ids for linked spaces */\n    public get linked_spaces() {\n        return [...this._linked_spaces];\n    }\n\n    /** Level in which the space is associated */\n    public get level(): BuildingLevel {\n        return this._service.parent.Organisation.levelWithID(this.zones as any) || new BuildingLevel({});\n    }\n\n    /**\n     * Get bookings for space\n     * @param date Date to filter bookings on\n     */\n    public bookingsFor(date?: number): Booking[] {\n        if (date) {\n            const day = dayjs(date);\n            return this.bookings.filter(i => {\n                const start = dayjs(i.date);\n                return start.isSame(day, 'd');\n            });\n        } else {\n            return this.bookings;\n        }\n    }\n\n    /**\n     * Whether the space is available.\n     */\n    public isAvailable(options?: ISpaceAvailabilityOptions): Promise<boolean> {\n        options = options\n            ? { ...OPTION_DEFAULTS, ...options, room_ids: this.id }\n            : { ...OPTION_DEFAULTS, room_ids: this.id };\n        return new Promise(resolve => {\n            (this._service as any).available(options).then(\n                (list: Space[]) => {\n                    for (const rm of list) {\n                        if (rm.id === this.id) {\n                            return resolve(true);\n                        }\n                    }\n                    resolve(false);\n                },\n                () => resolve(false)\n            );\n        });\n    }\n\n    /**\n     * Make a copy of this object\n     */\n    public clone(): Space {\n        return new Space(this);\n    }\n\n    /**\n     * Make a copy of this object without identification data\n     */\n    public duplicate(): Space {\n        return new Space({ ...this, id: null, email: null, _bookings: [] });\n    }\n\n    /**\n     * Generate the booking rules for space with given options\n     * @param options Conditions for generating the space rules\n     */\n    public rulesFor(options: SpaceBookingRuleOptions): SpaceRules {\n        if (!this.level) {\n            return { auto_approve: true, hide: false };\n        }\n        const building = this._service.parent.Organisation.buildings.find(\n            bld => bld.id === this.level.building_id\n        );\n        if (!building) {\n            return { auto_approve: true, hide: false };\n        }\n        const { date, duration, host } = options;\n        const rules: SpaceRules = rulesForSpace({\n            time: date,\n            duration,\n            space: this,\n            user: host,\n            rules: building.booking_rules\n        });\n        return rules;\n    }\n\n    /**\n     * Whether space can only be booked by request\n     * @param options Conditions for checking the space rules\n     */\n    public byRequest(options: SpaceBookingRuleOptions) {\n        const rules = this.rulesFor(options);\n        return !rules.auto_approve;\n    }\n}\n","import { HashMap } from '../../../shared/utilities/types.utilities';\nimport { generateMockBooking } from '../bookings/booking.utilities';\nimport { USER_DOMAIN } from '../users/user.utilities';\nimport { ISpaceAvailabilityOptions } from './space.class';\n\nimport * as faker from 'faker';\nimport * as dayjs from 'dayjs';\n\nlet SPACE_COUNT: number = 0;\n\nexport function generateMockSpace(overrides: HashMap = {}): HashMap {\n    const id = `space-${SPACE_COUNT++}`;\n    const name = `${faker.name.firstName()} ${faker.name.lastName()} Space`;\n    const linked = Math.floor(Math.random() * 99999) % 2 === 0 && SPACE_COUNT > 1;\n    return {\n        id,\n        name,\n        long_name: `${name} with an long name`,\n        map_id: `${SPACE_COUNT}`,\n        capacity: Math.floor(Math.random() * 20 + 1) * 2,\n        email: `${name.toLowerCase().split(' ').join('.')}@${USER_DOMAIN}`,\n        type: faker.commerce.productName(),\n        searchable: Math.floor(Math.random() * 99999) % 2 === 0,\n        controlable: Math.floor(Math.random() * 99999) % 2 === 0,\n        bookable: Math.floor(Math.random() * 99999) % 2 === 0,\n        cost_hour: Math.floor(Math.random() * 300) * 100,\n        setup: Math.floor(Math.random() * 6) * 5,\n        breakdown: Math.floor(Math.random() * 6) * 5,\n        zones: ['zone_lvl-0'],\n        support_url: `/control/#/${id}`,\n        bookings: Array(10).fill(0).map(i => generateMockBooking()),\n        linked_rooms: linked ? [`space-${Math.floor(Math.random() * (SPACE_COUNT - 1))}`] : [],\n        image: faker.image.business(),\n        ...overrides\n    };\n}\n\nexport function availabilityOptionsToQuery(options: ISpaceAvailabilityOptions): HashMap {\n    let query: HashMap = {};\n    if (options) {\n        query = { ...options };\n        if (options.date) {\n            const date = dayjs(options.date).startOf('m');\n            query.available_from = date.unix();\n            query.available_to = date.add(options.duration || 60, 'm').unix();\n            delete query.date;\n            delete query.duration;\n        }\n    }\n    return query;\n}\n","import { Injectable } from '@angular/core';\nimport { ComposerService } from '@placeos/composer';\n\nimport { BaseAPIService } from '../base.service';\nimport { Space, ISpaceAvailabilityOptions } from './space.class';\nimport { HashMap, ApplicationLoadingState } from '../../../shared/utilities/types.utilities';\n\nimport * as dayjs from 'dayjs';\nimport { availabilityOptionsToQuery } from './space.utilities';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SpacesService extends BaseAPIService<Space> {\n    constructor(protected _composer: ComposerService) {\n        super(_composer);\n        Space.setService('Space', this);\n        this._name = 'Space';\n        this._api_route = 'rooms';\n        this._compare = (a, b) => !a.id.localeCompare(b.id) || !a.email.localeCompare(b.email);\n        this._list_filter = (a: Space) => {\n            const bld = this.parent.Organisation.building;\n            return a.level.building_id === bld.id;\n        };\n    }\n\n    /**\n     * Get available spaces\n     * @param options\n     */\n    public available(options: ISpaceAvailabilityOptions): Promise<Space[]> {\n        if (!options) {\n            throw new Error('Space avilability requires request options');\n        }\n        if (!options.date) {\n            options.date = dayjs()\n                .startOf('m')\n                .valueOf();\n        }\n        const key = `available|${options.id ? options.id : ''}`;\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise((resolve, reject) => {\n                const respond = (list: Space[]) => {\n                    const available_spaces = list.filter(i => {\n                        const linked = list.filter(j => i.linked_spaces.indexOf(j.id) >= 0);\n                        return (\n                            i.was_available && linked.reduce((a, v) => a && v.was_available, true)\n                        );\n                    });\n                    delete this._promises[key];\n                    resolve(available_spaces);\n                };\n                const error = e => {\n                    reject(e);\n                    delete this._promises[key];\n                };\n                const query = availabilityOptionsToQuery(options);\n                if (options.id) {\n                    this.show(options.id, query).then(i => respond([i]), error);\n                } else {\n                    this.query(query).then(respond, error);\n                }\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Load initial data for the service\n     */\n    protected async load(): Promise<void> {\n        const loading: ApplicationLoadingState = this.parent.get('loading') || {};\n        if (!loading.spaces) {\n            loading.spaces = { message: 'Loading space data', state: 'loading' };\n            this.parent.set('loading', loading);\n        }\n        await this.query().catch(() => {\n            loading.spaces = { message: 'Loading space data', state: 'failed' };\n            this.parent.set('loading', loading);\n        });\n        loading.spaces = { message: 'Loading space data', state: 'complete' };\n        this.parent.set('loading', loading);\n    }\n\n    /**\n     * Convert raw data into API object\n     * @param raw_data Raw API data\n     */\n    protected process(raw_data: HashMap): Space {\n        return new Space(raw_data);\n    }\n}\n","import { BaseDataClass } from '../base-api.class';\nimport { HashMap, Identity } from '../../../shared/utilities/types.utilities';\nimport { BaseAPIService } from '../base.service';\nimport { MapLocation } from '../location/location.class';\n\nexport class User extends BaseDataClass {\n    /** First name of the user */\n    public readonly first_name: string;\n    /** Last name of the user */\n    public readonly last_name: string;\n    /** Windows user ID */\n    public readonly windows_id: string;\n    /** Type of user */\n    public readonly type: 'partner' | 'external' | 'internal';\n    /** Contact phone number of the user */\n    public readonly phone: string;\n    /** Organisational department the user is part of */\n    public readonly business_unit: string;\n    /** Whether user is external from the application's organisation */\n    public readonly external: boolean;\n    /** Organisational Identifier for the user */\n    public readonly staff_code: string;\n    /** Basic location descriptor for the user */\n    public readonly location: string;\n    /** List of users that this user can act on behalf */\n    public readonly delegates: readonly string[];\n    /** URL of the user's avatar image */\n    public readonly image: string;\n    /** List of user groups associated with this user */\n    public readonly groups: readonly string[];\n    /** Class type of required service */\n    protected __type: string = 'User';\n    /** Organisation the user is associated with */\n    private _organisation: Identity;\n\n    /** Map location of the user */\n    private _location: MapLocation;\n    /** List of desk bookings */\n    private _desk_bookings: HashMap = {};\n\n    constructor(raw_data: HashMap = {}) {\n        super(raw_data);\n        this.first_name = raw_data.first_name || '';\n        this.last_name = raw_data.last_name || '';\n        this.windows_id = raw_data.email || '';\n        this.type = raw_data.visitor ? 'external' : raw_data.type || 'internal';\n        this.phone = raw_data.phone || raw_data.mobile || '';\n        this.business_unit = raw_data.business_unit || raw_data.department || '';\n        this._organisation = raw_data.organisation || {\n            id: raw_data.organisation_id,\n            name: raw_data.organisation_name\n        };\n        this.external = this.type === 'external';\n        this._location = null;\n        this.image = raw_data.image || '';\n        this.staff_code = raw_data.staff_code || raw_data.fmno || '';\n        this.delegates = raw_data.delegates || [];\n        if (this._service && this._service.parent){\n            this._location = this._service.parent.Locations.process(\n                raw_data.location && raw_data.location instanceof Object\n                    ? raw_data.location\n                    : { name: raw_data.location }\n            );\n        }\n        this.groups = raw_data.groups || [];\n        this.location = raw_data.location || raw_data.officeLocation || '';\n    }\n\n    /** Organisation the user is associated with */\n    public get organisation() {\n        return this._organisation;\n    }\n\n    /** Map location of the user */\n    public get last_location(): MapLocation {\n        return new MapLocation(this._location || {})\n    }\n\n    /**\n     * Ask the server for the users current location\n     */\n    public locate(): Promise<MapLocation> {\n        const service: any = this._service.parent || {};\n        return new Promise((resolve, reject) => {\n            if (service.Locations) {\n                service.Locations.show(this.id, { desk: this.email }).then(\n                    l => {\n                        this._location = l;\n                        resolve(l);\n                    },\n                    e => reject(e)\n                );\n            } else {\n                resolve(null);\n            }\n        });\n    }\n\n    /**\n     * Whether user is available during the given period\n     * @param start Start time as a unix timestamp with milliseconds\n     * @param end End time as a unix timestamp with milliseconds\n     */\n    public available(start?: number, end?: number): Promise<boolean> {\n        return new Promise<boolean>(resolve => {\n            this._service.query({ email: this.email, start, end }).then(\n                l => resolve(l && l.length > 0),\n                _ => resolve(false)\n            );\n        });\n    }\n\n    /**\n     * Make a copy of this object\n     */\n    public clone(): User {\n        return new User(this);\n    }\n\n    /**\n     * Make a copy of this object without identification data\n     */\n    public duplicate(): User {\n        return new User({ ...this, id: null, email: null });\n    }\n\n    /**\n     * Convert object into plain object\n     */\n    public toJSON(this: User, with_changes: boolean = true): HashMap {\n        const data = super.toJSON(with_changes);\n        delete data.location;\n        return data;\n    }\n}\n","import { HashMap } from '../../../shared/utilities/types.utilities';\n\nimport * as faker from 'faker';\nimport { padZero, unique } from '../../../shared/utilities/general.utilities';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { User } from './user.class';\nimport { Subscription } from 'rxjs';\n\nlet USER_COUNT = 0;\n\nexport let USER_DOMAIN = 'acaprojects.com';\n\nconst USER_EMAILS: string[] = [];\n\n/**\n * Generate raw mock data for a user\n * @param id Forced ID for the mock\n * @param name Forced name for the user\n * @param external Whether user is external of the organisation\n */\nexport function generateMockUser(override: HashMap = {}): HashMap {\n    const id = `user-${USER_COUNT++}`;\n    const name = `${faker.name.firstName()} ${faker.name.lastName()}`;\n    const external = override.external || !((Math.random() * 99999) % 2);\n    const organisation = external ? faker.company.companyName() : USER_DOMAIN.split('.')[0];\n    let delegates: string[] = [];\n    const delegate_count = Math.min(Math.random() * 4 + 1, USER_EMAILS.length);\n    for (let i = 0; i < delegate_count; i++) {\n        delegates.push(USER_EMAILS[Math.floor(Math.random() * USER_EMAILS.length)]);\n    }\n    delegates = unique(delegates);\n    const email = `${name\n        .split(' ')\n        .join('.')\n        .toLowerCase()}@${external ? 'not-' : ''}${USER_DOMAIN}`;\n    USER_EMAILS.push(email);\n    return {\n        id,\n        name,\n        first_name: name.split(' ')[0],\n        last_name: name.split(' ')[1],\n        email,\n        phone: faker.phone.phoneNumber(),\n        visitor: external,\n        organisation: {\n            id: organisation\n                .split(' ')\n                .join('.')\n                .toLowerCase(),\n            name: organisation\n        },\n        department: faker.commerce.department(),\n        staff_code: padZero(Math.floor(Math.random() * 99999), 5),\n        delegates,\n        image: faker.image.avatar(),\n        ...override\n    };\n}\n\n/**\n * Generate form fields for the given user\n * @param user User to generate form for\n */\nexport function generateUserForm(user: User): FormGroup {\n    if (!user) {\n        throw Error('No user passed');\n    }\n    const fields: HashMap<FormControl> = {\n        id: new FormControl(user.id || ''),\n        name: new FormControl(user.name || ''),\n        first_name: new FormControl(user.first_name || ''),\n        last_name: new FormControl(user.last_name || ''),\n        email: new FormControl(user.email || '', [Validators.email, Validators.required])\n    };\n    // Generate form group for booking item\n    const form = new FormGroup(fields);\n    // Listen for changes on the fields and update booking\n    if (form) {\n        const subs: HashMap<Subscription> = {};\n        Object.keys(form.controls).forEach((key: any) => {\n            subs[`change_${key}`] = form.controls[key].valueChanges.subscribe(value =>\n                user.storePendingChange(key, value)\n            );\n        });\n        subs.user = user.changeEvents.subscribe(event => {\n            if (event.type === 'item_saved') {\n                for (const key in subs) {\n                    if (subs[key] instanceof Subscription) {\n                        subs[key].unsubscribe();\n                    }\n                }\n            }\n        });\n    }\n    return form;\n}\n","import { Injectable } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ComposerService } from '@placeos/composer';\n\nimport { Md5 } from 'ts-md5/dist/md5';\n\nimport { BaseAPIService } from '../base.service';\nimport { User } from './user.class';\nimport { HashMap, ApplicationLoadingState } from '../../../shared/utilities/types.utilities';\n\nimport * as dayjs from 'dayjs';\nimport { unique } from 'src/app/shared/utilities/general.utilities';\nimport { BaseDataClass } from '../base-api.class';\n\nexport interface ILoginOptions {\n    /** URL to post login request to */\n    url?: string;\n    /** Whether form data is passed in the body of the request */\n    form?: boolean;\n    /** Custom headers to pass into the post request */\n    headers?: HashMap<string>;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UsersService extends BaseAPIService<User> {\n\n    constructor(protected _composer: ComposerService, protected uhttp: HttpClient, protected location: Location) {\n        super(_composer);\n        User.setService('User', this);\n        this._name = 'Users';\n        this._api_route = 'users';\n        this._compare = (a, b) => !a.id.localeCompare(b.id) || !a.email.localeCompare(b.email);\n        this.set('current_user', new User({ id: 'local_user', name: 'Local User' }));\n    }\n\n    /** Currently logged in user */\n    public get current(): User {\n        return this.get('current_user');\n    }\n\n    /** Whether the user has properly logged in */\n    public get is_logged_in(): boolean {\n        return this.current && this.current.id !== 'local_user';\n    }\n\n    /**\n     * Sets the access token and expiry for the user\n     * @param token OAuth bearer token\n     * @param expiry Expiry epoch timestamp in ms\n     * @param reload Whether to reload the page after setting tokens\n     */\n    public setToken(token: string, expiry?: number, reload: boolean = true) {\n        if (!expiry) {\n            expiry = dayjs()\n                .add(7, 'd').endOf('d')\n                .valueOf();\n        }\n        const path = `${location.origin}${this.parent.setting('composer.route') || ''}/oauth-resp.html`;\n        const client_id = Md5.hashStr(path);\n        if (sessionStorage) {\n            sessionStorage.setItem(`${client_id}_access_token`, token);\n            sessionStorage.setItem(`${client_id}_expires_at`, `${expiry}`);\n        }\n        if (localStorage) {\n            localStorage.setItem(`${client_id}_access_token`, token);\n            localStorage.setItem(`${client_id}_expires_at`, `${expiry}`);\n        }\n        if (reload) {\n            this.location.go(this.location.path());\n        }\n        return path;\n    }\n\n    /**\n     * Post login request to the API\n     * @param query_params Key value pairs to pass into\n     * @param options Options for the login request\n     */\n    public login(query_params: HashMap, options: ILoginOptions = {}): Promise<void> {\n        if (!this._promises['login']) {\n            this._promises['login'] = new Promise<void>((resolve, reject) => {\n                this.set('status', 'loading');\n                let headers = new HttpHeaders();\n                if (!options || options.form !== false) {\n                    headers = headers.append('Content-Type', 'application/x-www-form-urlencoded');\n                }\n                const url = (options ? options.url : '') || '/auth/signin';\n                this.uhttp.post(url, query_params, { headers }).subscribe(\n                    _ => null,\n                    e => reject(e),\n                    () => {\n                        this._composer.auth.authorise();\n                        resolve();\n                    }\n                );\n            });\n        }\n        return this._promises['login'];\n    }\n\n    /**\n     * Logout of user and redirect to logout URL\n     */\n    public logout() {\n        this._composer.auth.logout();\n    }\n\n    /**\n     * Load initial data for the service\n     */\n    protected load(tries: number = 0): Promise<void> {\n        const loading: ApplicationLoadingState = this.parent.get('loading') || {};\n        if (!loading.user) {\n            loading.user = { message: 'Loading user credentials', state: 'loading' };\n            this.parent.set('loading', loading);\n        }\n        this.set('status', 'loading');\n        return new Promise<void>(resolve => {\n            if (tries > 4) {\n                this.set('status', 'invalid');\n                loading.user = { message: 'Loading user credentials', state: 'failed' };\n                this.parent.set('loading', loading);\n                return resolve();\n            }\n            this.show('current').then(\n                current_user => {\n                    this.set('status', 'available');\n                    this.set('current_user', current_user);\n                    if (this.parent && this.parent.setting('app.user.grab_api_details')) {\n                        this.show(current_user.email).then(\n                            user => {\n                                this.set('current_user', user);\n                                if (this.parent.setting('app.user.update_location')) {\n                                    this.interval('location', () => user.locate(), 5000);\n                                }\n                                this.loadDelegates();\n                                resolve();\n                                loading.user = { message: 'Loading user credentials', state: 'complete' };\n                                this.parent.set('loading', loading);\n                            },\n                            () => this.timeout('load', () => this.load(++tries).then(() => resolve()))\n                        );\n                    } else {\n                        if (this.parent.setting('app.user.update_location')) {\n                            this.interval('location', () => current_user.locate(), 5000);\n                        }\n                        this.loadDelegates();\n                        resolve();\n                        loading.user = { message: 'Loading user credentials', state: 'complete' };\n                        this.parent.set('loading', loading);\n                    }\n                },\n                () => this.timeout('load', () => this.load(++tries).then(() => resolve()))\n            );\n        });\n    }\n\n    private async loadDelegates() {\n        const delegates = this.current.delegates;\n        if (!delegates || !delegates.length) {\n            return [];\n        }\n        const promises: Promise<User>[] = [];\n        for (const email of delegates) {\n            promises.push(this.show(email));\n        }\n        const list = await Promise.all(promises);\n        this.set('delegates', list);\n        this.set('list', unique((this.get('list') || []).concat(list)));\n        return list;\n    }\n\n    /**\n     * Convert raw API data into a valid User Object\n     * @param raw_item Raw API data\n     */\n    protected process(raw_data: any): User {\n        return new User(raw_data);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\n\nimport { HashMap } from '../shared/utilities/types.utilities';\nimport { unique } from '../shared/utilities/general.utilities';\n\n/** List of keys that cannot be in a combination by themselves or with each other */\nconst INVALID_STANDALONE_KEYS: string[] = ['control', 'shift', 'alt', 'meta', 'os'];\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HotkeysService {\n    /** Map of subjects which store press states of keys */\n    private keydown_states: HashMap<BehaviorSubject<number>> = {};\n    /** Map of obserers for key state subjects */\n    private keydown_observers: HashMap<Observable<number>> = {};\n    /** List of keys at the end of a combination */\n    private combo_end: string[] = [];\n    /** List of registered hotkey combinations */\n    private registered_combos: string[][] = [];\n    /** Counter for the number of keydown events. Used for checking order of key presses */\n    private counter: number = 0;\n    /** Last key code to be pressed */\n    private last_down: string;\n\n    constructor() {\n        window.addEventListener('keydown', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            /* istanbul ignore else */\n            if (this.last_down !== code) {\n                /* istanbul ignore else */\n                if (!this.keydown_states[code]) {\n                    this.keydown_states[code] = new BehaviorSubject(null);\n                    this.keydown_observers[code] = this.keydown_states[code].asObservable();\n                }\n                this.keydown_states[code].next(++this.counter);\n                /* istanbul ignore else */\n                if (this.combo_end.indexOf(code) >= 0) {\n                    event.preventDefault();\n                }\n                this.last_down = code;\n            }\n        });\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => {\n            const code = this.mapKey((event.code || '').toLowerCase());\n            /* istanbul ignore else */\n            if (this.keydown_states[code]) {\n                this.keydown_states[code].next(null);\n            }\n            /* istanbul ignore else */\n            if (this.last_down === code) {\n                this.last_down = null;\n            }\n        });\n    }\n\n    /**\n     * Listen to the given key combination\n     * @param combo Array of key codes to listen to or a hotkey string e.g. `Alt+Shift+KeyK`\n     * @param next Callback for combination presses\n     */\n    public listen(combo: string | string[], next: () => void): Subscription {\n        combo = (combo instanceof Array ? combo : combo.split('+'));\n        const combination: string[] = combo.map(i => this.mapKey(i.toLowerCase()));\n        /* istanbul ignore else */\n        if (combination.length > 0 && this.validCombination(combination)) {\n            this.registered_combos.push(combination);\n            const last_key = combination[combination.length - 1];\n            /* istanbul ignore else */\n            if (!this.keydown_states[last_key]) {\n                this.keydown_states[last_key] = new BehaviorSubject(null);\n                this.keydown_observers[last_key] = this.keydown_states[last_key].asObservable();\n            }\n            this.updateCombinationEndList();\n            return this.keydown_observers[last_key].subscribe((count) => {\n                /* istanbul ignore else */\n                if (count) {\n                    const presses: number[] = [];\n                    /* istanbul ignore else */\n                    if (combination.length > 0) {\n                        // Check that keys are pressed\n                        for (const key of combination) {\n                            const state = this.keydown_states[key];\n                            presses.push(state ? state.getValue() || -1 : -1);\n                        }\n                        // Check that keys are pressed in the correct order\n                        for (let i = 0; i < combination.length - 1; i++) {\n                            if (presses[i] > presses[i + 1]) { return; }\n                        }\n                    }\n                    const total = presses.reduce((a, v) => a + (v > 0 ? 1 : -1), 0);\n                    /* istanbul ignore else */\n                    if (total >= combination.length) {\n                        next();\n                    }\n                }\n            });\n        }\n        return null;\n    }\n\n    /**\n     * Map key codes with multiple versions to simple form\n     * @param code Code to transform\n     */\n    private mapKey(code: string): string {\n        /* istanbul ignore else */\n        if (code.indexOf('alt') >= 0 || code.indexOf('shift') >= 0 || code.indexOf('control') >= 0) {\n            return code.replace('left', '').replace('right', '');\n        }\n        return code;\n    }\n\n    /**\n     * Update the list of the last keys in combinations to allow for prevent default actions on pre-existing hotkeys\n     */\n    private updateCombinationEndList(): void {\n        const key_list = [];\n        for (const combo of this.registered_combos) {\n            this.combo_end.push(combo[combo.length - 1]);\n        }\n        this.combo_end = unique(key_list);\n    }\n\n    /**\n     * Checks if the given hotkey combination is allowed and valid\n     * @param combo Array of key codes\n     */\n    private validCombination(combo: string[]): boolean {\n        let non_meta = 0;\n        for (const key of combo) {\n            /* istanbul ignore else */\n            if (INVALID_STANDALONE_KEYS.indexOf(key) < 0) {\n                non_meta++;\n            }\n        }\n        return non_meta > 0;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { HashMap } from '../shared/utilities/types.utilities';\nimport { getItemWithKeys } from '../shared/utilities/general.utilities';\nimport { version, build, core_version } from '../shared/globals/application';\nimport { BaseClass } from '../shared/base.class';\n\nimport * as dayjs from 'dayjs';\n\ninterface SettingsMap {\n    api: HashMap;\n    local: HashMap;\n    session: HashMap;\n    [block: string]: HashMap;\n}\n\ndeclare global {\n    interface Window {\n        debug: boolean;\n    }\n}\n\nexport type ConsoleStream = 'debug' | 'warn' | 'log' | 'error';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SettingsService extends BaseClass {\n\n    /** Map of settings */\n    private _settings: SettingsMap = { api: {}, local: {}, session: {} };\n    /** Store for promises */\n    private _promises: { [name: string]: Promise<any> } = {};\n    /** Name of the application */\n    private _app_name = 'PlaceOS';\n\n    constructor(private http: HttpClient) {\n        super();\n        const now = dayjs();\n        const built = now.isSame(build, 'd') ? `Today at ${build.format('h:mmA')}` : build.format('D MMM YYYY, h:mmA');\n        this.log('CORE', `${core_version}`, null, 'debug', true);\n        this.log('APP', `${version} | Built: ${built}`, null, 'debug', true);\n        this.init();\n    }\n\n    /**\n     * Initialise the settings\n     */\n    public async init() {\n        await this.loadFromFile('api');\n        this.loadStore('local', localStorage);\n        this.loadStore('session', sessionStorage);\n        if (this._settings.api.debug) {\n            window.debug = true;\n        }\n        if (this._settings.api.app && this._settings.api.app.name) {\n            this._app_name = this._settings.api.app.name;\n        }\n        this.log('Settings', 'Successfully loaded settings');\n        this._initialised.next(true);\n    }\n\n    /** Whether settings service has initialised */\n    public get app_name() { return this._app_name; }\n\n    /**\n     * Log data to the browser console\n     * @param type Type of message\n     * @param msg Message body\n     * @param args array of argments to log to the console\n     * @param stream Stream to emit the console on. 'debug', 'log', 'warn' or 'error'\n     * @param force Whether to force message to be emitted when debug is disabled\n     */\n    public log(type: string, msg: string, args?: any, stream: ConsoleStream = 'debug', force: boolean = false) {\n        if (window.debug || force) {\n            const colors: string[] = ['color: #E91E63', 'color: #3F51B5', 'color: default'];\n            if (args) {\n                console[stream](`%c[${this.app_name}]%c[${type}] %c${msg}`, ...colors, args);\n            } else {\n                console[stream](`%c[${this.app_name}]%c[${type}] %c${msg}`, ...colors);\n            }\n        }\n    }\n\n    /**\n     * Get a setting\n     * @param key Name of the setting. i.e. nested items can be grabbed using `.` to seperate key names\n     */\n    public get(key: string): any {\n        const keys = key.split('.');\n        let value = null;\n        if (keys[0] === 'session') {\n            keys.shift();\n            value = getItemWithKeys(keys, this._settings.session);\n        } else if (keys[0] === 'local') {\n            keys.shift();\n            value = getItemWithKeys(keys, this._settings.local);\n        } else {\n            value = getItemWithKeys(keys, this._settings.api) ||\n                getItemWithKeys(keys, this._settings.session) ||\n                getItemWithKeys(keys, this._settings.local);\n        }\n        return value;\n    }\n\n    /**\n     * Load settings from the given Storage object\n     * @param name Root key for the settings\n     * @param store Storage item to add to the load into the settings\n     */\n    private loadStore(name: string, store: Storage) {\n        if (store) {\n            for (let i = 0; i < store.length; i++) {\n                const key = store.key(i);\n                const item = store.getItem(key);\n                if (item) { this._settings[name][key] = item; }\n            }\n        }\n    }\n\n    /**\n     * Load setting data from a file\n     * @param name Namespace to add file data to\n     * @param file URL to file to load setting data from\n     */\n    private async loadFromFile(name: string, file: string = 'assets/settings.json', tries: number = 0) {\n        if (file !== 'assets/settings.json' && tries > 5) {\n            return Promise.resolve();\n        }\n        const file_name = file.split('/')[file.split('/').length - 1];\n        // Check if data has been loaded into the global space\n        if (window[file_name] instanceof Object) {\n            this._settings[name] = { ...(this._settings[name] || {}), ...window[file_name] };\n            return Promise.resolve();\n        }\n        const key = `load|${name}|${file}`;\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise<void>((resolve, reject) => {\n                this.http.get(file).subscribe(\n                    (data) => {\n                        this._settings[name] = { ...(this._settings[name] || {}), ...(data || {}) };\n                    }, (e) => {\n                        this.log('Settings', `Failed to load settings from \"${file}\"`);\n                        this._promises[key] = null;\n                        this.timeout(`load_${file_name}`, () => {\n                            this.loadFromFile(name, file, ++tries).then(() => resolve());\n                        })\n                    }, () => resolve()\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n}\n","import { Subscription, BehaviorSubject } from \"rxjs\";\n\nexport class BaseClass {\n    /** Store for named timers */\n    protected _timers: { [name: string]: number } = {};\n    /** Store for named intervals */\n    protected _intervals: { [name: string]: number } = {};\n    /** Store for named subscription unsub callbacks */\n    protected _subscriptions: { [name: string]: (Subscription | (() => void)) } = {};\n    /** Subject which stores the initialised state of the object */\n    protected readonly _initialised = new BehaviorSubject<boolean>(false);\n\n    /** Observable of the initialised state of the object */\n    public get initialised(): BehaviorSubject<boolean> {\n        return this._initialised;\n    }\n    /** Whether the object has been initialised */\n    public get is_initialised(): boolean {\n        return this._initialised.getValue();\n    }\n\n    protected destroy() {\n        for (const key in this._timers) {\n            /* istanbul ignore else */\n            if (this._timers.hasOwnProperty(key)) {\n                this.clearTimeout(key);\n            }\n        }\n        for (const key in this._intervals) {\n            /* istanbul ignore else */\n            if (this._intervals.hasOwnProperty(key)) {\n                this.clearInterval(key);\n            }\n        }\n        for (const key in this._subscriptions) {\n            /* istanbul ignore else */\n            if (this._subscriptions.hasOwnProperty(key)) {\n                this.unsub(key);\n            }\n        }\n    }\n\n    /**\n     * Creates a named timer\n     * @param name Name of the timer\n     * @param fn Callback function for the timer\n     * @param delay Callback delay\n     */\n    protected timeout(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearTimeout(name);\n            this._timers[name] = <any>setTimeout(() => {\n                fn();\n                this._timers[name] = null;\n            }, delay);\n        } else {\n            throw new Error(\n                name ? 'Cannot create named timeout without a name' : 'Cannot create a timeout without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named timer\n     * @param name Timer name\n     */\n    protected clearTimeout(name: string) {\n        /* istanbul ignore else */\n        if (this._timers[name]) {\n            clearTimeout(this._timers[name]);\n            this._timers[name] = null;\n        }\n    }\n\n    /**\n     * Creates a named interval\n     * @param name Name of the interval\n     * @param fn Callback function for the interval\n     * @param delay Callback delay\n     */\n    protected interval(name: string, fn: () => void, delay: number = 300) {\n        if (name && fn && fn instanceof Function) {\n            this.clearInterval(name);\n            this._intervals[name] = <any>setInterval(() => fn(), delay);\n        } else {\n            throw new Error(\n                name ? 'Cannot create named interval without a name' : 'Cannot create a interval without a callback'\n            );\n        }\n    }\n\n    /**\n     * Clears the named interval\n     * @param name Timer name\n     */\n    protected clearInterval(name: string) {\n        /* istanbul ignore else */\n        if (this._intervals[name]) {\n            clearInterval(this._intervals[name]);\n            this._intervals[name] = null;\n        }\n    }\n\n    /**\n     * Store named subscription\n     * @param name Name of the subscription\n     * @param unsub Unsubscribe callback or Subscription object\n     */\n    protected subscription(name: string, unsub: Subscription | (() => void)) {\n        this.unsub(name);\n        this._subscriptions[name] = unsub\n    }\n\n    /**\n     * Call unsubscribe callback with the given name\n     * @param name\n     */\n    protected unsub(name: string) {\n        /* istanbul ignore else */\n        if (this._subscriptions && this._subscriptions[name]) {\n            this._subscriptions[name] instanceof Subscription\n                ? (this._subscriptions[name] as Subscription).unsubscribe()\n                : (this._subscriptions[name] as any)();\n            this._subscriptions[name] = null;\n        }\n    }\n}\n","\nimport { Directive, OnDestroy } from '@angular/core';\nimport { BaseClass } from './base.class';\n\n@Directive({\n    selector: 'a-very-basic-component-base-that-should-not-be-used'\n})\nexport class BaseDirective extends BaseClass implements OnDestroy {\n    public ngOnDestroy(): void {\n        this.destroy();\n    }\n}\n\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ApplicationIcon } from '../../utilities/settings.interfaces';\n\n@Component({\n    selector: 'action-icon',\n    templateUrl: './action-icon.component.html',\n    styleUrls: ['./action-icon.component.scss']\n})\nexport class ActionIconComponent implements OnInit {\n    /** Icon to display */\n    @Input() public icon: ApplicationIcon;\n    /** Whether action is being processed */\n    @Input() public loading: boolean;\n    /** State of the action */\n    @Input() public state: 'success' | 'error' | '' = '';\n\n    constructor() {}\n\n    ngOnInit(): void {}\n}\n","<div class=\"action-icon\" [class.fade]=\"state || loading\">\n    <app-icon [icon]=\"icon\"></app-icon>\n    <div class=\"'state center ' + state\" *ngIf=\"!loading && state\">\n        <app-icon [icon]=\"{ class: 'material-icons', content: state === 'success' ? 'done' : 'close' }\"></app-icon>\n    </div>\n    <div class=\"loader center\" *ngIf=\"loading\">\n        <mat-spinner [diameter]=\"16\"></mat-spinner>\n    </div>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\nimport { BaseDirective } from 'src/app/shared/base.directive';\n\n@Component({\n  selector: 'an-action-field',\n  templateUrl: './action-field.component.html',\n  styleUrls: ['./action-field.component.scss']\n})\nexport class ActionFieldComponent extends BaseDirective {\n    /** Name of the field */\n    @Input() public name: string;\n    /** Value to display on the field */\n    @Input() public placeholder: string;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Emitter for user interaction events */\n    @Output('onAction') public on_action = new EventEmitter();\n    /** Whether to show tooltip */\n    public show_tooltip = false;\n\n    /**\n     * Emit that the user has performed an action on the field\n     */\n    public performAction() {\n        this.show_tooltip = !this.show_tooltip;\n        this.on_action.emit();\n    }\n}\n","<div class=\"action-field\" role=\"button\" [attr.disabled]=\"disabled\" form-field tabindex=\"0\" (keydown.enter)=\"performAction()\">\n    <div class=\"display\" (tapped)=\"performAction()\">{{ placeholder }}</div>\n    <div class=\"icon\" (tapped)=\"performAction()\">\n        <app-icon\n            [icon]=\"{\n                type: 'icon',\n                class: 'material-icons',\n                content: show_tooltip ? 'arrow_drop_up' : 'arrow_drop_down'\n            }\"\n        ></app-icon>\n    </div>\n</div>\n","import { Component, forwardRef, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'a-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.scss'],\n  providers: [\n      {\n          provide: NG_VALUE_ACCESSOR,\n          /* istanbul ignore next */\n          useExisting: forwardRef(() => CounterComponent),\n          multi: true\n      }\n  ]\n})\nexport class CounterComponent implements ControlValueAccessor {\n    /** Size of a single step */\n    @Input() public step: number = 1;\n    /** Maximum amount for the counter */\n    @Input() public max: number = 10;\n    /** Minimum amount for the counter */\n    @Input() public min: number = 0;\n    /** Current value of the counter */\n    public value: number;\n    /** Whether shift key is being held by the user */\n    public shift_key: boolean;\n    /** Whether control key is being held by the user */\n    public ctrl_key: boolean;\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /**\n     * Add the `step` to the current value\n     */\n    public add() {\n        if (!this.value) { this.value = this.min || 0 }\n        const step = this.ctrl_key ? 100 : this.shift_key ? 10 : this.step || 1;\n        this.value += step;\n        if (this.value > this.max) {\n            this.value = this.max || 10;\n        }\n        this.setValue(this.value);\n    }\n\n    /** Remove the `step` from the current value */\n    public remove() {\n        if (!this.value) { this.value = this.min || 0 }\n        const step = this.ctrl_key ? 100 : this.shift_key ? 10 : this.step || 1;\n        this.value -= step;\n        if (this.value < this.min) {\n            this.value = this.min || 0;\n        }\n        this.setValue(this.value);\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number): void {\n        this.value = new_value;\n        /* istanbul ignore else */\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.value = value;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n}\n","<div\n    class=\"counter\"\n    (window:keydown.shift)=\"shift_key = true\"\n    (window:keydown.control)=\"ctrl_key = true\"\n    (window:keydown.meta)=\"ctrl_key = true\"\n    (window:keyup.shift)=\"shift_key = false\"\n    (window:keyup.control)=\"ctrl_key = false\"\n    (window:keyup.meta)=\"ctrl_key = false\"\n>\n    <button mat-icon-button name=\"remove\" [disabled]=\"!value || value === min\" (tapped)=\"remove()\">\n        <app-icon [icon]=\"{ class: 'material-icons', content: 'remove' }\"></app-icon>\n    </button>\n    <div class=\"value\">\n        {{ value || '0' }}\n    </div>\n    <button mat-icon-button name=\"add\" [disabled]=\"value === max\" (tapped)=\"add()\">\n        <app-icon [icon]=\"{ class: 'material-icons', content: 'add' }\"></app-icon>\n    </button>\n</div>\n","import { Component, OnInit, forwardRef, Input, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { BaseDirective } from 'src/app/shared/base.directive';\n\nimport * as dayjs from 'dayjs';\nimport { MatMenuTrigger } from '@angular/material/menu';\n\n@Component({\n    selector: 'a-date-field',\n    templateUrl: './date-field.component.html',\n    styleUrls: ['./date-field.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DateFieldComponent),\n            multi: true\n        }\n    ]\n})\nexport class DateFieldComponent extends BaseDirective implements OnInit, ControlValueAccessor {\n    /** Earliest date available the user is allowed to pick */\n    @Input('from') public _from: number = dayjs().valueOf();\n    /** Latest date available the user is allowed to pick */\n    @Input('to') public _to: number;\n    /** Position of the tooltip */\n    @Input() public position: 'right' | 'left' = 'right';\n    /** Offset of the tooltip */\n    @Input() public offset: 'top' | 'bottom' = 'bottom';\n    /** Whether form control is disabled */\n    @Input() public disabled: boolean;\n    /** Whether to show the calendar tooltip */\n    public show_tooltip: boolean;\n    /** Currently selected date */\n    public date: number;\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    @ViewChild(MatMenuTrigger, { static: true }) private _trigger: MatMenuTrigger;\n\n    /** First allowed date on the calendar */\n    public get from(): number {\n        return this._from || dayjs().startOf('d').valueOf();\n    }\n    /** Current date value */\n    public get until(): number {\n        return this._to || dayjs().endOf('d').add(1, 'y').valueOf();\n    }\n    /** Display value for the current date */\n    public get date_string(): string {\n        return dayjs(this.date).format('DD MMM YYYY');\n    }\n\n    /** Whether date picker is open */\n    public get is_open(): boolean {\n        return this._trigger.menuOpen;\n    }\n\n    public ngOnInit() {\n        this.date = dayjs().valueOf();\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: number) {\n        this.date = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n        this.show_tooltip = false;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.date = value;\n        this.show_tooltip = false;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /** Set the state of the tooltip to closed after delay */\n    public closeDatePicker() {\n        this._trigger.closeMenu();\n    }\n\n    /** Set the state of the tooltip to closed after delay */\n    public openDatePicker() {\n        this._trigger.openMenu();\n    }\n}\n","<div\n    class=\"date-field\"\n    role=\"button\"\n    form-field\n    tabindex=\"0\"\n    [class.active]=\"is_open\"\n    [attr.disabled]=\"disabled\"\n    (keydown.enter)=\"openDatePicker()\"\n    [matMenuTriggerFor]=\"appMenu\"\n>\n    <div class=\"display\">{{ date_string }}</div>\n    <div class=\"icon\">\n        <app-icon\n            [icon]=\"{\n                type: 'icon',\n                class: 'material-icons',\n                content: is_open ? 'arrow_drop_up' : 'arrow_drop_down'\n            }\"\n        ></app-icon>\n    </div>\n</div>\n<mat-menu #appMenu=\"matMenu\">\n    <div mat-menu-item class=\"date-picker\" (click)=\"$event.stopPropagation()\">\n        <a-date-picker\n            [ngModel]=\"date\"\n            [options]=\"{ from: from, to: until }\"\n            (ngModelChange)=\"setValue($event); closeDatePicker()\"\n        ></a-date-picker>\n    </div>\n</mat-menu>\n","import { Component, OnInit, forwardRef, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { humaniseDuration } from 'src/app/shared/utilities/general.utilities';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'a-duration-field',\n    templateUrl: './duration-field.component.html',\n    styleUrls: ['./duration-field.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DurationFieldComponent),\n            multi: true\n        }\n    ]\n})\nexport class DurationFieldComponent extends BaseDirective implements OnInit, OnChanges, ControlValueAccessor {\n    /** Maximum duration option available */\n    @Input() public max: number = 240;\n    /** Minimum duration option available */\n    @Input() public min: number = 15;\n    /** Step value between options */\n    @Input() public step: number = 15;\n    /** Reference time for displaying next to durations */\n    @Input() public time: number;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n\n    public duration: string = '60';\n    /** List of available duration options */\n    public duration_options: Identity[];\n\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    public ngOnInit(): void {\n        this.duration_options = this.generateDurationOptions(this.max, this.min, this.step);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        /* istanbul ignore else */\n        if (changes.max || changes.min || changes.step || changes.time) {\n            this.duration_options = this.generateDurationOptions(this.max, this.min, this.step);\n        }\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: string): void {\n        this.duration = new_value;\n        /* istanbul ignore else */\n        if (this._onChange) {\n            this._onChange(+new_value);\n        }\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.duration = `${value}`;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    private generateDurationOptions(max: number, min: number, step: number): Identity[] {\n        const blocks: Identity[] = [];\n        let time = min;\n        let date = this.time ? dayjs(this.time) : null;\n        while (time <= max) {\n            blocks.push({\n                id: `${time}`,\n                name: `${humaniseDuration(time)}${date ? ' (' + date.add(time, 'm').format('h:mm A') + ')': ''}`\n            });\n            time += step;\n        }\n        return blocks;\n    }\n}\n","<div class=\"duration-field\" [attr.disabled]=\"disabled\">\n    <mat-form-field appearance=\"outline\">\n        <mat-select #select [value]=\"duration\" [disabled]=\"disabled\" (valueChange)=\"setValue($event)\">\n            <mat-option *ngFor=\"let option of duration_options\" [value]=\"option.id\">\n                {{ option.name }}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n</div>\n","import { Component, forwardRef, Input, ViewChild, OnInit, SimpleChanges, OnChanges } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { MatSelect } from '@angular/material/select';\n\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { timeFormatString } from 'src/app/shared/utilities/general.utilities';\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'a-time-field',\n    templateUrl: './time-field.component.html',\n    styleUrls: ['./time-field.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TimeFieldComponent),\n            multi: true\n        }\n    ]\n})\nexport class TimeFieldComponent extends BaseDirective implements OnInit, OnChanges, ControlValueAccessor {\n    /** Time step between each allowed time option */\n    @Input() public step: number = 15;\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Whether past times are allowed */\n    @Input() public no_past_times: boolean = true;\n    /** String representing the currently set time */\n    public date: number = dayjs().valueOf();\n    /** String representing the currently set time */\n    public time: string = dayjs().format('HH:mm');\n    /** Available time blocks for the selected date */\n    public _time_options: Identity[];\n    /** Whether select field should be shown */\n    public show_select: boolean;\n    /** Form control on change handler */\n    private _onChange: (_: number) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: number) => void;\n\n    /** Select field for selecting the time */\n    @ViewChild('select') private select_field: MatSelect;\n\n    public ngOnInit(): void {\n        this.show_select = true;\n        this._time_options = this.generateAvailableTimes(this.date, !this.no_past_times, this.step);\n        this.timeout('hide', () => this.show_select = false);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        /* istanbul ignore else */\n        if (changes.no_past_times || changes.step) {\n            this._time_options = this.generateAvailableTimes(this.date, !this.no_past_times, this.step);\n        }\n    }\n\n    /** Available time blocks for the selected date */\n    public get time_options() {\n        const time = this.time.split(':');\n        const date = dayjs(this.date).hour(+time[0]).minute(+time[1]);\n        /* istanbul ignore else */\n        if (date.minute() % 15 !== 0 && !this._time_options.find(time => time.id === date.format('HH:mm'))) {\n            this._time_options.push({\n                name: `${date.format(timeFormatString())}`,\n                id: date.format('HH:mm')\n            });\n            this._time_options.sort((a, b) => `${a.id}`.localeCompare(`${b.id}`));\n        }\n        return this._time_options;\n    }\n\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: string): void {\n        this.time = new_value;\n        /* istanbul ignore else */\n        if (this._onChange) {\n            const time = this.time.split(':');\n            const date = dayjs(this.date).hour(+time[0]).minute(+time[1]).startOf('m');\n            this._onChange(date.valueOf());\n        }\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: number) {\n        this.date = value;\n        const date = dayjs(this.date).startOf('m');\n        this.time = date.format('HH:mm');\n        this._time_options = this.generateAvailableTimes(this.date, !this.no_past_times, this.step);\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: number) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: number) => void): void {\n        this._onTouch = fn;\n    }\n\n    /**\n     * Show select field for time options\n     */\n    public showSelect() {\n        this.show_select = true;\n        this.timeout('on_shown', () => {\n            /* istanbul ignore else */\n            if (this.select_field) {\n                this.select_field.focus();\n                this.select_field.open();\n                this.subscription('listen_close', this.select_field.openedChange.subscribe((state) => {\n                    /* istanbul ignore else */\n                    if (!state) {\n                        this.show_select = false;\n                    }\n                }));\n            }\n        })\n    }\n\n    /**\n     * Generate a list of time options for the given date\n     * @param datestamp Date to generate options for\n     * @param show_past Whether past times should be options\n     */\n    private generateAvailableTimes(datestamp: number, show_past: boolean, step: number): Identity[] {\n        const now = dayjs();\n        let date = dayjs(datestamp);\n        const blocks = [];\n        /* istanbul ignore else */\n        if (show_past || date.isAfter(now, 'd')) {\n            date = date.startOf('d');\n        }\n        date = date.minute(Math.ceil(date.minute() / step) * step);\n        const end = date.endOf('d');\n        // Add options for the rest of the day\n        while (date.isBefore(end, 'm')) {\n            blocks.push({\n                name: `${date.format(timeFormatString())}`,\n                id: date.format('HH:mm')\n            });\n            date = date.add(step, 'm');\n        }\n        return blocks;\n    }\n}\n","<div\n    class=\"time-field\"\n    role=\"button\"\n    [style.display]=\"show_select ? 'none' : ''\"\n    [attr.disabled]=\"disabled\"\n    form-field\n    tabindex=\"0\"\n    (keydown.enter)=\"showSelect()\"\n>\n    <div class=\"display\">\n        <input\n            matInput\n            type=\"time\"\n            [disabled]=\"disabled\"\n            [ngModel]=\"time\"\n            (ngModelChange)=\"setValue($event)\"\n        />\n    </div>\n    <div class=\"icon\" (tapped)=\"showSelect()\">\n        <app-icon\n            [icon]=\"{\n                type: 'icon',\n                class: 'material-icons',\n                content: show_select ? 'arrow_drop_up' : 'arrow_drop_down'\n            }\"\n        ></app-icon>\n    </div>\n</div>\n<mat-form-field appearance=\"outline\" *ngIf=\"show_select\">\n    <mat-select #select [value]=\"time\" [disabled]=\"disabled\" (valueChange)=\"setValue($event)\">\n        <mat-option *ngFor=\"let option of time_options\" [value]=\"option.id\">\n            {{ option.name }}\n        </mat-option>\n    </mat-select>\n</mat-form-field>\n","import { Component, OnInit, forwardRef, Output, EventEmitter, Input } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject, Observable, of } from 'rxjs';\nimport { switchMap, debounceTime, distinctUntilChanged, map, catchError } from 'rxjs/operators';\n\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { User } from 'src/app/services/data/users/user.class';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport {\n    filterList,\n    matchToHighlight,\n    downloadFile,\n    csvToJson,\n} from 'src/app/shared/utilities/general.utilities';\n\n@Component({\n    selector: 'a-user-list-field',\n    templateUrl: './user-list-field.component.html',\n    styleUrls: ['./user-list-field.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => UserListFieldComponent),\n            multi: true,\n        },\n    ],\n})\nexport class UserListFieldComponent extends BaseDirective implements OnInit, ControlValueAccessor {\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Number of characters needed before a search will start */\n    @Input() public limit: number = 3;\n    /** Emitter for action to make a new user */\n    @Output('newUser') public new_user = new EventEmitter<void>();\n\n    /** User list to display */\n    public user_list: User[];\n    /** List of active selected users on the list */\n    public active_list: User[];\n    /** Whether user list is loading */\n    public loading: boolean;\n    /** String  */\n    public search_str: string;\n    /** List of users from an API search */\n    public search_results$: Observable<User[]>;\n    /** Subject holding the value of the search */\n    public search$ = new Subject<string>();\n\n    /** Form control on change handler */\n    private _onChange: (_: User[]) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: User[]) => void;\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    ngOnInit() {\n        // Listen for input changes\n        this.search_results$ = this.search$.pipe(\n            debounceTime(400),\n            distinctUntilChanged(),\n            switchMap((query) => {\n                this.loading = true;\n                return query.length >= this.limit\n                    ? this._service.Users.query({\n                          q: query.slice(0, Math.max(this.limit, 3)),\n                          cache: 60 * 1000,\n                      })\n                    : Promise.resolve([]);\n            }),\n            catchError((_) => of([])),\n            map((list: User[]) => {\n                this.loading = false;\n                return filterList(this.search_str, list, ['name', 'email']);\n            })\n        );\n        // Process API results\n        this.subscription(\n            'search_results',\n            this.search_results$.subscribe((list) => {\n                this.user_list = list;\n                this.user_list.forEach((i: any) => {\n                    i.match_name = matchToHighlight(i.match_name);\n                    i.match_email = matchToHighlight(i.match_email);\n                    return i;\n                });\n            })\n        );\n    }\n\n    /**\n     * Add user to the user list\n     * @param user\n     */\n    public addUser(user: User) {\n        /* istanbul ignore else */\n        if (!this.active_list) {\n            this.active_list = [];\n        }\n        const index = this.active_list.findIndex((a_user) => a_user.id === user.id);\n        /* istanbul ignore else */\n        if (index < 0) {\n            this.active_list = [...this.active_list, user];\n        }\n        this.setValue(this.active_list);\n        this.search_str = '';\n    }\n\n    /**\n     * Remove user from the user list\n     * @param user\n     */\n    public removeUser(user: User) {\n        this.active_list = this.active_list.filter((a_user) => a_user.id !== user.id);\n        this.setValue(this.active_list);\n    }\n\n    /**\n     * Load CSV file and populate the user list with the contents\n     * @param event File input field event\n     */\n    public addUsersFromFile(event) {\n        /* istanbul ignore else */\n        if (event.target) {\n            const file = event.target.files[0];\n            /* istanbul ignore else */\n            if (file) {\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.addEventListener('load', (evt) => {\n                    this.processCsvData((evt.srcElement as any).result);\n                    event.target.value = '';\n                });\n                reader.addEventListener('error', (_) =>\n                    this._service.notifyError('Error reading file.')\n                );\n            }\n        }\n    }\n\n    /**\n     * Process raw CSV data and save user data to attendee list\n     * @param data CSV data\n     */\n    private processCsvData(data: string) {\n        const list = csvToJson(data) || [];\n        const id = this._service.Users.current.staff_code;\n        list.forEach((el) => {\n            el.name = el.name || `${el.first_name} ${el.last_name}`;\n            const display = (el.name || `${Math.floor(Math.random() * 9999_9999)}`)\n                .split(' ')\n                .join('_')\n                .toLowerCase();\n            /* istanbul ignore else */\n            if (!el.email) {\n                el.email = `${display}+${id}@guest.mckinsey.com`;\n            }\n            el.type = 'external';\n            this.addUser(new User(el));\n        });\n    }\n\n    /* istanbul ignore next */\n    /** Download template CSV file */\n    public downloadCSVTemplate() {\n        const template = `Organisation Name,First Name,Last Name,Email,Phone\\nFake Org,John,Smith,john.smith@example.com,01234567898`;\n        downloadFile('template.csv', template);\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: User[]): void {\n        this.active_list = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: User[]) {\n        this.active_list = value;\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: User[]) => void): void {\n        this._onChange = fn;\n    }\n\n    /* istanbul ignore next */\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: User[]) => void): void {\n        this._onTouch = fn;\n    }\n}\n","<div class=\"user-list-field\" form-field [attr.disabled]=\"disabled\">\n    <mat-form-field appearance=\"outline\">\n        <input\n            matInput\n            name=\"user-search\"\n            [(ngModel)]=\"search_str\"\n            (ngModelChange)=\"search$.next($event)\"\n            [disabled]=\"disabled\"\n            placeholder=\"Search for user...\"\n            i18n-placeholder\n            [matAutocomplete]=\"auto\"\n        />\n        <div class=\"prefix\" matPrefix>\n            <app-icon\n                [icon]=\"{ type: 'icon', class: 'material-icons', content: 'search' }\"\n            ></app-icon>\n        </div>\n        <div class=\"suffix\" matSuffix *ngIf=\"loading\">\n            <mat-spinner diameter=\"16\"></mat-spinner>\n        </div>\n    </mat-form-field>\n    <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"addUser($event.option.value)\">\n        <mat-option *ngFor=\"let option of user_list\" [value]=\"option\">\n            <div class=\"name\">{{ option.name }}</div>\n            <div class=\"email\">{{ option.email }}</div>\n        </mat-option>\n    </mat-autocomplete>\n    <div class=\"actions\">\n        <button type=\"button\" name=\"new-contact\" matRipple (tapped)=\"new_user.emit()\" i18n=\"Add new external attendee\">\n            New Contact\n        </button>\n        <button type=\"button\" name=\"upload-csv\" matRipple i18n=\"Upload attendee list from CSV file\">\n            Upload CSV\n            <input type=\"file\" (change)=\"addUsersFromFile($event)\" />\n        </button>\n        <button type=\"button\" name=\"download-template\" matRipple (tapped)=\"downloadCSVTemplate()\" i18n=\"Download template CSV file\">\n            CSV Template\n        </button>\n    </div>\n    <div class=\"user-list\">\n        <mat-chip-list\n            aria-label=\"User List\"\n            *ngIf=\"active_list && active_list.length; else empty_state\"\n        >\n            <mat-chip\n                *ngFor=\"let user of active_list\"\n                [id]=\"user.email\"\n                [color]=\"user.external ? 'accent' : 'primary'\"\n                [removable]=\"true\"\n                (removed)=\"removeUser(user)\"\n            >\n                {{ user.name }}\n                <app-icon\n                    matChipRemove\n                    [icon]=\"{ type: 'icon', class: 'material-icons', content: 'close' }\"\n                ></app-icon>\n            </mat-chip>\n        </mat-chip-list>\n    </div>\n</div>\n<ng-template #empty_state>\n    <div i18n=\"Attendee empty state\">No attendees</div>\n</ng-template>\n","import { Component, OnInit, forwardRef, Input } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { Subject, Observable, of } from 'rxjs';\nimport { switchMap, debounceTime, distinctUntilChanged, map, catchError } from 'rxjs/operators';\n\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { User } from 'src/app/services/data/users/user.class';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { filterList, matchToHighlight } from 'src/app/shared/utilities/general.utilities';\n\n@Component({\n    selector: 'a-user-search-field',\n    templateUrl: './user-search-field.component.html',\n    styleUrls: ['./user-search-field.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => UserSearchFieldComponent),\n            multi: true\n        }\n    ]\n})\nexport class UserSearchFieldComponent extends BaseDirective implements OnInit, ControlValueAccessor {\n    /** Whether form field is disabled */\n    @Input() public disabled: boolean;\n    /** Limit available options to these */\n    @Input() public options: User[];\n    /** Currently selected user */\n    public active_user: User;\n    /** User list to display */\n    public user_list: User[];\n    /** Whether user list is loading */\n    public loading: boolean;\n    /** Current display value of the search input field  */\n    public search_str: string;\n    /** List of users from an API search */\n    public search_results$: Observable<User[]>;\n    /** Subject holding the value of the search */\n    public search$ = new Subject<string>();\n\n    /** Form control on change handler */\n    private _onChange: (_: User) => void;\n    /** Form control on touch handler */\n    private _onTouch: (_: User) => void;\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n\n        // Listen for input changes\n        this.search_results$ = this.search$.pipe(\n            debounceTime(400),\n            distinctUntilChanged(),\n            switchMap(query => {\n                this.loading = true;\n                return this.options && this.options.length > 0\n                    ? Promise.resolve(this.options)\n                    : query.length >= 3\n                        ? (this._service.Users.query({ q: query.slice(0, 3), cache: 60 * 1000 }) as Promise<User[]>)\n                        : Promise.resolve([]);\n            }),\n            catchError((err) => of([])),\n            map((list: User[]) => {\n                this.loading = false;\n                return filterList(this.search_str, list, ['name', 'email']);\n            })\n        );\n        // Process API results\n        this.subscription('search_results', this.search_results$.subscribe(list => {\n            this.user_list = list;\n            this.user_list.forEach((i: any) => {\n                i.match_name = matchToHighlight(i.match_name);\n                i.match_email = matchToHighlight(i.match_email);\n                return i;\n            });\n        }));\n    }\n\n    /**\n     * Reset the search string back to the name of the active user\n     */\n    public resetSearchString() {\n        if (this.active_user) {\n            this.search_str = this.active_user.name;\n        }\n    }\n\n    /**\n     * Update the form field value\n     * @param new_value New value to set on the form field\n     */\n    public setValue(new_value: User): void {\n        this.active_user = new_value;\n        if (this._onChange) {\n            this._onChange(new_value);\n        }\n        this.resetSearchString();\n    }\n\n    /**\n     * Update local value when form control value is changed\n     * @param value The new value for the component\n     */\n    public writeValue(value: User) {\n        this.active_user = value;\n        this.resetSearchString();\n    }\n\n    public setDisabledState(disabled: boolean) {\n        this.disabled = disabled;\n    }\n\n    /**\n     * Registers a callback function that is called when the control's value changes in the UI.\n     * @param fn The callback function to register\n     */\n    public registerOnChange(fn: (_: User) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Registers a callback function is called by the forms API on initialization to update the form model on blur.\n     * @param fn The callback function to register\n     */\n    public registerOnTouched(fn: (_: User) => void): void {\n        this._onTouch = fn;\n    }\n}\n","<div class=\"user-search-field\" form-field>\n    <mat-form-field appearance=\"outline\">\n        <input\n            matInput\n            name=\"user-search\"\n            [(ngModel)]=\"search_str\"\n            (ngModelChange)=\"search$.next($event)\"\n            [disabled]=\"disabled\"\n            placeholder=\"Search for user...\"\n            i18n-placeholder\n            [matAutocomplete]=\"auto\"\n            (blur)=\"resetSearchString()\"\n        />\n        <div class=\"prefix\" matPrefix>\n            <app-icon [icon]=\"{ type: 'icon', class: 'material-icons', content: 'search' }\"></app-icon>\n        </div>\n        <div class=\"suffix\" matSuffix *ngIf=\"loading\">\n            <mat-spinner diameter=\"16\"></mat-spinner>\n        </div>\n    </mat-form-field>\n    <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"setValue($event.option.value)\">\n        <mat-option *ngFor=\"let option of user_list\" [value]=\"option\">\n            <div class=\"name\">{{ option.name }}</div>\n            <div class=\"email\">{{ option.email }}</div>\n        </mat-option>\n    </mat-autocomplete>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\n\nimport { BaseDirective } from '../../base.directive';\n\n@Component({\n    selector: 'feedback',\n    templateUrl: './feedback.template.html',\n    styleUrls: ['./feedback.styles.scss']\n})\nexport class FeedbackComponent extends BaseDirective implements OnInit {\n    /** Name of the currently active page */\n    public current_page: string;\n\n    constructor(private _router: Router) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.timeout('Getting Title', () => this.updateRoute(document.title));\n        this._router.events.subscribe((event: NavigationEnd) => {\n            /* istanbul ignore else */\n            if (event instanceof NavigationEnd) {\n                this.timeout('Getting Title', () => this.updateRoute(document.title));\n            }\n        });\n    }\n\n    public updateRoute(location) {\n        location = location.substr(0, location.indexOf(' |'));\n        this.current_page = location;\n    }\n}\n","<a [href]=\"'mailto:converge_feedback@mckinsey.com?subject=Feedback for page: ' + current_page\">\n    <div class=\"feedback-button\">\n        <span class=\"text\" i18n>Feedback</span>\n        <span class=\"icon\">\n            <app-icon [icon]=\"{class:'material-icons', content: 'feedback'}\"></app-icon>\n        </span>\n    </div>\n</a>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { first } from 'rxjs/operators';\n\nimport { BaseDirective } from '../../../base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { NewUserModalComponent } from 'src/app/overlays/new-user-modal/new-user-modal.component';\nimport { unique } from 'src/app/shared/utilities/general.utilities';\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\nimport { User } from 'src/app/services/data/users/user.class';\nimport {\n    SpaceSelectModalComponent,\n    SpaceSelectModalData,\n} from 'src/app/overlays/space-select-modal/space-select-modal.component';\nimport {\n    RecurrenceModalData,\n    RecurrenceModalComponent,\n} from 'src/app/overlays/recurrence-modal/recurrence-modal.component';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'a-booking-form',\n    templateUrl: './booking-form.component.html',\n    styleUrls: ['./booking-form.component.scss'],\n})\nexport class BookingFormComponent extends BaseDirective {\n    /** Form fields for booking */\n    @Input() public form: FormGroup;\n    /** List of available users to host bookings */\n    public user_list: User[] = [];\n\n    constructor(private _service: ApplicationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._service.Users.initialised.pipe(first((_) => _)).subscribe(() => {\n            const user: User = this._service.Users.current;\n            const delegates = user.delegates.map(\n                (email) =>\n                    this._service.Users.find(email) ||\n                    new User({ email, name: email.split('@')[0] })\n            );\n            this.user_list = [user].concat(delegates);\n        });\n    }\n\n    /** Display string for the recurrence value of the booking */\n    public get recurrence(): string {\n        const recurrence = this.form.controls.recurrence\n            ? this.form.controls.recurrence.value\n            : null;\n        const periods = ['None', 'Daily', 'Weekly', 'Biweekly', 'Monthly'];\n        if (!recurrence || !recurrence.period || (recurrence.period as any) >= periods.length) {\n            return 'No recurrence';\n        }\n        const period =\n            typeof recurrence.period === 'string' ? recurrence.period : periods[recurrence.period];\n        const end = recurrence.end\n            ? `until ${dayjs(recurrence.end).format('DD MMM YYYY')}`\n            : 'forever';\n        return `${period} ${end}`;\n    }\n\n    /** Whether notes and description should use the HTML editor */\n    public get use_html(): boolean {\n        return this._service.setting('app.booking.html_body') || false;\n    }\n\n    /** List of available types for bookings */\n    public get booking_types(): Identity[] {\n        return this._service.setting('app.booking.booking_types') || [];\n    }\n\n    /** Display string for the list of active spaces */\n    public get spaces(): string {\n        const spaces = this.form.controls.space_ids.value ;\n        const space = this._service.Spaces.find(spaces[0]);\n        return spaces.length === 1\n            ? space.name\n            : spaces.length > 1\n            ? `${spaces.length} spaces selected`\n            : 'No Spaces selected';\n    }\n\n    /**\n     * Open modal to change the space details for the booking\n     */\n    public openSpacesModal(): void {\n        const ref = this._dialog.open<SpaceSelectModalComponent, SpaceSelectModalData>(\n            SpaceSelectModalComponent,\n            {\n                width: 'auto',\n                height: 'auto',\n                maxWidth: '95vw',\n                data: {\n                    spaces: this.form.controls.space_list.value,\n                    date: this.form.controls.date.value,\n                    duration: this.form.controls.duration.value,\n                    host: this.form.controls.organiser.value,\n                    multiple: true,\n                },\n            }\n        );\n        this.subscription(\n            'new_spaces',\n            ref.componentInstance.event.subscribe((event) => {\n                /* istanbul ignore else */\n                if (event.reason === 'done') {\n                    let space_list = this.form.controls.space_list.value;\n                    space_list = event.metadata;\n                    this.form.controls.space_list.setValue(unique(space_list, 'id'));\n                    ref.close();\n                    this.unsub('new_spaces');\n                }\n            })\n        );\n    }\n\n    /**\n     * Open modal to change the recurrence details for the booking\n     */\n    public openRecurrenceModal() {\n        const ref = this._dialog.open<RecurrenceModalComponent, RecurrenceModalData>(\n            RecurrenceModalComponent,\n            {\n                width: 'auto',\n                height: 'auto',\n                maxWidth: '95vw',\n                data: {\n                    details: this.form.controls.recurrence.value,\n                    date: this.form.controls.date.value,\n                },\n            }\n        );\n        this.subscription(\n            'recurrence',\n            ref.componentInstance.event.subscribe((event) => {\n                /* istanbul ignore else */\n                if (event.reason === 'done') {\n                    this.form.controls.recurrence.setValue(\n                        event.metadata && event.metadata.period !== 'none' ? event.metadata : {}\n                    );\n                    ref.close();\n                    this.unsub('recurrence');\n                }\n            })\n        );\n    }\n\n    /**\n     * Open modal to change the recurrence details for the booking\n     */\n    public openNewUserModal() {\n        const ref = this._dialog.open<NewUserModalComponent>(NewUserModalComponent, {\n            width: 'auto',\n            height: 'auto',\n        });\n        this.subscription(\n            'new_user',\n            ref.componentInstance.event.subscribe((event) => {\n                /* istanbul ignore else */\n                if (event.reason === 'done') {\n                    const attendees = this.form.controls.attendees.value;\n                    attendees.push(event.metadata);\n                    this.form.controls.attendees.setValue(unique(attendees, 'email'));\n                    ref.close();\n                    this.unsub('new_user');\n                }\n            })\n        );\n    }\n}\n","<div class=\"booking-form\" *ngIf=\"form\" [formGroup]=\"form\">\n    <div\n        class=\"field\"\n        *ngIf=\"form.controls.id && form.controls.id.value && form.controls.space_list\"\n    >\n        <label for=\"spaces\" i18n=\"Booking form spaces label\">Spaces: </label>\n        <an-action-field\n            name=\"spaces\"\n            [placeholder]=\"spaces\"\n            (onAction)=\"openSpacesModal()\"\n        ></an-action-field>\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.title\">\n        <label\n            for=\"title\"\n            [class.error]=\"form.controls.title.invalid && form.controls.title.touched\"\n            i18n=\"Booking form title label\"\n        >\n            Title<span>*</span>:\n        </label>\n        <mat-form-field appearance=\"outline\">\n            <input matInput name=\"title\" placeholder=\"Meeting Title\" i18n-placeholder formControlName=\"title\" />\n\n            <mat-error *ngIf=\"form.controls.title.invalid\" i18n=\"Booking form title error\"\n                >Title is required</mat-error\n            >\n        </mat-form-field>\n    </div>\n    <div class=\"group date\">\n        <div class=\"field\" *ngIf=\"form.controls.date\">\n            <label for=\"date\" i18n=\"Booking form date label\">Date: </label>\n            <a-date-field name=\"date\" formControlName=\"date\"></a-date-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.recurrence\">\n            <label for=\"recurrence\" i18n=\"Booking form recurrence label\">Recurrence: </label>\n            <an-action-field\n                name=\"recurrence\"\n                [placeholder]=\"recurrence\"\n                (onAction)=\"openRecurrenceModal()\"\n            ></an-action-field>\n        </div>\n    </div>\n    <div class=\"group time\">\n        <div class=\"field\" *ngIf=\"form.controls.date\">\n            <label for=\"start-time\" i18n=\"Booking form start time label\">Start Time: </label>\n            <a-time-field\n                name=\"start-time\"\n                [disabled]=\"form.controls.all_day?.value\"\n                formControlName=\"date\"\n            ></a-time-field>\n            <div class=\"error info\" *ngIf=\"form.controls.date.touched && form.controls.date.invalid\">\n                Date and time must be in the future\n            </div>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.duration\">\n            <div class=\"label-group\">\n                <label for=\"duration\" i18n=\"Booking form duration label\">Duration: </label>\n                <mat-checkbox\n                    formControlName=\"all_day\"\n                    *ngIf=\"form.controls.all_day\"\n                    i18n=\"Booking form all day label\"\n                    >All day booking</mat-checkbox\n                >\n            </div>\n            <a-duration-field\n                name=\"duration\"\n                [max]=\"720\"\n                [disabled]=\"form.controls.all_day?.value\"\n                [time]=\"form.controls.date?.value\"\n                formControlName=\"duration\"\n            ></a-duration-field>\n            <div class=\"error info\" *ngIf=\"form.controls.duration.touched && form.controls.duration.invalid\">\n                Duration is invalid. End time must be in the future\n            </div>\n        </div>\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.organiser\">\n        <label for=\"organiser\" i18n=\"Booking form organiser label\">Host: </label>\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                name=\"organiser\"\n                formControlName=\"organiser\"\n                [placeholder]=\"form.controls.organiser.value.name || form.controls.organiser.value.email\"\n            >\n                <mat-option *ngFor=\"let user of user_list\" [value]=\"user\">\n                    {{ user.name || user.email }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.attendees\">\n        <label for=\"attendees\" i18n=\"Booking form attendees label\">Attendees: </label>\n        <a-user-list-field\n            name=\"attendees\"\n            formControlName=\"attendees\"\n            (newUser)=\"openNewUserModal()\"\n        ></a-user-list-field>\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.type && booking_types.length > 1\">\n        <label for=\"booking-type\" i18n=\"Booking form booking type label\">Booking Type: </label>\n        <mat-form-field appearance=\"outline\">\n            <mat-select name=\"booking-type\" formControlName=\"type\">\n                <mat-option *ngFor=\"let type of booking_types\" [value]=\"type.id\">\n                    {{ type.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.has_catering\">\n        <mat-checkbox\n            formControlName=\"has_catering\"\n            i18n=\"Booking form need catering label\"\n        >\n            Need catering?\n        </mat-checkbox>\n    </div>\n    <div class=\"field\" *ngIf=\"form.controls.body\">\n        <label for=\"body\" i18n=\"Booking form notes label\">Notes: </label>\n        <mat-form-field name=\"body\" appearance=\"outline\" *ngIf=\"!use_html; else html_editor\">\n            <textarea\n                matInput\n                name=\"description\"\n                placeholder=\"Meeting Description\"\n                i18n-placeholder\n                formControlName=\"body\"\n            ></textarea>\n        </mat-form-field>\n        <ng-template #html_editor>\n            <editor formControlName=\"body\"></editor>\n        </ng-template>\n    </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'user-form',\n  templateUrl: './user-form.component.html',\n  styleUrls: ['./user-form.component.scss']\n})\nexport class UserFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n}\n","<div class=\"user form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"first-name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"User form first name label\"\n                >First Name:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"first-name\"\n                    placeholder=\"First name\"\n                    i18n-placeholder\n                    formControlName=\"first_name\"\n                />\n                <mat-error i18n=\"User form first name error\">First name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"system-name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                i18n=\"User form last name label\"\n                >Last Name:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"last-name\"\n                    placeholder=\"Last name\"\n                    i18n-placeholder\n                    formControlName=\"last_name\"\n                />\n                <mat-error i18n=\"User form last name error\">Last name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.email\">\n            <label\n                for=\"email\"\n                [class.error]=\"form.controls.email.invalid && form.controls.email.touched\"\n                i18n=\"User form email label\"\n                >Email<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"email\" placeholder=\"Email Address\" i18n-placeholder formControlName=\"email\" />\n                <mat-error i18n=\"User form email error\">A valid email is required</mat-error>\n            </mat-form-field>\n        </div>\n    </form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { ApplicationIcon } from '../../utilities/settings.interfaces';\nimport { BaseDirective } from '../../base.directive';\n\n@Component({\n    selector: 'app-icon',\n    templateUrl: './icon.component.html',\n    styleUrls: ['./icon.component.scss']\n})\nexport class IconComponent extends BaseDirective {\n    @Input() public icon: ApplicationIcon;\n}\n","<div class=\"app-icon\" *ngIf=\"icon\">\n    <i *ngIf=\"icon.type !== 'img'\" [class]=\"icon.class\">{{ icon.content }}</i>\n    <img *ngIf=\"icon.type === 'img'\" [src]=\"icon.src | safe:'resource'\" />\n</div>","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { BaseDirective } from '../../base.directive';\nimport { ApplicationIcon } from '../../utilities/settings.interfaces';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent extends BaseDirective implements OnInit {\n    /** Logo of the application organisation */\n    public logo: ApplicationIcon;\n    /** Whether the user credentials are being checked */\n    public loading: boolean;\n    /** Form fields for the login form */\n    public form: FormGroup;\n\n    /** Password field element */\n    @ViewChild('pass_field', { static: true }) private pwd_field: ElementRef<HTMLInputElement>;\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.loading = true;\n        this.form = new FormGroup({\n            username: new FormControl('', [Validators.required]),\n            password: new FormControl('', [Validators.required]),\n        });\n        this._service.initialised.pipe(first(_ => _)).subscribe(() => {\n            this.loading = false;\n            this.logo = this._service.setting('app.logo_light') || { type: 'icon' };\n        });\n    }\n\n    /** Perform user login */\n    public login() {\n        this.loading = true;\n        const form = this.form.value;\n        this._service.Users.login({\n            username: form.username,\n            password: form.password\n        }, { form: true }).then(() => {\n            this.loading = false;\n        }, () => {\n            this.loading = false;\n            this.form.controls.password.setErrors({ check: true });\n        });\n    }\n\n}\n","<div class=\"login\">\n    <div class=\"login-form\">\n        <form [formGroup]=\"form\">\n            <div class=\"header\" [style.background-color]=\"logo?.background\">\n                <div class=\"logo\">\n                    <i *ngIf=\"logo?.type === 'icon'\" [class]=\"logo.class\">{{ logo.content }}</i>\n                    <img *ngIf=\"logo?.type === 'img'\" [src]=\"logo.src | safe: 'resource'\" />\n                </div>\n            </div>\n            <div class=\"body\">\n                <ng-container *ngIf=\"!loading; else loading_state\">\n                    <div class=\"field\">\n                        <label\n                            for=\"username\"\n                            [class.error]=\"\n                                form.controls.username.invalid && form.controls.username.touched\n                            \"\n                            i18n=\"Login form username label\"\n                        >\n                            Username:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"username\"\n                                placeholder=\"Username/Email\"\n                                i18n-placeholder\n                                formControlName=\"username\"\n                            />\n                            <mat-error i18n=\"Login form username error\"\n                                >Username is required</mat-error\n                            >\n                        </mat-form-field>\n                    </div>\n                    <div class=\"field\">\n                        <label\n                            for=\"password\"\n                            [class.error]=\"\n                                form.controls.password.invalid && form.controls.password.touched\n                            \"\n                            i18n=\"Login form password label\"\n                        >\n                            Password:\n                        </label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"password\"\n                                placeholder=\"Password\"\n                                i18n-placeholder\n                                formControlName=\"password\"\n                                (keyup.enter)=\"login()\"\n                            />\n                            <mat-error i18n=\"Login form password error\"\n                                >Invalid username or password</mat-error\n                            >\n                        </mat-form-field>\n                    </div>\n                </ng-container>\n            </div>\n            <div class=\"footer\" *ngIf=\"!loading\">\n                <button mat-button (tapped)=\"login()\" i18n=\"Login action\">Login</button>\n            </div>\n        </form>\n    </div>\n</div>\n<ng-template #loading_state>\n    <div class=\"info-block center\">\n        <div class=\"icon\">\n            <mat-spinner diameter=\"64\"></mat-spinner>\n        </div>\n        <div class=\"text\" i18n=\"Checking login status\">Checking user credentials...</div>\n    </div>\n</ng-template>\n","import { Component, OnInit, Input, ContentChildren, Output, EventEmitter } from '@angular/core';\nimport { ApplicationIcon } from '../../utilities/settings.interfaces';\nimport { BaseDirective } from '../../base.directive';\n\nexport interface PopoutAction extends ApplicationIcon {\n    /** ID of the action */\n    id: string;\n}\n\n@Component({\n    selector: 'a-popout-menu',\n    templateUrl: './popout-menu.component.html',\n    styleUrls: ['./popout-menu.component.scss']\n})\nexport class PopoutMenuComponent extends BaseDirective {\n    /** List of available actions */\n    @Input() public actions: PopoutAction[] = [];\n    /** Emitter for user actions */\n    @Output() public action = new EventEmitter<string>();\n    /** Whether actions should show */\n    public show: boolean;\n\n    public close() {\n        this.timeout('close', () => {\n            this.show = false;\n        });\n    }\n}\n","<button\n    mat-icon-button\n    [class.small]=\"true\"\n    name=\"action\"\n    *ngFor=\"let item of actions; let i = index\"\n    [style.top]=\"show ? (-110 * i - 60) + '%' : ''\"\n    (tapped)=\"action.emit(item.id); show = false\"\n>\n    <app-icon [icon]=\"item\"></app-icon>\n</button>\n<button mat-icon-button name=\"menu\" [class.show]=\"show\" (tapped)=\"show = !show\" (window:click)=\"show ? close() : ''\">\n    <app-icon [icon]=\"{ class: 'material-icons', content: show ? 'add' : 'more_vert' }\"></app-icon>\n</button>\n","import { Component, OnInit, Input, EventEmitter, Output, ViewChild, ElementRef, SimpleChanges, OnChanges } from '@angular/core';\nimport { BaseDirective } from '../../base.directive';\n\n@Component({\n    selector: 'a-searchbar',\n    templateUrl: './searchbar.component.html',\n    styleUrls: ['./searchbar.component.scss']\n})\nexport class SearchbarComponent extends BaseDirective implements OnChanges {\n    /** Current contents of the searchbar input */\n    @Input('value') public value: string;\n    /** Current contents of the searchbar input */\n    @Input() public placeholder: string;\n    /** Whether external changes are being processed */\n    @Input() public loading: boolean;\n    /** Whether external changes are being processed */\n    @Input() public autofocus: boolean;\n    /** Emitter for changes to the searchbar value */\n    @Output() public valueChange = new EventEmitter<string>();\n    /** Input field reference */\n    @ViewChild('input', { static: true }) private input_field: ElementRef<HTMLInputElement>;\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        /* istanbul ignore else */\n        if (changes.autofocus && this.autofocus) {\n            this.focusField()\n        }\n    }\n\n    public focusField() {\n        /* istanbul ignore else */\n        if (this.input_field && this.input_field.nativeElement) {\n            this.input_field.nativeElement.focus();\n        }\n    }\n}\n","<div class=\"searchbar\" tabindex=\"0\" (focus)=\"focusField()\" (click)=\"focusField()\">\n    <div class=\"prefix\">\n        <app-icon [icon]=\"{ type: 'icon', class: 'material-icons', content: 'search' }\"></app-icon>\n    </div>\n    <div class=\"input\">\n        <input #input\n            type=\"text\"\n            [(ngModel)]=\"value\"\n            (ngModelChange)=\"valueChange.emit($event)\"\n            [placeholder]=\"placeholder || 'Search...'\"\n            i18n-placeholder\n        />\n    </div>\n    <div class=\"suffix\" *ngIf=\"loading\">\n        <mat-spinner diameter=\"32\"></mat-spinner>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\nimport { Building } from 'src/app/services/data/organisation/building.class';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { ApplicationLinkInternal, ApplicationIcon } from '../../utilities/settings.interfaces';\n\n@Component({\n    selector: 'a-sidebar',\n    templateUrl: './sidebar.component.html',\n    styleUrls: ['./sidebar.component.scss']\n})\nexport class SidebarComponent implements OnInit {\n\n    /** Currently active building */\n    public get active_building(): Building {\n        return this._service.Organisation.building;\n    }\n    public set active_building(building: Building) {\n        this._service.Organisation.building = building;\n    }\n\n    /** List of available menu items */\n    public get menu_items(): ApplicationLinkInternal[] {\n        return this._service.setting('app.general.menu.items') || [];\n    }\n\n    /** Logo for the application organisation */\n    public get logo(): ApplicationIcon {\n        return this._service.setting('app.logo_light');\n    }\n\n    /** List of available buildings */\n    public get buildings(): Building[] {\n        return this._service.Organisation.buildings || [];\n    }\n\n    constructor(private _service: ApplicationService) {}\n\n    ngOnInit(): void {}\n}\n","<div class=\"logo\">\n    <i *ngIf=\"logo?.type === 'icon'\" [class]=\"logo.class\">{{ logo.content }}</i>\n    <img *ngIf=\"logo?.type === 'img'\" [src]=\"logo.src | safe: 'resource'\" />\n</div>\n<div class=\"menu\">\n    <a\n        mat-button\n        class=\"item\"\n        *ngFor=\"let item of menu_items\"\n        [routerLink]=\"[item.route]\"\n        routerLinkActive=\"active\"\n    >\n        <div class=\"content\">\n            <div class=\"bar\"></div>\n            <div class=\"icon\">\n                <app-icon [icon]=\"item.icon\"></app-icon>\n            </div>\n            <div class=\"text\">{{ item.name }}</div>\n        </div>\n    </a>\n</div>\n<div class=\"building dark-mode\" *ngIf=\"buildings && buildings.length > 1\">\n    <mat-form-field appearance=\"outline\">\n        <mat-select [(ngModel)]=\"active_building\">\n            <mat-option *ngFor=\"let building of buildings\" [value]=\"building\">\n                {{ building.name }}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild } from '@angular/core';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { first } from 'rxjs/operators';\n\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { BaseDirective } from '../../base.directive';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'a-topbar-header',\n    templateUrl: './topbar-header.component.html',\n    styleUrls: ['./topbar-header.component.scss']\n})\nexport class TopbarHeaderComponent extends BaseDirective implements OnInit {\n    /** Currently selected date */\n    @Input() public date: number;\n    /** Emiiter for changes selected date */\n    @Output() public dateChange = new EventEmitter<number>();\n\n    @ViewChild(MatMenuTrigger, { static: true }) trigger: MatMenuTrigger;\n\n    /** Display string for the currently selected date */\n    public get date_display(): string {\n        const date = dayjs(this.date);\n        return !date.isSame(dayjs(), 'd') ? date.format('DD MMM YYYY') : '';\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._service.initialised.pipe(first(_ => _)).subscribe(() => {\n            const date = +(localStorage.getItem('CONCIERGE.date'));\n            /* istanbul ignore else */\n            if (date && date !== this.date) {\n                this.timeout('init', () => {\n                    this.date = date;\n                    this.dateChange.emit(this.date);\n                }, 10)\n            }\n        });\n    }\n\n    /** Change the selected date */\n    public changeDate(value: number) {\n        let date = dayjs(this.date).startOf('d');\n        date = date.add(value, 'd');\n        this.date = date.valueOf();\n        this.dateChange.emit(this.date);\n        localStorage.setItem('CONCIERGE.date', `${this.date}`);\n    }\n\n    /** Reset date to the current date */\n    public resetDate() {\n        this.date = dayjs().startOf('d').valueOf();\n        this.dateChange.emit(this.date);\n        localStorage.setItem('CONCIERGE.date', `${this.date}`);\n    }\n\n    public closeDatePicker() {\n        this.trigger.closeMenu();\n    }\n}\n","<div class=\"topbar-header\">\n    <div class=\"content\">\n        <ng-content></ng-content>\n    </div>\n    <div class=\"date\">\n        <div class=\"picker\">\n            <button mat-icon-button name=\"previous\" (tapped)=\"changeDate(-1)\">\n                <app-icon\n                    [icon]=\"{ class: 'material-icons', content: 'keyboard_arrow_left' }\"\n                ></app-icon>\n            </button>\n            <div class=\"text\" (dblclick)=\"resetDate()\">{{ date_display || 'Today' }}</div>\n            <button mat-icon-button name=\"next\" (tapped)=\"changeDate(1)\">\n                <app-icon\n                    [icon]=\"{ class: 'material-icons', content: 'keyboard_arrow_right' }\"\n                ></app-icon>\n            </button>\n        </div>\n        <button class=\"calendar\" mat-icon-button [matMenuTriggerFor]=\"appMenu\">\n            <app-icon [icon]=\"{ class: 'material-icons', content: 'today' }\"></app-icon>\n        </button>\n    </div>\n</div>\n<mat-menu #appMenu=\"matMenu\">\n    <div mat-menu-item class=\"date-picker\" (click)=\"$event.stopPropagation()\">\n        <a-date-picker\n            [(ngModel)]=\"date\"\n            (ngModelChange)=\"dateChange.emit($event); closeDatePicker()\"\n        ></a-date-picker>\n    </div>\n</mat-menu>\n","import { Component, Input } from '@angular/core';\nimport { User } from 'src/app/services/data/users/user.class';\n\n@Component({\n    selector: 'a-user-avatar',\n    templateUrl: './user-avatar.component.html',\n    styleUrls: ['./user-avatar.component.scss']\n})\nexport class UserAvatarComponent {\n    /** User to display avatar for */\n    @Input() public user: User;\n\n    public get initials(): string {\n        if (!this.user) {\n            return 'NA';\n        }\n        const parts = this.user.name.split(' ');\n        return parts.length > 1\n            ? `${parts[0][0]}${parts[parts.length - 1][0]}`\n            : this.user.name.slice(0, 2);\n    }\n}\n","<div class=\"user-avatar\" *ngIf=\"user\" [attr.user-id]=\"user.id\">\n    <div class=\"initials\" *ngIf=\"!user.image; else image_state\">{{ initials }}</div>\n</div>\n<ng-template #image_state>\n    <img [src]=\"user.image | safe: 'resource'\" />\n</ng-template>\n","import {\n    Directive,\n    Input,\n    Renderer2,\n    SimpleChanges,\n    OnChanges,\n    ContentChildren,\n    QueryList,\n    AfterContentInit\n} from '@angular/core';\nimport { CdkDropList, CdkDrag } from '@angular/cdk/drag-drop';\n\nimport { BaseDirective } from '../base.directive';\n\nexport enum ScrollDirection {\n    NONE,\n    X,\n    Y,\n    BOTH\n}\n\n@Directive({\n    selector: '[cdkDropList][scrollContainer]'\n})\nexport class CdkDropListScrollContainer extends BaseDirective\n    implements OnChanges, AfterContentInit {\n    /** Direction of scroll to determine updating the position of the drop list */\n    @Input() direction: ScrollDirection = ScrollDirection.X;\n    /** Name of the scroll container for the list */\n    @Input() scrollContainer: string;\n    /** Scroll container element */\n    public element: HTMLElement;\n    /** Last scroll position */\n    public last_scroll: { x: number; y: number } = { x: 0, y: 0 };\n\n    /** Draggable children elements */\n    @ContentChildren(CdkDrag) private items: QueryList<CdkDrag>;\n\n    constructor(private _cdkDropList: CdkDropList, private _renderer: Renderer2) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.scrollContainer && this.scrollContainer) {\n            this.element = this._cdkDropList.element.nativeElement.closest(\n                this.scrollContainer\n            ) as HTMLElement;\n        }\n    }\n\n    public ngAfterContentInit(): void {\n        this.subscription(\n            'drag_items',\n            this.items.changes.subscribe((items: QueryList<CdkDrag>) => {\n                const list = items.toArray();\n                list.forEach((i, index) => {\n                    this.subscription(\n                        `list-item-${index}`,\n                        this._renderer.listen(i.element.nativeElement, 'mousedown', () => {\n                            this.subscription(\n                                'item-dragged',\n                                this._renderer.listen('window', 'mouseup', () => this.onDrop())\n                            );\n                            this.onDrag();\n                        })\n                    );\n                    this.subscription(\n                        `list-item-touch-${index}`,\n                        this._renderer.listen(i.element.nativeElement, 'touchstart', () => {\n                            this.subscription(\n                                'item-dragged',\n                                this._renderer.listen('window', 'touchend', () => this.onDrop())\n                            );\n                            this.onDrag();\n                        })\n                    );\n                });\n            })\n        );\n    }\n\n    /** Start listing for scroll events on the container */\n    public onDrag() {\n        if (this.element) {\n            this.subscription(\n                'scroll',\n                this._renderer.listen(this.element, 'scroll', () => this.updateListPosition())\n            );\n        }\n    }\n\n    /** Stop listening for scroll events on the container */\n    public onDrop() {\n        this.unsub('scroll');\n    }\n\n    /**\n     * Forcefully update the position data of the drop list\n     */\n    private updateListPosition() {\n        this.timeout(\n            'update_positions',\n            () => {\n                const scroll = { x: this.element.scrollLeft, y: this.element.scrollTop };\n                if (\n                    ((this.direction === ScrollDirection.BOTH ||\n                        this.direction === ScrollDirection.Y) &&\n                        scroll.y !== this.last_scroll.y) ||\n                    ((this.direction === ScrollDirection.BOTH ||\n                        this.direction === ScrollDirection.X) &&\n                        scroll.x !== this.last_scroll.x)\n                ) {\n                    (this._cdkDropList._dropListRef as any)._cacheOwnPosition();\n                    (this._cdkDropList._dropListRef as any)._siblings.forEach(i =>\n                        i.isReceiving() ? i._cacheOwnPosition() : null\n                    );\n                }\n                this.last_scroll = scroll;\n            },\n            50\n        );\n    }\n}\n","import { trigger, transition, style, animate, state } from '@angular/animations';\n\nexport const ANIMATION_SHOW_ENTER_LEAVE = trigger('show', [\n    transition(':enter', [\n        style({ opacity: 0, height: 0 }),\n        animate(300, style({ opacity: 1, height: '*' }))\n    ]),\n    transition(':leave', [\n        style({ opacity: 1, height: '*' }),\n        animate(300, style({ opacity: 0, height: 0 }))\n    ])\n]);\n\nexport const ANIMATION_SHOW_CONTRACT_EXPAND = trigger('show', [\n    state('show', style({ opacity: 1, height: '*' })),\n    state('hide', style({ opacity: 0, height: 0, 'pointer-events': 'none' })),\n    transition('show <=> hide', animate('200ms ease-in'))\n]);\n","\nimport * as dayjs from 'dayjs';\n\n/** Version number of the application */\nexport const version = 'local-dev';\n/** Version number of the base application */\nexport const core_version = '1.0.0';\n/** Build time of the application */\nexport const build = dayjs();\n","\nimport { MockHttpRequestHandler } from '@placeos/ts-client';\n\nimport { generateMockBooking } from 'src/app/services/data/bookings/booking.utilities';\nimport { randomInt, unique } from '../../utilities/general.utilities';\nimport { MOCK_SPACES } from './spaces.mock';\nimport { MOCK_USERS } from './users.mock';\nimport { API } from './common.mock';\n\nimport * as dayjs from 'dayjs';\n\nwindow.control = window.control || {};\nwindow.control.systems = window.control.systems || {};\nwindow.control.handlers = window.control.handlers || [];\n\nexport const MOCK_BOOKINGS = Array(200)\n    .fill(0)\n    .map(i => {\n        const rooms = unique(Array(randomInt(4))\n            .fill(0)\n            .map(i => MOCK_SPACES[Math.floor(Math.random() * MOCK_SPACES.length)]), 'id');\n        // Set the organiser with the generated user list\n        const organiser = randomInt(9999) % 10 === 0 ? MOCK_USERS[MOCK_USERS.length - 1] : MOCK_USERS[randomInt(MOCK_USERS.length)];\n        // Set the attendees with the generated user list\n        const attendees = unique(\n            Array(randomInt(20))\n                .fill(0)\n                .map(i => MOCK_USERS[randomInt(MOCK_USERS.length)]),\n            'email'\n        );\n        return generateMockBooking({\n            organiser,\n            attendees,\n            room_ids: rooms.map(i => i.email)\n        });\n    });\n\nMOCK_SPACES.forEach(i => i.bookings = MOCK_BOOKINGS.filter(j => j.room_ids.indexOf(i.email) >= 0));\n\n// Handler for bookings index\nwindow.control.handlers.push({\n    path: `${API}/bookings`,\n    metadata: MOCK_BOOKINGS,\n    method: 'GET',\n    callback: event => {\n        const user = MOCK_USERS[MOCK_USERS.length - 1];\n        let data = !event.query_params.email\n            ? MOCK_BOOKINGS.filter(\n                  i => i.organiser.email === user.email || i.organiser === user.email || i.attendees.reduce((a, v) => a || v.email === user.email, false)\n              )\n            : MOCK_BOOKINGS.filter(\n                  i =>\n                  i.organiser.email === event.query_params.email ||\n                  (i.organiser as any) === event.query_params.email ||\n                      i.attendees.reduce((a, v) => a || v.email === event.query_params.email, false)\n            );\n        // Filter bookings between a given period\n        if (event.query_params.from) {\n            const start = dayjs(+event.query_params.from * 1000);\n            const end = event.query_params.to ? dayjs(+event.query_params.to * 1000).endOf('m') : start.endOf('d');\n            data = data.filter(i => {\n                const bkn_start = dayjs(i.start_epoch * 1000).startOf('m').second(1);\n                const bkn_end = dayjs(i.end_epoch * 1000);\n                return (bkn_start.isAfter(start, 's') && bkn_start.isBefore(end, 'm')) || (bkn_end.isAfter(start, 'm') && bkn_end.isBefore(end, 's'));\n            });\n        }\n        return data;\n    }\n} as MockHttpRequestHandler);\n\n// Handler for bookings show\nwindow.control.handlers.push({\n    path: `${API}/bookings/:id`,\n    metadata: MOCK_BOOKINGS,\n    method: 'GET',\n    callback: event => {\n        if (event.route_params.id) {\n            const booking = MOCK_BOOKINGS.find(i => i.id === event.route_params.id || i.icaluid === event.route_params.id);\n            if (booking) {\n                return booking;\n            } else {\n                throw { status: 404, message: 'Booking not found.' }\n            }\n        } else {\n            throw { status: 400, message: 'Invalid booking ID' };\n        }\n    }\n} as MockHttpRequestHandler);\n\n// Handler for new bookings\nwindow.control.handlers.push({\n    path: `${API}/bookings`,\n    metadata: MOCK_BOOKINGS,\n    method: 'POST',\n    callback: (event) => {\n        if (event.body) {\n            event.body.id = `bkn-${randomInt(9_999_999)}`;\n            event.body.icaluid = `ical-${event.body.id}`;\n            MOCK_BOOKINGS.push(event.body);\n            MOCK_SPACES.forEach(space => space.bookings = MOCK_BOOKINGS.filter(booking => booking.room_ids.indexOf(space.email) >= 0));\n            return event.body;\n        } else {\n            throw { status: 500, message: 'Invalid booking data' };\n        }\n    }\n} as MockHttpRequestHandler);\n\n// Handler for updating exisiting bookings\nwindow.control.handlers.push({\n    path: `${API}/bookings/:id`,\n    metadata: MOCK_BOOKINGS,\n    method: 'PUT',\n    callback: (event) => {\n        if (event.route_params.id) {\n            const index = MOCK_BOOKINGS.findIndex(i => i.id === event.route_params.id || i.icaluid === event.route_params.id);\n            if (index >= 0) {\n                MOCK_BOOKINGS[index] = event.body;\n                MOCK_SPACES.forEach(i => i.bookings = MOCK_BOOKINGS.filter(j => (j.room_ids).indexOf(i.email) >= 0));\n                return event.body;\n            } else {\n                throw { status: 404, message: 'Booking not found' };\n            }\n        } else\n            throw { status: 500, message: 'Invalid booking ID' };\n    }\n} as MockHttpRequestHandler);\n\n// Handler for deleting exisiting bookings\nwindow.control.handlers.push({\n    path: `${API}/bookings/:id`,\n    metadata: MOCK_BOOKINGS,\n    method: 'DELETE',\n    callback: (event) => {\n        if (event.route_params.id) {\n            const index = MOCK_BOOKINGS.findIndex(i => i.id === event.route_params.id || i.icaluid === event.route_params.id);\n            if (index >= 0) {\n                MOCK_BOOKINGS.splice(index, 1);\n                MOCK_SPACES.forEach(i => i.bookings = MOCK_BOOKINGS.filter(j => j.room_ids.indexOf(i.email) >= 0));\n            } else {\n                throw { status: 404, message: 'Booking not found' };\n            }\n        } else\n            throw { status: 500, message: 'Invalid booking ID' };\n    }\n} as MockHttpRequestHandler);\n","\nimport { MockHttpRequestHandler } from '@placeos/ts-client';\n\nimport { MOCK_ORG } from './organisation.mock';\nimport { DOMAIN } from './common.mock';\n\nwindow.control = window.control || {};\nwindow.control.systems = window.control.systems || {};\nwindow.control.handlers = window.control.handlers || [];\n\nexport const MOCK_BUILDINGS = [{\n    id: 'zone_bld-01',\n    zone_id: 'zone_bld-01',\n    name: 'Sydney',\n    settings: {\n        discovery_info: {\n            timezone: 'Australia/Sydney',\n            phone: {\n                emergency: '0412345678',\n                av_help: '0412345678',\n                concierge: '0412345678'\n            },\n            locations: {},\n            desk_tracking: 'sys-B0',\n            systems: {\n                desk_bookings: 'sys-B0'\n            },\n            messaging: 'sys-B0',\n            features: [],\n            catering: {},\n            neighbourhoods: {\n                'zone_lvl-01': {\n                    'Test Searchable': 'Device_Bench'\n                }\n            },\n            visitor_space: 'sydney-10.05@acaprojects.com',\n            levels: [\n                {\n                    level_id: 'zone_lvl-01',\n                    level_name: 'Level 1',\n                    number: 1,\n                    map_url: 'assets/maps/level_01.svg',\n                    floor_type: 'staff',\n                    settings: {\n                        map_features: [\n                            { id: 'Device_Bench', name: 'Device Bench' },\n                            { id: 'people', name: 'People' }\n                        ]\n                    },\n                    desks: 6,\n                },\n                {\n                    level_id: 'zone_lvl-02',\n                    level_name: 'Level 2',\n                    number: 2,\n                    map_url: 'assets/maps/level_02.svg',\n                    floor_type: 'client',\n                    book_type: 'Request',\n                    desks: 6,\n                },\n                {\n                    level_id: 'zone_lvl-03',\n                    level_name: 'Level 3',\n                    number: 3,\n                    map_url: 'assets/maps/level_03.svg',\n                    floor_type: 'staff',\n                    desks: 6,\n                },\n                {\n                    level_id: 'zone_lvl-10',\n                    level_name: 'Level 10',\n                    number: 10,\n                    map_url: 'assets/maps/level_10.svg',\n                    floor_type: 'staff',\n                    desks: 186,\n                }\n            ],\n            roles: {\n                'fire-warden': [\n                    { name: 'Alex Sorafumo', email: `alex.sorafumo@${DOMAIN}`, phone: '0412345678' },\n                    { name: 'Bob Jane', email: `bob.jane@${DOMAIN}`, phone: '0423456789' },\n                    { name: 'Rupert', email: `rupert@${DOMAIN}`, phone: '0434567890' }\n                ],\n                'first-aider': [\n                    { name: 'Ben Hoad', email: `ben.hoad@${DOMAIN}`, phone: '0412345678' },\n                    { name: 'Kim Burgess', email: `kim.burgess@${DOMAIN}`, phone: '0423456789' },\n                    { name: 'Mr Pop', email: `mr.pop@${DOMAIN}`, phone: '0434567890' }\n                ]\n            },\n            extras: [\n                { extra_id: 'VidConf', extra_name: 'Video Conference' },\n                { extra_id: 'AV', extra_name: 'AV' },\n                { extra_id: 'presentation', extra_name: 'Wireless Presentation' },\n                { extra_id: 'phone', extra_name: 'Conference Phone' },\n            ],\n            loan_items: [\n                { extra_id: 'ConfKit', extra_name: 'Conference Kit' },\n                { extra_id: 'Chairs', extra_name: 'Chairs' },\n            ],\n        },\n    },\n}];\n\nMOCK_BUILDINGS.push({ ...MOCK_BUILDINGS[0], name: 'London' });\n\nMOCK_ORG[0].discovery_info.buildings = MOCK_BUILDINGS;\n\nsetTimeout(() => {\n    window.control.handlers.push({\n        path: '/api/engine/v2/zones',\n        metadata: MOCK_BUILDINGS,\n        callback: (event) => {\n            if (event.query_params.tags === 'building') {\n                return { total: MOCK_BUILDINGS.length, results: MOCK_BUILDINGS };\n            } else if (event.query_params.tags === 'org') {\n                return { total: MOCK_ORG.length, results: MOCK_ORG };\n            } else if (event.query_params.tags === 'level') {\n                return { total: 0, results: [] };\n            }\n        }\n    } as MockHttpRequestHandler);\n});\n","\n/** Domain of the organisation */\nexport const DOMAIN = 'acaprojects.com';\n/** Endpoint where the staff API is located */\nexport const API = '/api/staff';\n","import { MockHttpRequestHandler } from '@placeos/ts-client';\n\nimport { MOCK_USERS } from \"./users.mock\";\nimport { MOCK_SPACES } from './spaces.mock';\nimport { MOCK_BUILDINGS } from './buildings.mock';\nimport { randomInt } from '../../utilities/general.utilities';\nimport { generateMockLocation } from 'src/app/services/data/location/location.utilities';\n\nexport const MOCK_LOCATIONS: any[] = [];\n\nconst spaces = MOCK_SPACES.map(space => space.map_id);\nconst levels = MOCK_BUILDINGS.reduce((lvls, bld) => {\n    bld.settings.discovery_info.levels.forEach(lvl => lvls.push(lvl.level_id));\n    return lvls;\n}, []);\n\nfor (const user of MOCK_USERS) {\n    if (user.location || randomInt(99999) % 2 === 0) {\n        user.location = generateMockLocation(null, spaces, levels);\n        MOCK_LOCATIONS.push(user.location);\n    }\n}\n\nsetTimeout(() => {\n    window.control.handlers.push({\n        path: '/api/staff/people/:email',\n        metadata: MOCK_LOCATIONS,\n        callback: (event) => {\n            if (event.route_params.email) {\n                const user = MOCK_USERS.find(user => user.email === event.route_params.email || user.id === event.route_params.email);\n                if (user) {\n                    return user.location;\n                }\n            }\n            throw { status: 404, message: `Unable to locate user with email ${event.route_params.email}` };\n        }\n    } as MockHttpRequestHandler);\n});\n\n\n","export const MOCK_ORG = [\n    {\n        send_acceptance: true,\n        discovery_info: {\n            buildings: []\n        }\n    }\n];\n","import { generateMockSpace } from 'src/app/services/data/spaces/space.utilities';\nimport { API } from './common.mock';\nimport { MockHttpRequestHandler } from '@placeos/ts-client';\n\nimport * as dayjs from 'dayjs';\n\nwindow.control = window.control || {};\nwindow.control.systems = window.control.systems || {};\nwindow.control.handlers = window.control.handlers || [];\n\nexport const MOCK_SPACES = [\n    { id: '1.01', name: 'Meeting', zones: ['zone_bld-01', 'zone_lvl-01'] },\n    { id: '1.02', name: 'Collaboration', zones: ['zone_bld-01', 'zone_lvl-01'] },\n    { id: '1.03', name: 'Team Meeting', zones: ['zone_bld-01', 'zone_lvl-01'] },\n    { id: '1.04', name: 'Pod', zones: ['zone_bld-01', 'zone_lvl-01'] },\n    { id: '1.05', name: 'IT Support', zones: ['zone_bld-01', 'zone_lvl-01'] }\n].map((space_data: any) => {\n    const space = generateMockSpace({\n        ...space_data,\n        map_id: `area-${space_data.id}-status`,\n        id: `sys_rm-${space_data.id}`,\n        name: `${space_data.name} ${space_data.id}`\n    });\n    window.control.systems[space.id] = {\n        Bookings: [\n            {\n                today: space.bookings\n            }\n        ]\n    };\n    return space;\n});\n\n// Add handler for users index\nwindow.control.handlers.push({\n    path: `${API}/rooms`,\n    metadata: MOCK_SPACES,\n    callback: event => {\n        let results = MOCK_SPACES;\n        if (event.query_params.q) {\n            const query = event.query_params.q.toLowerCase();\n            results = results.filter(\n                i =>\n                    (i.id || '').toLowerCase().indexOf(query) >= 0 ||\n                    (i.name || '').toLowerCase().indexOf(query) >= 0 ||\n                    (i.email || '').toLowerCase().indexOf(query) >= 0\n            );\n        }\n        // Remove rooms without given zones from results\n        if (event.query_params.zone_ids) {\n            const zone_ids = event.query_params.zone_ids.split(',');\n            results = results.filter(i => {\n                let count = 0;\n                for (const zone of zone_ids) {\n                    if (i.zones.indexOf(zone) >= 0) {\n                        count++;\n                    }\n                }\n                return count >= zone_ids.length;\n            });\n        }\n        // Remove rooms without given ids from results\n        if (event.query_params.room_ids) {\n            const room_ids = event.query_params.room_ids.split(',');\n            results = results.filter(i => room_ids.indexOf(i.id) >= 0);\n        }\n        // Update availability status of each room results\n        if (event.query_params.available_from) {\n            const from = dayjs(+event.query_params.available_from * 1000);\n            const to = dayjs(+event.query_params.available_to * 1000);\n            results.forEach(space => {\n                for (const booking of space.bookings) {\n                    const start = dayjs(booking.start_epoch * 1000);\n                    const end = dayjs(booking.end_epoch * 1000);\n                    if (\n                        (from.isAfter(start, 'm') && from.isBefore(end, 'm')) ||\n                        (to.isAfter(start, 'm') && to.isBefore(end, 'm')) ||\n                        (start.isAfter(from, 'm') && start.isBefore(to, 'm'))\n                    ) {\n                        space.settings = { available: false };\n                    } else {\n                        space.settings = { available: true };\n                    }\n                }\n            });\n        }\n        return results;\n    }\n} as MockHttpRequestHandler);\n","\nimport { MockHttpRequestHandler } from '@placeos/ts-client';\n\nimport { generateMockUser } from 'src/app/services/data/users/user.utilities';\nimport { API } from './common.mock';\n\nwindow.control = window.control || {};\nwindow.control.systems = window.control.systems || {};\nwindow.control.handlers = window.control.handlers || [];\n\nexport const MOCK_USERS = Array(Math.floor(Math.random() * 300 + 100)).fill(0)\n    .map(i => generateMockUser());\nexport const MOCK_CONTACTS = Array(Math.floor(Math.random() * 300 + 100)).fill(0)\n    .map(i => generateMockUser({ visitor: true }));\n\nexport const PREDEFINED_USERS = [\n    'Jonathan McFarlane',\n    'Stephen Von Takach',\n    'Alex Sorafumo',\n    'Candy Russo',\n    'Cristina Boston',\n    'Eugene Murphy',\n    'Ben Hoad',\n    'Kim Burgess',\n    'Desk Test',\n    'Space Test',\n    'Wireless Test',\n    'Zo-Kalar'\n];\n\n// Add predefined user to user list\nfor (const user of PREDEFINED_USERS) {\n    const id = user.split(' ').join('.').toLowerCase();\n    const new_user = generateMockUser({ id, name: user });\n    new_user.location = true;\n    MOCK_USERS.push(new_user);\n}\n\n// Add handler for users index\nwindow.control.handlers.push({\n    path: `${API}/users`,\n    metadata: MOCK_USERS,\n    callback: (event) => {\n        if (event.query_params.q) {\n            const query = event.query_params.q.toLowerCase();\n            return MOCK_USERS.filter(i =>\n                (i.id || '').toLowerCase().indexOf(query) >= 0 ||\n                (i.name || '').toLowerCase().indexOf(query) >= 0 ||\n                (i.email || '').toLowerCase().indexOf(query) >= 0\n            );\n        }\n        return MOCK_USERS;\n    }\n} as MockHttpRequestHandler);\n\n// Add handler for current user\nwindow.control.handlers.push({\n    path: `/api/engine/v2/users/current`,\n    metadata: MOCK_USERS[MOCK_USERS.length - 1],\n} as MockHttpRequestHandler);\n\n// Add handler for users show\nwindow.control.handlers.push({\n    path: `${API}/users/:id`,\n    metadata: MOCK_USERS,\n    callback: (event) => {\n        const user = MOCK_USERS.find(i => i.id === event.route_params.id || i.name === event.route_params.id || i.email === event.route_params.id);\n        if (user) {\n            return user;\n        }\n        throw { status: 404, message: 'User not found' };\n    }\n} as MockHttpRequestHandler);\n\n// Add handler for contacts index\nwindow.control.handlers.push({\n    path: `${API}/contacts`,\n    metadata: MOCK_CONTACTS,\n    callback: (event) => {\n        if (event.query_params.q) {\n            const query = event.query_params.q.toLowerCase();\n            return MOCK_CONTACTS.filter(i =>\n                (i.id || '').toLowerCase().indexOf(query) >= 0 ||\n                (i.name || '').toLowerCase().indexOf(query) >= 0 ||\n                (i.email || '').toLowerCase().indexOf(query) >= 0\n            );\n        }\n        return MOCK_USERS;\n    }\n} as MockHttpRequestHandler);\n\n// Add handler for contacts show\nwindow.control.handlers.push({\n    path: `${API}/contacts/:id`,\n    metadata: MOCK_USERS,\n    callback: (event) => {\n        const user = MOCK_USERS.find(i => i.id === event.route_params.id || i.name === event.route_params.id);\n        if (user) {\n            return user;\n        }\n        throw { status: 404, message: 'User not found' };\n    }\n} as MockHttpRequestHandler);\n\n\n","\nimport { createSystem } from './systems.mock';\n\nimport './api/organisation.mock';\nimport './api/buildings.mock';\nimport './api/users.mock';\nimport './api/spaces.mock';\nimport './api/bookings.mock';\nimport './api/locations.mock';\n\nwindow.control = window.control || {};\nwindow.control.systems = {\n    ...window.control.systems,\n    ['sys-B0']: createSystem('sys-B0')\n} || {};\nwindow.control.handlers = window.control.handlers || [];\n","\n\nimport { generateMockSpace } from \"../../services/data/spaces/space.utilities\";\nimport { setMockBookingStartDatetime } from \"../../services/data/bookings/booking.utilities\";\n\nimport * as dayjs from 'dayjs';\n\nexport interface IBookingPanelBindings {\n    /** Whether user input is enabled */\n    touch_enabled: boolean;\n    /** Number of seconds before a meeting can be started, being truthy enables start/stop and auto-cancellations */\n    timeout?: number;\n    /** Number of seconds after the start of a meeting when it is auto-cancelled, overrides `timeout` value */\n    cancel_timeout?: number;\n    /** Whether to display hearing assistance UI elements */\n    has_accessability?: boolean;\n    /** URL to embed into the control modal when opened */\n    control_url?: string;\n    /** Whether to display catering UI elements */\n    has_catering?: boolean;\n    /** Whether to hide booking details(title and host) */\n    hide_details?: boolean;\n    /** Whether to hide the title of the displayed bookings */\n    hide_title?: boolean;\n    /** Whether to hide user(host) details */\n    hide_user?: boolean;\n    /** Whether to hide timeline availability */\n    hide_availability?: boolean;\n    /** Whether to disable booking from the UI */\n    booking_disabled?: boolean;\n    /** Whether booking future meetings are allowed */\n    no_timeline_bookings?: boolean;\n    /** Time before the booking end with which the current booking is endable in ms from UTC epoch */\n    is_endable?: number;\n    /** Whether to automatically ask user starting the current meeting */\n    ask_start?: boolean;\n    /** Whether to automatically ask user about ending the active meeting */\n    ask_end?: boolean;\n    /** Default meeting title if the displayed meeting doesn't have one */\n    default_title?: string;\n    /** Hide all meeting related details */\n    hide_all?: boolean;\n    /** Title of the active space */\n    title?: string;\n    /** Description of the active space */\n    description?: string;\n    /** URL of an icon image to display on the UI */\n    icon?: string;\n    /** Whether the space status is displayed on the right */\n    flip_status?: boolean;\n    /** Whether bookings can be automatically cancelled once they expire */\n    can_cancel?: boolean;\n    /** Minimum bookable duration in minutes */\n    min_duration?: number;\n    /** Maximum bookable duration in minutes */\n    max_duration?: number;\n    /** Start time of the business day with format `HH:mm` */\n    business_start?: string;\n    /** End time of the business day with format `HH:mm` */\n    business_end?: string;\n\n}\n\nconst LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\nconst NUMBERS = '0123456789'.split('');\n\nlet index = 0;\n\nconst SPACE_LIST: any[] = [];\n\nconst IMAGES: string[] = ['large_down', 'large_up', 'small_down', 'small_up'];\n\n/**\n * Create mock engine booking module with appropriate bookings and space data\n */\nexport function createSystem(id?: string) {\n    id = id || `sys-${LETTERS[Math.floor(index / NUMBERS.length)]}${NUMBERS[(index++) % NUMBERS.length]}`;\n    setMockBookingStartDatetime(dayjs().minute(-50).valueOf());\n    const space = generateMockSpace({ id });\n    SPACE_LIST.push(space);\n\n    const booking_bindings: IBookingPanelBindings = {\n        touch_enabled: true,\n        timeout: 300,\n        cancel_timeout: 600,\n        has_catering: true,\n        control_url: 'https://aca.im/demo/aca/control/',\n        icon: `/assets/img/${IMAGES[Math.floor(Math.random() * IMAGES.length)]}.png`\n    };\n\n    const today = dayjs();\n    const desk_bindings = {\n        'zone_lvl-01:bookings': {\n            'SYD.1.09.E': {\n                [today.format('YYYY-MM-DD')]: {\n                    // 'first@acaprojects.com': {\n                    'zo-kalar@acaprojects.com': {\n                        start: today.subtract(1, 'h').unix(),\n                        end: today.add(1, 'h').unix(),\n                        checked_in: true\n                    }\n                },\n                [today.add(1, 'd').format('YYYY-MM-DD')]: {\n                    'second@acaprojects.com': {\n                        start: today.add(1, 'd').subtract(1, 'h').unix(),\n                        end: today.add(1, 'd').add(1, 'h').unix()\n                    }\n                }\n            },\n            'SYD.1.09.F': {},\n            'SYD.1.09.G': {}\n        },\n        'zone_lvl-02:bookings': {\n            'SYD.2.01.A': {\n                [today.format('YYYY-MM-DD')]: {\n                    'first@acaprojects.com': {\n                        start: today.subtract(1, 'h').unix(),\n                        end: today.add(1, 'h').unix(),\n                        checked_in: true\n                    }\n                },\n                [today.add(1, 'd').format('YYYY-MM-DD')]: {\n                    'second@acaprojects.com': {\n                        start: today.add(1, 'd').subtract(1, 'h').unix(),\n                        end: today.add(1, 'd').add(1, 'h').unix()\n                    }\n                }\n            },\n            'SYD.2.01.B': {},\n            'SYD.2.01.C': {}\n        }\n    };\n\n    const system = {\n        id, name: space.name,\n        Bookings: [],\n        DeskManagement: [{\n            'zone_lvl-01:desk_ids': ['SYD.1.09.E', 'SYD.1.09.F', 'SYD.1.09.G']\n        }],\n        DeskBookings: []\n    };\n    system.Bookings.push({\n        ...booking_bindings,\n        room_name: space.name,\n        today: space.bookings,\n        $start_meeting: (time: number) => {\n            system.Bookings[0].last_meeting_started = time;\n        },\n        $cancel_meeting: (time: number, reason: string) => {\n            const list = system.Bookings[0].today;\n            system.Bookings[0].today = list.filter(i => i.date !== time);\n        },\n        $waiter_call: () => {\n            console.log(`[MOCK][${id}] Waiter called...`);\n        }\n    });\n    system.DeskBookings.push({\n        ...desk_bindings,\n        $book: (email: string, desk: string, date: number) => {\n            console.log('[MOCK] Book called');\n        },\n        $check_in: (email: string, desk: string) => {\n            system.DeskBookings[0]['zone_lvl-01:bookings'][desk][dayjs().format('YYYY-MM-DD')][email].checked_in = true;\n        },\n        $check_out: (email: string, desk: string) => {\n            console.log(`[MOCK]Check out called`);\n        },\n    });\n    return system;\n}\n","\nimport { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { EditorModule } from '@tinymce/tinymce-angular';\nimport { ComposerModule } from '@placeos/composer';\n\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { CdkTableModule } from '@angular/cdk/table';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\n\nimport { APipesModule } from '@acaprojects/ngx-pipes';\nimport { ACustomEventsModule } from '@acaprojects/ngx-custom-events';\nimport { ADatePickerModule } from '@acaprojects/ngx-date-picker';\n\nimport { BaseDirective } from './base.directive';\nimport { LoginComponent } from './components/login/login.component';\nimport { IconComponent } from './components/icon/icon.component';\nimport { TopbarHeaderComponent } from './components/topbar-header/topbar-header.component';\nimport { SearchbarComponent } from './components/searchbar/searchbar.component';\nimport { UserAvatarComponent } from './components/user-avatar/user-avatar.component';\nimport { PopoutMenuComponent } from './components/popout-menu/popout-menu.component';\nimport { FeedbackComponent } from './components/feedback/feedback.component'\n\nimport { UserFormComponent } from './components/forms/user-form/user-form.component';\nimport { BookingFormComponent } from './components/forms/booking-form/booking-form.component';\n\nimport { UserSearchFieldComponent } from './components/custom-fields/user-search-field/user-search-field.component';\nimport { TimeFieldComponent } from './components/custom-fields/time-field/time-field.component';\nimport { DurationFieldComponent } from './components/custom-fields/duration-field/duration-field.component';\nimport { DateFieldComponent } from './components/custom-fields/date-field/date-field.component';\nimport { ActionFieldComponent } from './components/custom-fields/action-field/action-field.component';\nimport { UserListFieldComponent } from './components/custom-fields/user-list-field/user-list-field.component';\nimport { CounterComponent } from './components/custom-fields/counter/counter.component';\nimport { CdkDropListScrollContainer } from './directives/cdk-drop-list-scroll-container.directive';\nimport { SidebarComponent } from './components/sidebar/sidebar.component';\nimport { ActionIconComponent } from './components/action-icon/action-icon.component';\n\nconst COMPONENTS: Type<any>[] = [\n    BaseDirective,\n    LoginComponent,\n    IconComponent,\n    ActionIconComponent,\n    TopbarHeaderComponent,\n    SearchbarComponent,\n    UserAvatarComponent,\n\n    UserFormComponent,\n    BookingFormComponent,\n\n    PopoutMenuComponent,\n    FeedbackComponent,\n    SidebarComponent\n];\n\nconst DIRECTIVES: Type<any>[] = [\n    CdkDropListScrollContainer\n]\n\nconst ENTRY_COMPONENT: Type<any>[] = [\n    DateFieldComponent,\n    ActionFieldComponent,\n    TimeFieldComponent,\n    DurationFieldComponent,\n    UserSearchFieldComponent,\n    UserListFieldComponent,\n    CounterComponent,\n];\n\nconst MATERIAL_MODULES: any[] = [\n    MatButtonModule,\n    MatSnackBarModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatChipsModule,\n    MatRippleModule,\n    MatMenuModule,\n    MatCheckboxModule,\n    MatTooltipModule,\n    MatRadioModule,\n    MatTabsModule,\n    MatSlideToggleModule\n];\n\nconst CDK_MODULES: any[] = [\n    ScrollingModule,\n    DragDropModule,\n    CdkTableModule\n];\n\n@NgModule({\n    declarations: [\n        ...COMPONENTS,\n        ...ENTRY_COMPONENT,\n        ...DIRECTIVES\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        APipesModule,\n        ADatePickerModule,\n        ACustomEventsModule,\n        RouterModule,\n        EditorModule,\n        ComposerModule,\n        ...MATERIAL_MODULES,\n        ...CDK_MODULES\n    ],\n    exports: [\n        APipesModule,\n        ACustomEventsModule,\n        ADatePickerModule,\n        ...COMPONENTS,\n        ...DIRECTIVES,\n        ...ENTRY_COMPONENT,\n        ...MATERIAL_MODULES,\n        ...CDK_MODULES\n    ]\n})\nexport class SharedContentModule {}\n","import { HashMap } from \"./types.utilities\";\n\n/**\n * Convert map into a query string\n * @param map Key value pairs to convert\n */\nexport function toQueryString(map: HashMap) {\n    let str = '';\n    if (map) {\n        for (const key in map) {\n            if (map.hasOwnProperty(key) && map[key] !== undefined && map[key] !== null) {\n                str += `${(str ? '&' : '')}${key}=${map[key]}`;\n            }\n        }\n    }\n    return str;\n}\n","\nimport { humaniseDuration } from './general.utilities';\n\nimport { User } from '../../services/data/users/user.class';\nimport { Space } from '../../services/data/spaces/space.class';\n\nimport * as dayjs from 'dayjs';\n\n// attendees: FormFormatters.attendees(user),\n// date: FormFormatters.date,\n// room: FormFormatters.space,\n// recurrence: FormFormatters.recurrence\n\n/**\n * Get function to create formatted string for a list of users with a host\n * @param host Host user\n */\nexport function formatAttendeesWithHost(host: User): (_: User[]) => string {\n    return (l) => formatAttendees(l, host);\n}\n\n/**\n * Create formatted string from a list of users\n * @param list List of users\n * @param host Owner of the list of users\n */\nexport function formatAttendees(list: User[], host?: User) {\n    let attendee_str: string = '';\n    if (list && list.length > 0) {\n        const users = [...list];\n        if (host) {\n            const result = users.find(a => a.email === host.email);\n            if (result) {\n                users.splice(users.indexOf(result), 1);\n            }\n        }\n        const length = users.length + (host ? 1 : 0);\n        attendee_str = `${length} Attendee${length === 1 ? '' : 's'}; ${host ? host.name : ''}`;\n        for (const item of users) {\n            if (attendee_str) {\n                attendee_str += ', ';\n            }\n            attendee_str += item.name;\n        }\n        attendee_str = attendee_str.replace('; ,', ';');\n    }\n    return attendee_str;\n}\n\n/**\n * Create date formatted string for given date\n * @param date Date to format\n */\nexport function formatDate(date: number) {\n    return dayjs(date).format('DD MMMM YYYY');\n}\n\n/**\n * Create time formatted string for given date\n * @param date Date to format\n */\nexport function formatTime(date: number) {\n    return dayjs(date).format('h:mm A');\n}\n\n/**\n * Create formatted string for a period of given duration\n * @param duration Period duration in minutes\n */\nexport function formatPeriodWithDuration(duration: number) {\n    return (t) => formatPeriod(t, duration);\n}\n\n/**\n * Create formatted string for a period of given duration\n * @param timestamp Start hours and minutes of the period in the format `HH:mm`\n * @param duration Period duration in minutes\n */\nexport function formatPeriod(timestamp: string, duration: number = 60) {\n    const parts = timestamp.split(':');\n    const date = dayjs().hour(+parts[0]).minute(+parts[1]);\n    return `${date.format('h:mm A')} - ${date.add(duration, 'm').format('h:mm A')} (${humaniseDuration(duration)})`;\n}\n\n/**\n * Create formatted human readable string for a given duration\n * @param duration Duration in minutes\n */\nexport function formatDuration(duration: number) {\n    return humaniseDuration(duration);\n}\n\n/** Human readable names of applicable recurrence periods */\nexport const RECURRENCE_PERIODS: string[] = ['None', 'Daily', 'Weekly', 'Monthly', 'Yearly'];\n\n/**\n * Create human readable string for recurrence metadata\n * @param value\n */\nexport function formatRecurrence(value: { period: string | number, end: number }) {\n    if (!value || !value.period || value.period as any >= RECURRENCE_PERIODS.length) {\n        return 'No recurrence';\n    }\n    const period = typeof value.period === 'string' ? value.period : RECURRENCE_PERIODS[value.period];\n    const end = value.end ? `until ${dayjs(value.end).format('DD MMM YYYY')}` : 'forever';\n    return `${period} ${end}`;\n}\n\n/**\n * Create human readable string for a room or list of rooms\n * @param list List of spaces/rooms\n */\nexport function formatSpaces(list: Space | Space[]) {\n    if (!list || (list instanceof Array && list.length <= 0)) {\n        return 'No selected space';\n    }\n    if (list instanceof Array) {\n        return list.length === 1 ? list[0].name : `${list.length} Space${list.length !== 1 ? 's' : ''}`;\n    } else {\n        const capacity = list.capacity ? '(' + list.capacity + ' ' + (list.capacity === 1 ? 'person' : 'people') + ')' : '';\n        return `${list.name} ${capacity}`;\n    }\n}\n","import { HashMap, Point } from './types.utilities';\n\nimport * as dayjs from 'dayjs';\n\nexport function getItemWithKeys(keys: string[], map: HashMap) {\n    const key = keys.shift();\n    if (map[key]) {\n        return keys.length > 0 ? getItemWithKeys(keys, map[key]) : map[key];\n    }\n    return null;\n}\n\n/* istanbul ignore next */\n/**\n * Checks whether the platform is a mobile device.\n */\nexport function isMobileDevice(): boolean {\n    const r = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;\n    return !!navigator.userAgent.match(r);\n}\n\n/* istanbul ignore next */\n/**\n * Checks whether the browser is Mobile Safari.\n */\nexport function isMobileSafari(): boolean {\n    const agent = navigator.userAgent;\n    return !!(\n        agent.match(/iPhone|iPad|iPod/) &&\n        agent.match(/AppleWebKit/) &&\n        !agent.match('CriOS')\n    );\n}\n\n/* istanbul ignore next */\n/**\n * Checks whether the browser is Android Chrome.\n */\nexport function isAndroidChrome(): boolean {\n    const agent = navigator.userAgent;\n    return !!(agent.match(/Android/) && agent.match(/Chrome/));\n}\n\n/**\n * Generate string representation of a number with zeros padding the length\n * @param value Number to pad with zeros\n * @param length Length of the resulting string\n */\nexport function padZero(value: number, length: number): string {\n    let str = value.toString();\n    while (str.length < length) {\n        str = '0' + str;\n    }\n    return str;\n}\n\n/**\n * Remove duplicates from the given array\n * @param array List of items to remove duplicates from\n * @param key Key on array objects to compare for uniqueness\n */\nexport function unique(array: any[], key: string = '') {\n    return array.filter(\n        (el, pos, arr) =>\n            arr.indexOf(key ? arr.find((i) => i[key] === el[key]) : arr.find((i) => i === el)) ===\n            pos\n    );\n}\n\n/**\n * Convert duration to human readable string\n * @param duration Duration in minutes\n * @param short Whether to use short form of duration words e.g. hours as h\n */\nexport function humaniseDuration(duration: number, short: boolean = false) {\n    if (!duration || duration < 0) {\n        return '';\n    }\n    const h = Math.floor(duration / 60);\n    let d = `${h >= 1 ? h + (short ? 'h' : ' hour' + (h === 1 ? '' : 's')) : ''}`;\n    if (duration % 60 !== 0) {\n        if (d) {\n            d += short ? ' ' : ', ';\n        }\n        const m = duration % 60;\n        d += `${m >= 1 ? m + (short ? 'm' : ' minute' + (m === 1 ? '' : 's')) : ''}`;\n    }\n    return d;\n}\n\n/**\n * Get a filtered list of items\n * @param filter Value to filter on\n * @param items List of results to filter\n * @param fields Fields to check for matches on each item\n */\nexport function filterList<T = HashMap>(\n    filter: string,\n    items?: T[],\n    fields: string[] = ['id']\n): T[] {\n    let results: any[];\n    // Tokenise filter string\n    const filters = (filter || '').toLowerCase().split(' ');\n    const list = {};\n    for (const f of filters) {\n        /* istanbul ignore else */\n        if (f) {\n            /* istanbul ignore else */\n            if (!list[f]) {\n                list[f] = 0;\n            }\n            list[f]++;\n        }\n    }\n    // Group similar tokens\n    const parts = [];\n    for (const f in list) {\n        /* istanbul ignore else */\n        if (list.hasOwnProperty(f)) {\n            parts.push({ word: f, count: list[f], regex: new RegExp(f, 'gi') });\n        }\n    }\n    parts.sort((a, b) => b.word.length - a.word.length || a.word.localeCompare(b.word));\n    const item_list = JSON.parse(JSON.stringify(items || []));\n    /* istanbul ignore else */\n    if (filter) {\n        results = item_list.filter((item) => {\n            let match_count = 0;\n            item.match_index = 65535;\n            item.match = '';\n            const field_list = {};\n            // Initialise field match variables\n            for (const f of fields) {\n                field_list[f] = {\n                    value: (item[f] || '').toLowerCase(),\n                    index: 65536,\n                    matched: 0,\n                };\n            }\n            // Search for matches with the tokenised filter string\n            for (const i of parts) {\n                /* istanbul ignore else */\n                if (i.word) {\n                    // Check fields for matches\n                    for (const f of fields) {\n                        const field = field_list[f];\n                        const index = field.value.indexOf(i.word);\n                        field.index = index < field.index ? index : field.index;\n                        field.matches = (field.value.match(i.regex) || []).length;\n                        field.value = field.value.replace(i.regex, ' ');\n                    }\n                    // Update token match count\n                    for (const f of fields) {\n                        const field = field_list[f];\n                        /* istanbul ignore else */\n                        if (field.matches >= i.count) {\n                            match_count++;\n                            // Update field matches\n                            let changed = 0;\n                            const tokens = (item[`match_${f}`] || item[f] || '').split(' ');\n                            for (const k of tokens) {\n                                /* istanbul ignore else */\n                                if (changed >= i.count) {\n                                    break;\n                                }\n                                /* istanbul ignore else */\n                                if (k.toLowerCase().indexOf(i.word) >= 0 && k.indexOf('`') < 0) {\n                                    tokens[tokens.indexOf(k)] = k.replace(i.regex, '`$&`');\n                                    changed++;\n                                }\n                            }\n                            item[`match_${f}`] = tokens.join(' ');\n                            break;\n                        }\n                    }\n                }\n            }\n            // Get field with the most relevent match\n            for (const f of fields) {\n                const field = field_list[f];\n                /* istanbul ignore else */\n                if (field.index < item.match_index && field.index >= 0) {\n                    item.match_index = field.index;\n                    item.match = f;\n                }\n            }\n            return item.match_index >= 0 && item.match && match_count >= parts.length;\n        });\n    } else {\n        results = item_list;\n    }\n    // Sort by order of relevence then name\n    results.sort((a, b) => {\n        const diff = a.match_index - b.match_index;\n        return diff === 0 ? a.name.localeCompare(b.name) : diff;\n    });\n    return results;\n}\n\n/**\n * Convert a match string from `filterList` to renderable HTML\n * @param str Match string to change\n */\nexport function matchToHighlight(str: string): string {\n    /* istanbul ignore else */\n    if (str) {\n        str = str.replace(/\\`[a-zA-Z0-9\\@\\.\\_]*\\`/g, '<span class=\"highlight\">$&</span>');\n        str = str.replace(/\\`/g, '');\n    }\n    return str;\n}\n\n/**\n * Convert time string to ms from UTC epoch for today\n * @param time Time string in the format `HH:mm`\n */\nexport function timeToDate(time: string): number {\n    const parts = time.split(':');\n    const date = dayjs()\n        .hour(+parts[0])\n        .minute(+parts[1])\n        .startOf('m');\n    return date.valueOf();\n}\n\n/**\n * Generate a random number\n * @param ceil Biggest value to generate not inclusive\n * @param floor Smallest value to generate. Defaults to 0\n */\nexport function randomInt(ceil: number, floor: number = 0) {\n    return Math.floor(Math.random() * (ceil - floor)) + floor;\n}\n\n/** Get time format string for locale */\nexport function timeFormatString(): string {\n    return is24HourTime() ? 'HH:mm' : 'h:mm A';\n}\n\n/** Whether locale string is displayed in 24 hour time */\nexport function is24HourTime(): boolean {\n    const date = new Date();\n    const localeString = date.toLocaleTimeString();\n    return localeString.indexOf('AM') < 0 && localeString.indexOf('PM') < 0;\n}\n\n/**\n * Downloads a file to the users computer with the given filename and contents\n * @param filename Name of the file to download\n * @param contents Contents of the file to download\n */\nexport function downloadFile(filename: string, contents: string) {\n    const element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(contents));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\n/**\n * Parse raw CSV data into a JSON object\n * @param csv CSV data to parse\n */\nexport function csvToJson(csv: string) {\n    const lines = csv.split('\\n');\n    let fields = lines.splice(0, 1)[0].split(',');\n    fields = fields.map((v) => v.replace('\\r', ''));\n    const list: any[] = [];\n    for (const line of lines) {\n        let parts = line.split(',');\n        parts = parts.map((v) => v.replace('\\r', ''));\n        /* istanbul ignore else */\n        if (parts.length >= fields.length) {\n            const item: any = {};\n            for (let i = 0; i <= parts.length; i++) {\n                let part = null;\n                part = parts[i];\n                /* istanbul ignore else */\n                if (part !== undefined) {\n                    item[(fields[i] || '').split(' ').join('_').toLowerCase()] = part;\n                }\n            }\n            list.push(item);\n        }\n    }\n\n    return list;\n}\n\n/**\n * Convert javascript array to CSV string\n * @param json Javascript array to convert\n */\nexport function jsonToCsv(json: HashMap[]) {\n    /* istanbul ignore else */\n    if (json instanceof Array && json.length > 0) {\n        const keys = Object.keys(json[0]);\n        const valid_keys = keys.filter((key) => json[0].hasOwnProperty(key));\n        return `\\uFEFF${valid_keys.join(',')}\\n${json\n            .map((item) => valid_keys.map((key) => item[key]).join(','))\n            .join('\\n')}`;\n    }\n    return '';\n}\n\n\n/* istanbul ignore next */\n/**\n * detect IE\n * returns version of IE or false, if browser is not Internet Explorer\n */\nexport function detectIE() {\n    var ua = window.navigator.userAgent;\n\n    var msie = ua.indexOf('MSIE ');\n    if (msie > 0) {\n        // IE 10 or older => return version number\n        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n    }\n\n    var trident = ua.indexOf('Trident/');\n    if (trident > 0) {\n        // IE 11 => return version number\n        var rv = ua.indexOf('rv:');\n        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n    }\n\n    var edge = ua.indexOf('Edge/');\n    if (edge > 0) {\n        // Edge (IE 12+) => return version number\n        return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n    }\n\n    // other browser\n    return false;\n}\n\n/**\n * Grab point details from mouse or touch event\n * @param event Event to grab details from\n */\nexport function eventToPoint(event: MouseEvent | TouchEvent): Point {\n    if (!event) {\n        return { x: -1, y: -1 };\n    }\n    if (event instanceof MouseEvent) {\n        return { x: event.clientX, y: event.clientY };\n    } else {\n        return event.touches && event.touches.length > 0\n            ? { x: event.touches[0].clientX, y: event.touches[0].clientY }\n            : { x: -1, y: -1 };\n    }\n}\n\n/**\n * Flatten nested array\n * @param an_array Array to flatten\n */\nexport function flatten<T = any>(an_array: T[]) {\n    const stack = [...an_array];\n    const res = [];\n    while (stack.length) {\n        // pop value from stack\n        const next = stack.pop();\n        if (Array.isArray(next)) {\n            // push back array items, won't modify the original input\n            stack.push(...next);\n        } else {\n            res.push(next);\n        }\n    }\n    // reverse to restore input order\n    return res.reverse();\n}\n","import { AbstractControl } from '@angular/forms';\n\nimport { User } from '../../services/data/users/user.class';\n\nimport * as dayjs from 'dayjs';\n\nconst HAS_ERROR = true;\n\n/**\n * Check that control value is a date that is the same or after from date\n * @param control Angular form control\n * @param is_from Comparison date(ms from UTC epoch). Defaults to the current time\n */\nexport function validateDate(control: AbstractControl, is_from: number = dayjs().valueOf()) {\n    const from = dayjs(is_from);\n    const date = dayjs(control.value || undefined);\n    return date.isBefore(from, 'd') ? { date: HAS_ERROR, message: 'Booking needs to be made in the future' } : null;\n}\n\n/**\n * Build start time validation function\n * @param date Date of the time to check\n * @param is_from Comparison date(ms from UTC epoch). Defaults to the current time\n */\nexport function buildValidateStartTime(date: number, is_from: number = dayjs().valueOf()) {\n    return (c) => validateStartTime(c, date, is_from);\n}\n\n/**\n * Check that control value time is after the comparison date time\n * @param control Angular form control\n * @param date Date of the time to check\n * @param is_from Comparison date(ms from UTC epoch). Defaults to the current time\n */\nexport function validateStartTime(control: AbstractControl, date: number, is_from: number = dayjs().valueOf()) {\n    const now = dayjs(is_from);\n    const parts = control.value.split(':');\n    const date_obj = dayjs(date).hour(+parts[0]).minute(+parts[1]);\n    return date_obj.isBefore(now, 'm') ? { start: HAS_ERROR, message: 'Booking time needs to be made in the future' } : null;\n}\n\nexport function buildValidateDuration(min: number = 30, max: number = 240) {\n    return (c) => validateDuration(c, min, max);\n}\n\nexport function validateDuration(control: AbstractControl, min: number = 30, max: number = 240) {\n    if (control.value < (min || 30)) {\n        return { duration: HAS_ERROR, message: `Minimum booking duration is ${min} minute${min === 1 ? 's' : ''}` };\n    } else if (control.value > (max || 480)) {\n        return { length: HAS_ERROR, message: `Maximum booking duration is ${max} minute${max === 1 ? 's' : ''}` };\n    }\n    return null;\n}\n\nexport function buildValidateAttendees(host: User, min: number = 0) {\n    return (c) => validateAttendees(c, host, min);\n}\n\nexport function validateAttendees(control: AbstractControl, host: User, min: number = 0) {\n    if (!control || !(control.value instanceof Array)) {\n        return min > 0\n            ? { invalid: true, message: `Minimum of ${min} attendee${min === 1 ? ' is' : 's are'} required other than you` }\n            : null;\n    }\n    const list: User[] = control.value;\n    if (host) {\n        const result = list.find(a => a.email === host.email);\n        if (result) { list.splice(list.indexOf(result), 1); }\n    }\n    return list.length >= min ? null : {\n        count: true,\n        message: `Minimum of ${min} attendee${min === 1 ? ' is' : 's are'} required other than you`\n    };\n}\n\nexport function validateEndTime(date_control: AbstractControl) {\n    return (control: AbstractControl) => {\n        const date = dayjs(date_control ? date_control.value : undefined).add(control.value || 60, 'm');\n        return date.isBefore(dayjs(), 'm') ? { end_time: true } : null;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { BaseDirective } from '../shared/base.directive';\nimport { ApplicationService } from '../services/app.service';\nimport { ApplicationLoadingState, LoadingState } from '../shared/utilities/types.utilities';\nimport { ApplicationIcon } from '../shared/utilities/settings.interfaces';\n\n@Component({\n    selector: 'app-shell-wrapper',\n    templateUrl: './shell.component.html',\n    styleUrls: ['./shell.component.scss']\n})\nexport class ShellWrapperComponent extends BaseDirective implements OnInit {\n    /** Loading state of the application */\n    public loading_state: ApplicationLoadingState;\n    /** Logo of the application organisation */\n    public logo: ApplicationIcon;\n\n    constructor(private _service: ApplicationService, private _router: Router) {\n        super();\n    }\n\n    /** Whether the user needs to login */\n    public get show_login(): boolean {\n        return !this._service.Users.is_logged_in;\n    }\n\n    /** Whether a module is still loading data */\n    public get is_loading(): boolean {\n        if (this.loading_state) {\n            for (const mod in this.loading_state) {\n                if (this.loading_state[mod] && this.loading_state[mod].state === 'loading') {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /** List of modules with a loading state */\n    public get loading_state_list(): LoadingState[] {\n        const list: LoadingState[] = [];\n        for (const mod in this.loading_state) {\n            if (this.loading_state[mod]) {\n                list.push(this.loading_state[mod]);\n            }\n        }\n        return list;\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'loading',\n            this._service.listen<ApplicationLoadingState>('loading').subscribe(loading => {\n                this.loading_state = loading;\n            })\n        );\n        this._service.initialised.pipe(first(_ => _)).subscribe(() => {\n            this.logo = this._service.setting('app.logo_dark') || { type: 'icon' };\n        });\n    }\n}\n","\n<div class=\"shell\">\n    <div class=\"view\" *ngIf=\"!show_login\">\n        <router-outlet></router-outlet>\n    </div>\n    <div class=\"login-module\" *ngIf=\"show_login\">\n        <app-login></app-login>\n    </div>\n    <div class=\"loading-block\" *ngIf=\"is_loading\">\n        <div class=\"info-block\">\n            <div class=\"header\" [style.background-color]=\"logo?.background\">\n                <div class=\"logo\">\n                    <i *ngIf=\"logo?.type === 'icon'\" [class]=\"logo.class\">{{ logo.content }}</i>\n                    <img *ngIf=\"logo?.type === 'img'\" [src]=\"logo.src | safe:'resource'\" />\n                </div>\n            </div>\n            <div class=\"item\" *ngFor=\"let item of loading_state_list\">\n                <div class=\"message\">{{ item.message }}</div>\n                <div class=\"icon\">\n                    <ng-container [ngSwitch]=\"item.state\">\n                        <ng-container *ngSwitchCase=\"'complete'\">\n                            <i class=\"material-icons success\">done</i>\n                        </ng-container>\n                        <ng-container *ngSwitchCase=\"'failed'\">\n                            <i class=\"material-icons failure\">close</i>\n                        </ng-container>\n                        <ng-container *ngSwitchDefault>\n                            <mat-spinner diameter=\"16\"></mat-spinner>\n                        </ng-container>\n                    </ng-container>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","export const environment = {\n  production: true\n};\n","\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}