{"version":3,"sources":["webpack:///src/app/shell/visitors/overlays/visitors-form-modal/event-form/event-form.component.ts","webpack:///src/app/shell/visitors/overlays/visitors-form-modal/event-form/event-form.component.html","webpack:///src/app/shell/visitors/overlays/visitors-form-modal/visitor-form/visitor-form.component.ts","webpack:///src/app/shell/visitors/overlays/visitors-form-modal/visitor-form/visitor-form.component.html","webpack:///src/app/shell/visitors/overlays/visitors-form-modal/visitors-form-modal.component.ts","webpack:///src/app/shell/visitors/overlays/visitors-form-modal/visitors-form-modal.component.html","webpack:///src/app/shell/visitors/timeline/item/item.component.ts","webpack:///src/app/shell/visitors/timeline/item/item.component.html","webpack:///src/app/shell/visitors/timeline/timeline.component.ts","webpack:///src/app/shell/visitors/timeline/timeline.component.html","webpack:///src/app/shell/visitors/timeline/visitor/visitor.component.ts","webpack:///src/app/shell/visitors/timeline/visitor/visitor.component.html","webpack:///src/app/shell/visitors/visitors.component.ts","webpack:///src/app/shell/visitors/visitors.component.html","webpack:///src/app/shell/visitors/visitors.module.ts"],"names":["EventFormComponent","_service","attendees","changes","event","form","controls","value","list","push","visitor","setValue","item","index","splice","Users","addFrom","toJSON","selector","templateUrl","styleUrls","VisitorFormComponent","personChange","person","name","minLength","email","required","markAllAsTouched","valid","emit","VisitorsFormModalComponent","_dialog_ref","_dialog","_data","title","booking","subscription","valueChanges","subscribe","storePendingChange","map","user","ref","open","data","content","icon","type","action","componentInstance","reason","id","loading","disableClose","then","notifySuccess","close","err","notifyError","message","timeout","has_changes","save","bkn","metadata","length","VisitorBookingItemComponent","search","show_attendees","checked_in_users","checked_in","reduce","counts","external","count","indexOf","attendee_emails","join","start_time","date_string","animations","VisitorTimelineComponent","visitor_bookings","filtered_bookings","search$","Organisation","initialised","pipe","_","initBookings","listen","next","date","interval","unix","filter","str","toLowerCase","find","search_results$","startOf","zone","building","Spaces","query","zone_ids","available_from","available_to","endOf","bookings","items","space","concat","bookingsFor","sort","a","b","has_visitors","isSame","format","date_display","valueOf","findIndex","VisitorComponent","_element","_renderer","is_match","addClass","nativeElement","removeClass","organiser_email","VisitorsComponent","minute","Math","ceil","visitor_space","holding_bay","duration","room_id","newVisitorMeeting","ROUTES","path","component","redirectTo","VisitorsModule","forChild","declarations","imports"],"mappings":"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","file":"shell-visitors-visitors-module-es5.js","sourcesContent":["import { Component, OnInit, Input, SimpleChanges, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { Booking } from 'src/app/services/data/bookings/booking.class';\nimport { User } from 'src/app/services/data/users/user.class';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { Identity } from 'src/app/shared/utilities/types.utilities';\n\n@Component({\n    selector: 'a-event-form',\n    templateUrl: './event-form.component.html',\n    styleUrls: ['./event-form.component.scss'],\n})\nexport class EventFormComponent implements OnChanges {\n    /** Booking details to display */\n    @Input() public event: Booking;\n    /** Booking details to display */\n    @Input() public form: FormGroup;\n\n    /** List of attendees in the booking */\n    public attendees: User[] = [];\n\n    constructor(private _service: ApplicationService) {}\n\n    public ngOnChanges(changes: SimpleChanges) {\n        /* istanbul ignore else */\n        if (changes.event || changes.form) {\n            this.attendees = this.form.controls.attendees.value;\n        }\n    }\n\n    public addVisitor() {\n        const list = this.form.controls.attendees.value;\n        list.push(new User({ visitor: true }));\n        this.form.controls.attendees.setValue(list);\n    }\n\n    /** Replace visitor with updated values */\n    public replaceVisitor(item: User, index: number) {\n        const attendees = this.attendees;\n        attendees.splice(index, 1, item);\n        this.attendees = attendees;\n        this._service.Users.addFrom('visitor-modal', item.toJSON(), 'other');\n        this.form.controls.attendees.setValue(attendees);\n    }\n\n    /** Remove visitor from attendee list */\n    public removeVisitor(item: User, index: number) {\n        const attendees = this.attendees;\n        attendees.splice(index, 1);\n        this.form.controls.attendees.setValue(attendees);\n    }\n\n    public trackByFn(index: number, item: Identity) {\n        return index;\n    }\n}\n","<form *ngIf=\"form\" [formGroup]=\"form\">\n    <div class=\"visitor-booking\" *ngIf=\"event\">\n        <div class=\"details\">\n            <div class=\"icon\">\n                <app-icon [icon]=\"{ class: 'material-icons', content: 'event' }\"></app-icon>\n            </div>\n            <div class=\"time\">{{ event.start_time }} <span> - {{ event.duration > 0 ? event.end_time : '' }}</span></div>\n            <div class=\"host\">\n                <div class=\"staff\">S</div>\n                <div class=\"name\">{{ event.organiser?.name || event.organiser_email }}</div>\n            </div>\n            <div class=\"title\">\n                <label for=\"title\">Title</label>\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        name=\"title\"\n                        placeholder=\"Meeting Title\"\n                        formControlName=\"title\"\n                    />\n                    <mat-error>Title is required</mat-error>\n                </mat-form-field>\n            </div>\n            <div class=\"actions\"></div>\n        </div>\n        <div class=\"attendees\">\n            <div class=\"bar\"></div>\n            <ng-container *ngFor=\"let item of attendees; let i = index; trackBy: trackByFn\">\n                <div class=\"visitor\" *ngIf=\"item.external\">\n                    <a-visitor-form\n                        [event]=\"event\"\n                        [person]=\"item\"\n                        (personChange)=\"replaceVisitor($event, i)\"\n                    ></a-visitor-form>\n                    <button mat-icon-button name=\"remove\" (tapped)=\"removeVisitor(item, i)\">\n                        <app-icon [icon]=\"{ class: 'material-icons', content: 'delete' }\"></app-icon>\n                    </button>\n                </div>\n            </ng-container>\n            <button mat-button type=\"button\" name=\"add\" [class.add]=\"true\" (tapped)=\"addVisitor()\">\n                <div class=\"content\">\n                    <div class=\"icon\">\n                        <app-icon [icon]=\"{ class: 'material-icons', content: 'add' }\"></app-icon>\n                    </div>\n                    <div class=\"text\">Add visitor</div>\n                    <div class=\"bar\"></div>\n                </div>\n            </button>\n        </div>\n    </div>\n</form>\n","import { Component, OnInit, Input, SimpleChanges, OnChanges, EventEmitter, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\nimport { Booking } from 'src/app/services/data/bookings/booking.class';\nimport { User } from 'src/app/services/data/users/user.class';\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { ApplicationService } from 'src/app/services/app.service';\n\n@Component({\n    selector: 'a-visitor-form',\n    templateUrl: './visitor-form.component.html',\n    styleUrls: ['./visitor-form.component.scss'],\n})\nexport class VisitorFormComponent extends BaseDirective implements OnChanges {\n    /** Booking that the user is assoicated with */\n    @Input() public event: Booking;\n    /** User details to display */\n    @Input() public person: User;\n    /** Form control for attendees */\n    @Input() public field: FormControl;\n    /** Emitter for changes to the person */\n    @Output() public personChange = new EventEmitter<User>();\n    /** Form fields for visitor details */\n    public form: FormGroup;\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        /* istanbul ignore else */\n        if (changes.person) {\n            delete this.form;\n            this.form = new FormGroup({\n                name: new FormControl(this.person.name, [Validators.minLength(2)]),\n                email: new FormControl(this.person.email, [Validators.required, Validators.email]),\n            });\n        }\n    }\n\n    public updatePerson() {\n        this.form.markAllAsTouched();\n        /* istanbul ignore else */\n        if (this.form.valid) {\n            this.person = new User({ ...this.form.value, visitor: true });\n            this.personChange.emit(this.person);\n        }\n    }\n}\n","<div class=\"icon\">\n    <app-icon [icon]=\"{ class: 'material-icons', content: 'face' }\"></app-icon>\n</div>\n<form *ngIf=\"form\" [formGroup]=\"form\">\n    <div class=\"details\">\n        <div class=\"name\">\n            <label for=\"name\">Name</label>\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"name\" placeholder=\"Name\" formControlName=\"name\" (blur)=\"updatePerson()\" />\n                <mat-error>Name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"email\">\n            <label for=\"email\">Email Address</label>\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"email\" type=\"email\" placeholder=\"Email Address\" formControlName=\"email\" (blur)=\"updatePerson()\" />\n                <mat-error>A valid email address is required</mat-error>\n            </mat-form-field>\n        </div>\n    </div>\n</form>\n<div class=\"bar\"></div>\n","import { Component, OnInit, Inject, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material/dialog';\n\nimport { Booking } from 'src/app/services/data/bookings/booking.class';\nimport { BaseDirective } from 'src/app/shared/base.directive';\nimport { User } from 'src/app/services/data/users/user.class';\nimport { DialogEvent } from 'src/app/shared/utilities/types.utilities';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport {\n    ConfirmModalComponent,\n    CONFIRM_METADATA,\n} from 'src/app/overlays/confirm-modal/confirm-modal.component';\n\nexport interface VisitorsFormModalData {\n    /** Details of visitor listing */\n    booking: Booking;\n}\n\n@Component({\n    selector: 'a-visitors-form-modal',\n    templateUrl: './visitors-form-modal.component.html',\n    styleUrls: ['./visitors-form-modal.component.scss'],\n})\nexport class VisitorsFormModalComponent extends BaseDirective implements OnInit {\n    /** Emitter for user action on the modal */\n    @Output() public event = new EventEmitter<DialogEvent>();\n    /** Form fields for visitor booking */\n    public form: FormGroup;\n    /** Display string for the loading state */\n    public loading: string;\n\n    /** Visitor booking data */\n    public get booking(): Booking {\n        return this._data.booking;\n    }\n\n    /** Whether form fields contain an attendee */\n    public get has_attendees() {\n        return (\n            this.form &&\n            this.form.controls.attendees.value &&\n            this.form.controls.attendees.value.length\n        );\n    }\n\n    constructor(\n        private _service: ApplicationService,\n        private _dialog_ref: MatDialogRef<VisitorsFormModalComponent>,\n        private _dialog: MatDialog,\n        @Inject(MAT_DIALOG_DATA) private _data: VisitorsFormModalData\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.form = new FormGroup({\n            title: new FormControl(this.booking.title, [Validators.required]),\n            attendees: new FormControl(this.booking.attendees, [Validators.minLength(1)]),\n        });\n        this.subscription(\n            'title',\n            this.form.controls.title.valueChanges.subscribe((value: string) =>\n                this.booking.storePendingChange('title', value)\n            )\n        );\n        this.subscription(\n            'attendees',\n            this.form.controls.attendees.valueChanges.subscribe((value: User[]) => {\n                this.booking.storePendingChange(\n                    'attendee_emails',\n                    value.map((user) => user.email)\n                );\n            })\n        );\n    }\n\n    /** Delete visitor booking */\n    public delete() {\n        const ref = this._dialog.open(ConfirmModalComponent, {\n            ...CONFIRM_METADATA,\n            data: {\n                title: 'Delete meeting',\n                content: 'Are you sure you wish to delete this meeting?',\n                icon: { type: 'icon', class: 'material-icons', content: 'delete' },\n                action: 'Ok',\n            },\n        });\n        this.subscription(\n            'confirm',\n            ref.componentInstance.event.subscribe((event: DialogEvent) => {\n                /* istanbul ignore else */\n                if (event.reason === 'done') {\n                    /* istanbul ignore else */\n                    if (this.booking.id) {\n                        this.loading = 'Deleting visitor booking...';\n                        this._dialog_ref.disableClose = true;\n                        this.booking.delete().then(\n                            () => {\n                                this.event.emit({ reason: 'done' });\n                                this._service.notifySuccess('Successfully removed visitors.');\n                                this._dialog_ref.close();\n                            },\n                            (err) => {\n                                this.loading = null;\n                                this._service.notifyError(\n                                    `Failed to remove visitors. Error: ${err.message || err}`\n                                );\n                                this._dialog_ref.disableClose = false;\n                            }\n                        );\n                    }\n                }\n                ref.close();\n            })\n        );\n    }\n\n    /** Save changes to visitor booking */\n    public save() {\n        this.timeout('save', () => {\n            this.loading = 'Saving visitor booking...';\n            this.form.markAllAsTouched();\n            this._dialog_ref.disableClose = true;\n            /* istanbul ignore else */\n            if (this.booking.has_changes && this.form.valid) {\n                this.booking.save().then(\n                    (bkn) => {\n                        this.event.emit({ reason: 'done', metadata: bkn });\n                        this._service.notifySuccess(\n                            this.booking.id\n                                ? 'Successfully updated visitors.'\n                                : 'Successfully added visitors.'\n                        );\n                        this._dialog_ref.close();\n                    },\n                    (err) => {\n                        this.loading = null;\n                        this._service.notifyError(\n                            `Failed to ${this.booking.id ? 'update' : 'add'} visitors. Error: ${\n                                err.message || err\n                            }`\n                        );\n                        this._dialog_ref.disableClose = false;\n                    }\n                );\n            }\n        });\n    }\n}\n","<header>\n    <div class=\"heading\">{{ booking.id ? 'Edit' : 'New' }} Visitors</div>\n    <button mat-icon-button mat-dialog-close *ngIf=\"!loading\">\n        <app-icon [icon]=\"{ type: 'icon', class: 'material-icons', content: 'close' }\"></app-icon>\n    </button>\n</header>\n<mat-dialog-content>\n    <main *ngIf=\"!loading; else load_state\">\n        <a-event-form [form]=\"form\" [event]=\"booking\"></a-event-form>\n    </main>\n</mat-dialog-content>\n<mat-dialog-actions *ngIf=\"!loading\">\n    <footer>\n        <button mat-button name=\"save\" [disabled]=\"!has_attendees\" (tapped)=\"save()\">Save</button>\n        <button mat-button name=\"delete\" class=\"error\" *ngIf=\"booking.id\" (tapped)=\"delete()\">\n            Delete\n        </button>\n    </footer>\n</mat-dialog-actions>\n<ng-template #load_state>\n    <main style=\"min-height: 12em;\">\n        <div class=\"info-block center\">\n            <div class=\"icon\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n            </div>\n            <div class=\"text\">{{ loading }}</div>\n        </div>\n    </main>\n</ng-template>\n","import { Component, Input, SimpleChanges, OnChanges } from '@angular/core';\n\nimport { Booking } from 'src/app/services/data/bookings/booking.class';\nimport { ANIMATION_SHOW_CONTRACT_EXPAND } from 'src/app/shared/globals/angular-animations';\nimport { VisitorsFormModalComponent, VisitorsFormModalData } from '../../overlays/visitors-form-modal/visitors-form-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n    selector: 'a-visitor-booking',\n    templateUrl: './item.component.html',\n    styleUrls: ['./item.component.scss'],\n    animations: [ANIMATION_SHOW_CONTRACT_EXPAND]\n})\nexport class VisitorBookingItemComponent implements OnChanges {\n    /** Booking details to display */\n    @Input() public event: Booking;\n    /** Search filter string */\n    @Input() public search: string;\n    /** Whether attendee list should be shown */\n    public show_attendees: boolean;\n\n    /** Display string for checkin statuses of all attendees */\n    public get status(): string {\n        const checked_in_users = this.event.checked_in;\n        const { checked_in, count } = this.event.attendees.reduce((counts, user) => {\n            /* istanbul ignore else */\n            if (user.external) {\n                counts.count++;\n                /* istanbul ignore else */\n                if (checked_in_users.indexOf(user.email) >= 0) {\n                    counts.checked_in++\n                }\n            }\n            return counts;\n        }, { checked_in: 0, count: 0 });\n        return `${checked_in} / ${count}`;\n    }\n\n    /** URL for mailing all attendees of the event */\n    public get mail_url(): string {\n        return `mailto:${this.event.attendee_emails.join(',')}?Subject=\"${this.event.title}\"%20at%20${this.event.start_time},%20${this.event.date_string}`;\n    }\n\n    constructor(private _dialog: MatDialog) { }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        /* istanbul ignore else */\n        if (changes.search) {\n            this.show_attendees = !!this.search;\n        }\n    }\n\n    public openEditModal() {\n        this._dialog.open<VisitorsFormModalComponent, VisitorsFormModalData>(\n            VisitorsFormModalComponent,\n            {\n                data: {\n                    booking: this.event\n                }\n            }\n        );\n    }\n}\n","<div class=\"visitor-booking\" *ngIf=\"event\" [class.showing]=\"show_attendees\">\n    <div class=\"details\" [class.blur]=\"search\">\n        <div class=\"icon\">\n            <app-icon [icon]=\"{ class: 'material-icons', content: 'event' }\"></app-icon>\n        </div>\n        <div class=\"time\">\n            <ng-container *ngIf=\"!event.all_day\">\n                {{ event.start_time }} <span> - {{ event.duration > 0 ? event.end_time : '' }}</span>\n            </ng-container>\n            <ng-container *ngIf=\"event.all_day\">All Day</ng-container>\n        </div>\n        <div class=\"host\">\n            <div class=\"staff\">S</div>\n            <div class=\"name\">{{ event.organiser?.name || event.organiser_email }}</div>\n        </div>\n        <div class=\"title\">{{ event.title }}</div>\n        <div class=\"location\">{{ event.space?.name || event.location }}</div>\n        <div class=\"status\">{{ status }}</div>\n        <div class=\"actions\">\n            <a mat-icon-button matTooltip=\"Email Visitors\" name=\"email-all\" [href]=\"mail_url | safe:'url'\">\n                <action-icon\n                    [icon]=\"{ class: 'material-icons', content: 'mail' }\"\n                ></action-icon>\n            </a>\n            <button mat-icon-button name=\"checkin-all\" matTooltip=\"Checkin All Visitors\">\n                <action-icon\n                    [icon]=\"{ class: 'material-icons', content: 'event_available' }\"\n                ></action-icon>\n            </button>\n            <button mat-icon-button matTooltip=\"Edit Visitors\" name=\"edit\" (tapped)=\"openEditModal()\">\n                <action-icon [icon]=\"{ class: 'material-icons', content: 'edit' }\"></action-icon>\n            </button>\n        </div>\n        <div class=\"toggle\">\n            <button mat-icon-button name=\"show-attendees\" (tapped)=\"show_attendees = !show_attendees\">\n                <app-icon\n                    [icon]=\"{\n                        class: 'material-icons',\n                        content: show_attendees ? 'keyboard_arrow_down' : 'keyboard_arrow_right'\n                    }\"\n                ></app-icon>\n            </button>\n        </div>\n    </div>\n    <div class=\"attendees\" [@show]=\"show_attendees ? 'show' : 'hide'\">\n        <div class=\"bar\"></div>\n        <a-visitor *ngFor=\"let item of event.attendees\" [event]=\"event\" [person]=\"item\" [search]=\"search\"></a-visitor>\n    </div>\n</div>\n","import { Component, OnInit, Input, SimpleChanges } from '@angular/core';\nimport { Observable, Subject, of } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilChanged,\n    switchMap,\n    catchError,\n    map,\n    first\n} from 'rxjs/operators';\n\nimport { Space } from 'src/app/services/data/spaces/space.class';\nimport { Booking } from 'src/app/services/data/bookings/booking.class';\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { BaseDirective } from 'src/app/shared/base.directive';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'visitor-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class VisitorTimelineComponent extends BaseDirective implements OnInit {\n    /** Currently selected date */\n    @Input() public date: number;\n    /** Filter string */\n    @Input() public search: string;\n    /** List of visitor bookings for the current date */\n    public visitor_bookings: Booking[] = [];\n    /** List of filtered bookings */\n    public filtered_bookings: Booking[] = [];\n    /** Whether visitor list is loading */\n    public loading: boolean;\n    /** List of items from an API search */\n    public search_results$: Observable<Booking[]>;\n    /** Subject holding the value of the search */\n    public readonly search$ = new Subject<string>();\n\n    /** Display string for the selected date */\n    public get date_display() {\n        const date = dayjs(this.date);\n        return date.isSame(dayjs(), 'd') ? 'Today' : date.format('DD MMM YYYY');\n    }\n\n    public get active_index(): number {\n        /* istanbul ignore else */\n        if (this.date_display === 'Today') {\n            const date = dayjs().startOf('m').valueOf();\n            return this.filtered_bookings.findIndex(bkn => date > bkn.date);\n        }\n        return -1;\n    }\n\n    constructor(private _service: ApplicationService) {\n        super();\n    }\n\n    ngOnInit(): void {\n        this._service.Organisation.initialised.pipe(first(_ => _)).subscribe(() => {\n            this.initBookings();\n            this.subscription(\n                'building',\n                this._service.Organisation.listen('active_building').subscribe(_ =>\n                    this.search$.next(`${this.date}|${_.id}`)\n                )\n            );\n            this.interval('update_bookings', () => this.search$.next(`${this.date}|${dayjs().unix()}`), 30 * 1000);\n        });\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        /* istanbul ignore else */\n        if (changes.date) {\n            this.search$.next(`${this.date}`);\n        }\n        /* istanbul ignore else */\n        if (changes.search) {\n            this.filtered_bookings = this.filter(this.search);\n        }\n    }\n\n    /** Filter the visitor bookings */\n    public filter(str: string = '') {\n        const search = str.toLowerCase();\n        return this.visitor_bookings.filter(booking => {\n            return booking.attendees.find(\n                user =>\n                    user.name.toLowerCase().indexOf(search) >= 0 ||\n                    user.email.toLowerCase().indexOf(search) >= 0\n            );\n        });\n    }\n\n    private initBookings() {\n        // Listen for input changes\n        this.search_results$ = this.search$.pipe(\n            debounceTime(100),\n            distinctUntilChanged(),\n            switchMap(_ => {\n                this.loading = true;\n                const date = dayjs(this.date).startOf('d');\n                const zone = this._service.Organisation.building.id;\n                return this._service.Spaces.query({\n                    zone_ids: zone,\n                    available_from: date.unix(),\n                    available_to: date.endOf('d').unix()\n                });\n            }),\n            catchError(_ => of([])),\n            map((list: Space[]) => {\n                const bookings: Booking[] = list.reduce(\n                    (items, space) => items.concat(space.bookingsFor(this.date)),\n                    []\n                );\n                bookings.sort((a, b) => a.date - b.date);\n                return bookings.filter(bkn => bkn.has_visitors);\n            })\n        );\n        // Process API results\n        this.subscription(\n            'search_results',\n            this.search_results$.subscribe(list => {\n                this.loading = false;\n                this.visitor_bookings = list;\n                this.filtered_bookings = this.filter(this.search);\n            })\n        );\n    }\n}\n","<div class=\"visitor-timeline\">\n    <div class=\"loader\" *ngIf=\"loading\">\n        <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n    </div>\n    <div class=\"heading\">\n        <div class=\"icon\"></div>\n        <div class=\"time\">Time</div>\n        <div class=\"host\">Host</div>\n        <div class=\"title\">Title</div>\n        <div class=\"location\">Location</div>\n        <div class=\"state\">Status</div>\n    </div>\n    <div class=\"list\">\n        <ng-container *ngIf=\"filtered_bookings && filtered_bookings.length; else empty_state\">\n            <div class=\"current-line\" *ngIf=\"date_display === 'Today' && (active_index === -1)\">\n                <div class=\"triangle\"></div>\n            </div>\n            <ng-container *ngFor=\"let booking of filtered_bookings; let i = index\">\n                <a-visitor-booking [event]=\"booking\" [search]=\"search\"></a-visitor-booking>\n                <div class=\"current-line\" *ngIf=\"date_display === 'Today' && (active_index === i)\">\n                    <div class=\"triangle\"></div>\n                </div>\n            </ng-container>\n        </ng-container>\n    </div>\n</div>\n<ng-template #empty_state>\n    <div class=\"info-block\">\n        <div class=\"icon\">\n            <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n        </div>\n        <div class=\"text\">No visitors {{ search ? 'matching ' + '\"' + search + '\"' : '' }} for {{ date_display }}</div>\n    </div>\n</ng-template>\n","import { Component, Input, SimpleChanges, Renderer2, ElementRef, OnChanges } from '@angular/core';\n\nimport { User } from 'src/app/services/data/users/user.class';\nimport { Booking } from 'src/app/services/data/bookings/booking.class';\n\n@Component({\n    selector: 'a-visitor',\n    templateUrl: './visitor.component.html',\n    styleUrls: ['./visitor.component.scss']\n})\nexport class VisitorComponent implements OnChanges {\n    /** Booking that the user is assoicated with */\n    @Input() public event: Booking;\n    /** User details to display */\n    @Input() public person: User;\n    /** Search filter string */\n    @Input() public search: string;\n    /** Status of the visitor */\n    public status: string;\n\n    /** Whether user is a match for  */\n    public get is_match(): boolean {\n        const search = (this.search || '').toLowerCase();\n        return (\n            this.person.name.toLowerCase().indexOf(search) >= 0 ||\n            this.person.email.toLowerCase().indexOf(search) >= 0\n        );\n    }\n\n    /** URL for mailing all attendees of the event */\n    public get mail_url(): string {\n        return `mailto:${this.person.email}?subject=\"${this.event.title}\"%20at%20${\n            this.event.start_time\n        },%20${this.event.date_string}${\n            this.event.organiser_email.toLowerCase() !== this.person.email\n                ? '&cc=' + this.event.organiser_email\n                : ''\n        }`;\n    }\n\n    constructor(private _element: ElementRef<HTMLElement>, private _renderer: Renderer2) {}\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.search) {\n            if (this.search && !this.is_match) {\n                this._renderer.addClass(this._element.nativeElement, 'not-match');\n            } else {\n                this._renderer.removeClass(this._element.nativeElement, 'not-match');\n            }\n        }\n    }\n}\n","<div class=\"icon\">\n    <app-icon [icon]=\"{ class: 'material-icons', content: 'face' }\"></app-icon>\n</div>\n<div class=\"details\">\n    <div class=\"user\">\n        <div class=\"staff\" *ngIf=\"!person.external\">S</div>\n        <div class=\"name\">{{ person?.name || person?.email }}</div>\n    </div>\n    <div class=\"title\"></div>\n    <div class=\"status\" *ngIf=\"person.external\">{{ status }}</div>\n    <div class=\"actions\">\n        <a mat-icon-button matTooltip=\"Email Visitor\" [href]=\"mail_url | safe:'url'\">\n            <action-icon\n                [icon]=\"{ class: 'material-icons', content: 'mail' }\"\n            ></action-icon>\n        </a>\n        <button mat-icon-button matTooltip=\"Checkin Visitor\">\n            <action-icon *ngIf=\"person.external\"\n                [icon]=\"{ class: 'material-icons', content: 'event_available' }\"\n            ></action-icon>\n        </button>\n        <button mat-icon-button [disabled]=\"true\"></button>\n    </div>\n    <div class=\"empty\"></div>\n</div>\n<div class=\"bar\"></div>\n","import { Component, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { ApplicationService } from 'src/app/services/app.service';\nimport { Booking } from 'src/app/services/data/bookings/booking.class';\nimport {\n    VisitorsFormModalComponent,\n    VisitorsFormModalData\n} from './overlays/visitors-form-modal/visitors-form-modal.component';\n\nimport * as dayjs from 'dayjs';\n\n@Component({\n    selector: 'app-visitors',\n    templateUrl: './visitors.component.html',\n    styleUrls: ['./visitors.component.scss']\n})\nexport class VisitorsComponent implements OnInit {\n    /** Currently selected date */\n    public date: string;\n    /** Search filter string */\n    public search_str: string;\n\n    constructor(private _dialog: MatDialog, private _service: ApplicationService) {}\n\n    ngOnInit(): void {}\n\n    public newVisitorMeeting() {\n        let date = dayjs();\n        date = date.minute(Math.ceil(date.minute() / 5) * 5);\n        const building = this._service.Organisation.building;\n        const space = this._service.Spaces.find(building.visitor_space || building.holding_bay);\n        const booking = new Booking({ date: date.valueOf(), duration: -1, room_id: [space.email] });\n        this._dialog.open<VisitorsFormModalComponent, VisitorsFormModalData>(\n            VisitorsFormModalComponent,\n            {\n                data: {\n                    booking\n                }\n            }\n        );\n    }\n}\n","<div class=\"visitors\">\n    <a-sidebar></a-sidebar>\n    <div class=\"group\">\n        <a-topbar-header [(date)]=\"date\" (dateChange)=\"search_str = ''\">\n            <div class=\"input-wrapper\">\n                <mat-form-field [class.rounded]=\"true\" appearance=\"outline\">\n                    <app-icon [icon]=\"{ class: 'material-icons', content: 'search' }\" matPrefix></app-icon>\n                    <input matInput [(ngModel)]=\"search_str\" name=\"visitor-name\" placeholder=\"Search...\" />\n                    <button mat-icon-button matSuffix *ngIf=\"search_str\" (tapped)=\"search_str = ''\">\n                        <app-icon [icon]=\"{ class: 'material-icons', content: 'close' }\"></app-icon>\n                    </button>\n                </mat-form-field>\n            </div>\n        </a-topbar-header>\n        <main>\n            <visitor-timeline [date]=\"date\" [search]=\"search_str\"></visitor-timeline>\n        </main>\n    </div>\n    <button mat-button name=\"new\" class=\"new-item\" (tapped)=\"newVisitorMeeting()\">\n        <div class=\"content\">\n            <div class=\"material-icons\">add</div>\n            <div class=\"text\">Add Visitors</div>\n        </div>\n    </button>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Route, RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { VisitorsComponent } from './visitors.component';\nimport { SharedContentModule } from 'src/app/shared/shared.module';\nimport { VisitorTimelineComponent } from './timeline/timeline.component';\nimport { VisitorBookingItemComponent } from './timeline/item/item.component';\nimport { VisitorComponent } from './timeline/visitor/visitor.component';\nimport { VisitorsFormModalComponent } from './overlays/visitors-form-modal/visitors-form-modal.component';\nimport { EventFormComponent } from './overlays/visitors-form-modal/event-form/event-form.component';\nimport { VisitorFormComponent } from './overlays/visitors-form-modal/visitor-form/visitor-form.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: VisitorsComponent },\n    { path: ':level', component: VisitorsComponent },\n    { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n    declarations: [\n        VisitorsComponent,\n        VisitorTimelineComponent,\n        VisitorBookingItemComponent,\n        VisitorComponent,\n        VisitorsFormModalComponent,\n        EventFormComponent,\n        VisitorFormComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class VisitorsModule {}\n"]}